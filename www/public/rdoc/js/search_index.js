var search_data = {"index":{"searchIndex":["sequel","asttransformer","basicobject","connectionpool","classmethods","database","dataset","argumentmapper","datasetmodule","emulatepreparedstatementmethods","placeholderliteralizer","argument","recorder","preparedstatementmethods","unnumberedargumentmapper","deprecation","error","hookfailed","inflections","integermigrator","literalstring","migration","migrationaltertablereverser","migrationdsl","migrationreverser","migrator","error","notcurrenterror","model","associations","associationdatasetmethods","associationreflection","classmethods","datasetmethods","datasetmodule","eagergraphloader","instancemethods","manytomanyassociationreflection","manytooneassociationreflection","onethroughoneassociationreflection","onetomanyassociationreflection","onetooneassociationreflection","singularassociationreflection","classmethods","datasetmethods","datasetmodule","errors","instancemethods","nomatchingrow","plugins","qualifier","sql","aliasmethods","aliasedexpression","bitwisemethods","blob","booleanconstant","booleanexpression","booleanmethods","builders","caseexpression","cast","castmethods","columnall","complexexpression","complexexpressionmethods","constant","constants","delayedevaluation","expression","function","genericexpression","identifier","inequalitymethods","joinclause","joinonclause","joinusingclause","negativebooleanconstant","numericexpression","numericmethods","operatorbuilders","ordermethods","orderedexpression","patternmatchmethods","placeholderliteralstring","qualifiedidentifier","qualifyingmethods","stringconcatenationmethods","stringexpression","stringmethods","subscript","subscriptmethods","valuelist","virtualrow","window","wrapper","sqltime","schema","altertablegenerator","createtablegenerator","sequelmethods","shardedsingleconnectionpool","shardedthreadedconnectionpool","simplemigration","singleconnectionpool","threadedconnectionpool","timestampmigrator","timezones","validationfailed","!~()","&()","*()","*()","**()","+()","+()","+()","<<()","<<()","==()","==()","==()","===()","=~()","bignum()","fixnum()","model()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","_add_method()","_clone()","_columns()","_import()","_remove_all_method()","_remove_method()","_select_map_multiple()","_select_map_single()","_setter_method()","adapter_class()","adapter_scheme()","adapter_scheme()","add()","add_column()","add_column()","add_constraint()","add_foreign_key()","add_full_text_index()","add_graph_aliases()","add_index()","add_index()","add_method()","add_primary_key()","add_servers()","add_servers()","add_servers()","add_spatial_index()","add_type_method()","add_unique_constraint()","after_commit()","after_initialize()","after_rollback()","after_set_dataset()","aliased_expression_sql_append()","all()","all()","all_association_reflections()","all_connections()","all_connections()","all_connections()","all_connections()","allocated()","alter_table()","alter_table_generator()","application_to_database_timestamp()","application_to_database_timestamp()","apply()","apply()","apply()","apply()","apply_dataset_changes()","apply_distinct_on_eager_limit_strategy()","apply_eager_dataset_changes()","apply_eager_graph_limit_strategy()","apply_eager_graph_limit_strategy()","apply_eager_limit_strategy()","apply_ruby_eager_limit_strategy()","apply_window_function_eager_limit_strategy()","arg()","array_sql_append()","as()","as()","as_hash()","as_hash()","as_hash()","asc()","asc()","asc()","assign_singular?()","assign_singular?()","associate()","associated_class()","associated_dataset()","associated_key_alias()","associated_key_array()","associated_key_column()","associated_key_table()","associated_object_keys()","associated_object_keys()","associated_object_keys()","association_dataset_for()","association_dataset_proc()","association_join()","association_method()","association_reflection()","association_reflection()","associations()","associations()","attr_reader()","autoincrementing_primary_key()","available_connections()","avg()","bind()","bind_arguments()","blob()","boolean_constant_sql_append()","cache_get()","cache_set()","call()","call()","call()","call()","call()","call()","can_have_associated_objects?()","can_have_associated_objects?()","can_have_associated_objects?()","can_have_associated_objects?()","cancel_action()","case()","case_expression_sql_append()","cast()","cast()","cast_numeric()","cast_numeric()","cast_sql_append()","cast_string()","cast_string()","cast_type_literal()","cause()","change()","changed_columns()","char_length()","check()","check_current()","clause_methods()","clear()","clear_columns_cache()","clear_setter_methods_cache()","clone()","clone()","cloneable?()","cloneable?()","cloneable?()","coerce()","column()","column_aliases()","column_all_sql_append()","columns()","columns()","columns()","columns!()","complex_expression_sql_append()","complex_expression_sql_append()","compound_clone()","compound_from_self()","condition_specifier?()","condition_specifier?()","conn()","connect()","connect()","connect()","const_missing()","constant_sql_append()","constraint()","convert_exception_class()","convert_exception_class()","convert_output_timestamp()","convert_output_timestamp()","convert_timestamp()","convert_timestamp()","core_extensions?()","core_extensions?()","count()","count()","create()","create()","create()","create_join_table()","create_join_table!()","create_join_table?()","create_or_replace_view()","create_table()","create_table!()","create_table?()","create_table_generator()","create_view()","current()","current()","current_datetime()","database_to_application_timestamp()","database_to_application_timestamp()","database_type()","dataset()","dataset()","dataset=()","dataset_class=()","dataset_method()","dataset_module()","dataset_need_primary_key?()","dataset_need_primary_key?()","date()","db()","db=()","db_schema()","deep_qualify()","def_model()","def_column_alias()","def_dataset_caching_method()","def_dataset_methods()","def_sequel_method()","def_sql_method()","default_associated_key_alias()","default_eager_loader()","default_join_table()","default_key()","default_key()","default_left_key()","default_right_key()","default_right_key()","default_timezone=()","default_timezone=()","delay()","delayed_evaluation_sql_append()","delayed_evaluation_sql_append()","delete()","delete()","delete_row_number_column()","deprecate()","deprecate_constant()","desc()","desc()","desc()","descendants()","destroy()","destroy()","disconnect()","disconnect()","disconnect()","disconnect()","disconnect()","disconnect_connection()","distinct()","distinct()","down()","down()","drop_column()","drop_column()","drop_constraint()","drop_foreign_key()","drop_index()","drop_index()","drop_join_table()","drop_table()","drop_table?()","drop_view()","dup()","dup()","each()","each()","each()","each_server()","eager()","eager_graph()","eager_graph_association()","eager_graph_associations()","eager_graph_build_associations()","eager_graph_lazy_dataset?()","eager_graph_lazy_dataset?()","eager_graph_limit_strategy()","eager_graph_limit_strategy()","eager_graph_with_options()","eager_limit_strategy()","eager_limit_strategy()","eager_load_results()","eager_load_results()","eager_loader_key()","eager_loading_use_associated_key?()","eager_loading_use_associated_key?()","elapsed_seconds_since()","elapsed_seconds_since()","empty?()","empty?()","eql?()","eql?()","eql?()","errors()","escape_like()","except()","exclude()","exclude_having()","execute_ddl()","execute_dui()","execute_insert()","exists()","exists?()","expr()","expression?()","extend()","extend_datasets()","extension()","extension()","extension()","extension()","extension()","extract()","extract()","fetch()","filter()","filter()","filter_by_associations_add_conditions?()","filter_by_associations_add_conditions?()","filter_by_associations_conditions_expression()","filter_by_associations_limit_strategy()","finalize()","finalize_associations()","finalize_settings()","finalize_settings()","finalize_settings()","finalize_settings()","find()","find_or_create()","first()","first()","first!()","first_source()","first_source_alias()","first_source_table()","for_update()","foreign_key()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","from()","from()","from_application_timestamp()","from_self()","from_value_pairs()","full_messages()","full_text_index()","function()","function()","function()","function_sql_append()","get()","get()","get()","get_pool()","global_index_namespace?()","graph()","grep()","group()","group_and_count()","group_append()","group_by()","group_cube()","group_rollup()","grouping_sets()","handle_silent_modification_failure?()","handle_silent_modification_failure?()","has_column?()","has_dataset?()","hash()","hash()","hash()","having()","hold()","hold()","hold()","hold()","id()","identifier()","ilike()","ilike()","implicit_table_name()","import()","in_transaction?()","include()","index()","inflections()","inherited()","inherited()","inherited_instance_variables()","initialize_association_cache()","insert()","insert_sql()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","intersect()","invert()","invert()","invert()","irregular()","is_current?()","is_current?()","is_current?()","join()","join()","join_clause_sql_append()","join_on_clause_sql_append()","join_table()","join_table_alias()","join_table_source()","join_using_clause_sql_append()","joined_dataset?()","json_parser_error_class()","json_parser_error_class()","keys()","last()","last()","lateral()","lateral()","like()","like()","like()","limit()","limit_and_offset()","limit_and_offset()","lit()","lit()","lit()","literal()","literal_append()","literal_symbol()","literal_symbol_append()","literal_symbol_set()","load()","load()","load_adapter()","loader()","loader()","lock!()","lock_style()","log_connection_yield()","log_exception()","log_info()","log_sql()","logger=()","many_to_many()","many_to_one()","map()","map_to_prepared_args()","marshallable!()","max()","max_size()","max_size()","method_missing()","method_missing()","method_missing()","migration()","migrator_class()","min()","model()","model_object()","modified!()","modified?()","multi_insert()","multi_insert_sql()","naked()","need_associated_primary_key?()","need_associated_primary_key?()","negate()","negative_boolean_constant_sql_append()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new?()","no_primary_key()","no_transaction()","nowait()","object_to_json()","object_to_json()","offset()","on()","one_through_one()","one_to_many()","one_to_one()","options_overlap()","or()","or()","order()","order()","order_append()","order_by()","order_more()","order_prepend()","ordered_expression_sql_append()","orig_dataset()","orig_require()","orig_require()","over()","paged_each()","paged_each()","parse()","parse_json()","parse_json()","pk()","pk_equal?()","pk_hash()","placeholder_literal_string_sql_append()","placeholder_loader()","plugin()","plural()","pool_type()","pool_type()","pool_type()","pool_type()","predicate_key()","predicate_key()","predicate_key()","predicate_key_values()","predicate_keys()","prepare()","prepare()","prepared_args()","prepared_modify_values()","prepared_sql()","prepared_sql()","prepared_statement()","prepared_statement_name()","prepared_type()","primary_key()","primary_key()","primary_key()","primary_key_hash()","primary_key_method()","primary_key_methods()","primary_key_name()","primary_keys()","provides_accurate_rows_matched?()","qualified_identifier_sql_append()","qualified_key()","qualified_left_key()","qualified_pk_hash()","qualified_primary_key()","qualified_primary_key()","qualified_primary_key_hash()","qualified_right_key()","qualified_right_primary_key()","qualify()","qualify()","qualify()","qualify()","qualify_assoc()","qualify_cur()","quote_identifier()","quote_identifier_append()","quote_identifiers?()","quote_schema_table_append()","quoted()","quoted_identifier_append()","reciprocal()","reciprocal()","reciprocal_array?()","reciprocal_array?()","reciprocal_array?()","recursive_cte_requires_column_aliases?()","recursive_map()","recursive_map()","refresh()","register_extension()","register_extension()","reload()","remove_all_method()","remove_before_destroy?()","remove_before_destroy?()","remove_method()","remove_servers()","remove_servers()","remove_servers()","remove_should_check_existing?()","remove_should_check_existing?()","rename_column()","rename_column()","rename_table()","require()","require()","requires_placeholder_type_specifiers?()","requires_sql_standard_datetimes?()","respond_to_missing?()","respond_to_missing?()","restrict_primary_key()","restrict_primary_key?()","returning()","returns_array?()","returns_array?()","returns_array?()","reverse()","reverse()","reverse()","reverse_order()","right_primary_key()","right_primary_key_method()","right_primary_key_methods()","right_primary_keys()","rollback_checker()","rollback_on_exit()","row_number_column()","row_proc()","run()","run()","run()","run()","run()","run()","run_after_initialize()","save()","save_changes()","schema()","schema_and_table()","schema_type_class()","select()","select()","select()","select()","select_all()","select_append()","select_group()","select_hash()","select_hash_groups()","select_map()","select_more()","select_order_map()","separate_query_per_table?()","serial_primary_key_options()","server()","server?()","servers()","servers()","servers()","servers()","set()","set_column_allow_null()","set_column_default()","set_column_default()","set_column_not_null()","set_column_type()","set_column_type()","set_dataset()","set_fields()","set_graph_aliases()","set_prepared_statement()","set_primary_key()","set_reciprocal_to_self?()","set_reciprocal_to_self?()","set_reciprocal_to_self?()","set_server()","set_shared_adapter_scheme()","setter_method()","setter_methods()","sharded?()","simple_select_all?()","single_record()","single_record!()","single_threaded?()","single_value()","single_value!()","single_value_ds()","singleton_method_added()","singular()","size()","size()","size()","size()","skip_limit_check()","skip_locked()","skip_validation_on_next_save!()","slice_range()","spatial_index()","split_alias()","split_qualifiers()","split_symbol()","split_symbol()","split_symbols=()","split_symbols=()","split_symbols?()","split_symbols?()","sql()","sql()","sql_boolean()","sql_boolean()","sql_boolean()","sql_literal_append()","sql_number()","sql_number()","sql_number()","sql_string()","sql_string()","sql_string()","sql_subscript()","start_timer()","start_timer()","string_to_date()","string_to_date()","string_to_datetime()","string_to_datetime()","string_to_time()","string_to_time()","subscript()","subscript_sql_append()","subset()","sum()","supports_create_table_if_not_exists?()","supports_cte?()","supports_cte_in_subqueries?()","supports_deferrable_constraints?()","supports_deferrable_foreign_key_constraints?()","supports_deleting_joins?()","supports_derived_column_lists?()","supports_distinct_on?()","supports_drop_table_if_exists?()","supports_foreign_key_parsing?()","supports_group_cube?()","supports_group_rollup?()","supports_grouping_sets?()","supports_index_parsing?()","supports_insert_select?()","supports_intersect_except?()","supports_intersect_except_all?()","supports_is_true?()","supports_join_using?()","supports_lateral_subqueries?()","supports_limits_in_correlated_subqueries?()","supports_modifying_joins?()","supports_multiple_column_in?()","supports_nowait?()","supports_offsets_in_correlated_subqueries?()","supports_ordered_distinct_on?()","supports_partial_indexes?()","supports_prepared_transactions?()","supports_regexp?()","supports_replace?()","supports_returning?()","supports_savepoints?()","supports_savepoints_in_prepared_transactions?()","supports_schema_parsing?()","supports_select_all_and_column?()","supports_skip_locked?()","supports_table_listing?()","supports_timestamp_timezones?()","supports_timestamp_usecs?()","supports_transaction_isolation_levels?()","supports_transactional_ddl?()","supports_updating_joins?()","supports_view_listing?()","supports_views_with_check_option?()","supports_views_with_local_check_option?()","supports_where_true?()","supports_window_clause?()","supports_window_function_frame_option?()","supports_window_functions?()","synchronize()","synchronize()","synchronize()","synchronize_with()","synchronize_with()","table()","table_alias()","table_exists?()","table_name()","test_connection()","this()","timezone()","to_application_timestamp()","to_hash()","to_hash()","to_hash_groups()","to_hash_groups()","to_prepared_statement()","to_s()","to_sequel_blob()","to_sequel_blob()","transaction()","transaction()","transaction()","transaction()","transform()","transform()","trim()","truncate()","truncate_sql()","typecast_to_application_timestamp()","typecast_to_application_timestamp()","typecast_value()","uncountable()","unfiltered()","ungraphed()","ungraphed()","ungrouped()","union()","unique()","unlimited()","unordered()","unqualified_column_for()","unquoted()","unrestrict_primary_key()","unused_table_alias()","up()","up()","update()","update()","update_fields()","update_sql()","uri()","url()","use()","use_transactions()","valid?()","valid_connection?()","validate()","value_list()","version()","virtual_row()","virtual_row()","where()","where_all()","where_each()","where_single_value()","window()","window_sql_append()","with()","with_dataset()","with_extend()","with_merged_expression()","with_ordinality()","with_parens()","with_pk()","with_pk()","with_pk!()","with_pk!()","with_quote_identifiers()","with_recursive()","with_row_proc()","with_sql()","with_sql_all()","with_sql_delete()","with_sql_each()","with_sql_first()","with_sql_insert()","with_sql_single_value()","with_sql_update()","within_group()","|()","|()","~()","~()","~()","changelog","mit-license","readme","changelog.old","advanced_associations","association_basics","bin_sequel","cheat_sheet","code_order","core_extensions","dataset_basics","dataset_filtering","extensions","fork_safety","mass_assignment","migration","model_dataset_method_design","model_hooks","model_plugins","mssql_stored_procedures","object_model","opening_databases","postgresql","prepared_statements","querying","reflection","1.0","1.1","1.3","1.4.0","1.5.0","2.0.0","2.1.0","2.10.0","2.11.0","2.12.0","2.2.0","2.3.0","2.4.0","2.5.0","2.6.0","2.7.0","2.8.0","2.9.0","3.0.0","3.1.0","3.10.0","3.11.0","3.12.0","3.13.0","3.14.0","3.15.0","3.16.0","3.17.0","3.18.0","3.19.0","3.2.0","3.20.0","3.21.0","3.22.0","3.23.0","3.24.0","3.25.0","3.26.0","3.27.0","3.28.0","3.29.0","3.3.0","3.30.0","3.31.0","3.32.0","3.33.0","3.34.0","3.35.0","3.36.0","3.37.0","3.38.0","3.39.0","3.4.0","3.40.0","3.41.0","3.42.0","3.43.0","3.44.0","3.45.0","3.46.0","3.47.0","3.48.0","3.5.0","3.6.0","3.7.0","3.8.0","3.9.0","4.0.0","4.1.0","4.10.0","4.11.0","4.12.0","4.13.0","4.14.0","4.15.0","4.16.0","4.17.0","4.18.0","4.19.0","4.2.0","4.20.0","4.21.0","4.22.0","4.23.0","4.24.0","4.25.0","4.26.0","4.27.0","4.28.0","4.29.0","4.3.0","4.30.0","4.31.0","4.32.0","4.33.0","4.34.0","4.35.0","4.36.0","4.37.0","4.38.0","4.39.0","4.4.0","4.40.0","4.41.0","4.42.0","4.43.0","4.44.0","4.45.0","4.46.0","4.47.0","4.48.0","4.49.0","4.5.0","4.6.0","4.7.0","4.8.0","4.9.0","5.0.0","5.1.0","5.10.0","5.11.0","5.12.0","5.13.0","5.14.0","5.15.0","5.16.0","5.17.0","5.18.0","5.19.0","5.2.0","5.20.0","5.21.0","5.22.0","5.23.0","5.24.0","5.25.0","5.26.0","5.27.0","5.28.0","5.29.0","5.3.0","5.30.0","5.31.0","5.32.0","5.33.0","5.34.0","5.35.0","5.36.0","5.37.0","5.38.0","5.39.0","5.4.0","5.40.0","5.41.0","5.42.0","5.43.0","5.44.0","5.45.0","5.46.0","5.47.0","5.48.0","5.49.0","5.5.0","5.50.0","5.51.0","5.52.0","5.53.0","5.54.0","5.55.0","5.6.0","5.7.0","5.8.0","5.9.0","schema_modification","security","sharding","sql","testing","thread_safety","transactions","validations","virtual_rows"],"longSearchIndex":["sequel","sequel::asttransformer","sequel::basicobject","sequel::connectionpool","sequel::connectionpool::classmethods","sequel::database","sequel::dataset","sequel::dataset::argumentmapper","sequel::dataset::datasetmodule","sequel::dataset::emulatepreparedstatementmethods","sequel::dataset::placeholderliteralizer","sequel::dataset::placeholderliteralizer::argument","sequel::dataset::placeholderliteralizer::recorder","sequel::dataset::preparedstatementmethods","sequel::dataset::unnumberedargumentmapper","sequel::deprecation","sequel::error","sequel::hookfailed","sequel::inflections","sequel::integermigrator","sequel::literalstring","sequel::migration","sequel::migrationaltertablereverser","sequel::migrationdsl","sequel::migrationreverser","sequel::migrator","sequel::migrator::error","sequel::migrator::notcurrenterror","sequel::model","sequel::model::associations","sequel::model::associations::associationdatasetmethods","sequel::model::associations::associationreflection","sequel::model::associations::classmethods","sequel::model::associations::datasetmethods","sequel::model::associations::datasetmodule","sequel::model::associations::eagergraphloader","sequel::model::associations::instancemethods","sequel::model::associations::manytomanyassociationreflection","sequel::model::associations::manytooneassociationreflection","sequel::model::associations::onethroughoneassociationreflection","sequel::model::associations::onetomanyassociationreflection","sequel::model::associations::onetooneassociationreflection","sequel::model::associations::singularassociationreflection","sequel::model::classmethods","sequel::model::datasetmethods","sequel::model::datasetmodule","sequel::model::errors","sequel::model::instancemethods","sequel::nomatchingrow","sequel::plugins","sequel::qualifier","sequel::sql","sequel::sql::aliasmethods","sequel::sql::aliasedexpression","sequel::sql::bitwisemethods","sequel::sql::blob","sequel::sql::booleanconstant","sequel::sql::booleanexpression","sequel::sql::booleanmethods","sequel::sql::builders","sequel::sql::caseexpression","sequel::sql::cast","sequel::sql::castmethods","sequel::sql::columnall","sequel::sql::complexexpression","sequel::sql::complexexpressionmethods","sequel::sql::constant","sequel::sql::constants","sequel::sql::delayedevaluation","sequel::sql::expression","sequel::sql::function","sequel::sql::genericexpression","sequel::sql::identifier","sequel::sql::inequalitymethods","sequel::sql::joinclause","sequel::sql::joinonclause","sequel::sql::joinusingclause","sequel::sql::negativebooleanconstant","sequel::sql::numericexpression","sequel::sql::numericmethods","sequel::sql::operatorbuilders","sequel::sql::ordermethods","sequel::sql::orderedexpression","sequel::sql::patternmatchmethods","sequel::sql::placeholderliteralstring","sequel::sql::qualifiedidentifier","sequel::sql::qualifyingmethods","sequel::sql::stringconcatenationmethods","sequel::sql::stringexpression","sequel::sql::stringmethods","sequel::sql::subscript","sequel::sql::subscriptmethods","sequel::sql::valuelist","sequel::sql::virtualrow","sequel::sql::window","sequel::sql::wrapper","sequel::sqltime","sequel::schema","sequel::schema::altertablegenerator","sequel::schema::createtablegenerator","sequel::sequelmethods","sequel::shardedsingleconnectionpool","sequel::shardedthreadedconnectionpool","sequel::simplemigration","sequel::singleconnectionpool","sequel::threadedconnectionpool","sequel::timestampmigrator","sequel::timezones","sequel::validationfailed","sequel::sql::patternmatchmethods#!~()","sequel::sql::booleanexpression#&()","sequel::sql::function#*()","sequel::sql::qualifyingmethods#*()","sequel::sql::operatorbuilders#**()","sequel::sql::numericexpression#+()","sequel::sql::numericmethods#+()","sequel::sql::stringconcatenationmethods#+()","sequel::database#<<()","sequel::dataset#<<()","sequel::dataset#==()","sequel::model::instancemethods#==()","sequel::sql::expression#==()","sequel::model::instancemethods#===()","sequel::sql::patternmatchmethods#=~()","sequel::schema::createtablegenerator#bignum()","sequel::schema::createtablegenerator#fixnum()","sequel::model::classmethods#model()","sequel::database#[]()","sequel::dataset#[]()","sequel::model::classmethods#[]()","sequel::model::datasetmethods#[]()","sequel::model::instancemethods#[]()","sequel::sql::qualifyingmethods#[]()","sequel::sql::subscript#[]()","sequel::model::instancemethods#[]=()","sequel::model::associations::associationreflection#_add_method()","sequel::dataset#_clone()","sequel::dataset#_columns()","sequel::dataset#_import()","sequel::model::associations::associationreflection#_remove_all_method()","sequel::model::associations::associationreflection#_remove_method()","sequel::dataset#_select_map_multiple()","sequel::dataset#_select_map_single()","sequel::model::associations::associationreflection#_setter_method()","sequel::database::adapter_class()","sequel::database#adapter_scheme()","sequel::database::adapter_scheme()","sequel::model::errors#add()","sequel::database#add_column()","sequel::schema::altertablegenerator#add_column()","sequel::schema::altertablegenerator#add_constraint()","sequel::schema::altertablegenerator#add_foreign_key()","sequel::schema::altertablegenerator#add_full_text_index()","sequel::dataset#add_graph_aliases()","sequel::database#add_index()","sequel::schema::altertablegenerator#add_index()","sequel::model::associations::associationreflection#add_method()","sequel::schema::altertablegenerator#add_primary_key()","sequel::database#add_servers()","sequel::shardedsingleconnectionpool#add_servers()","sequel::shardedthreadedconnectionpool#add_servers()","sequel::schema::altertablegenerator#add_spatial_index()","sequel::schema::createtablegenerator::add_type_method()","sequel::schema::altertablegenerator#add_unique_constraint()","sequel::database#after_commit()","sequel::database::after_initialize()","sequel::database#after_rollback()","sequel::plugins::after_set_dataset()","sequel::dataset#aliased_expression_sql_append()","sequel::dataset#all()","sequel::dataset::placeholderliteralizer#all()","sequel::model::associations::classmethods#all_association_reflections()","sequel::shardedsingleconnectionpool#all_connections()","sequel::shardedthreadedconnectionpool#all_connections()","sequel::singleconnectionpool#all_connections()","sequel::threadedconnectionpool#all_connections()","sequel::shardedthreadedconnectionpool#allocated()","sequel::database#alter_table()","sequel::database#alter_table_generator()","sequel::sequelmethods#application_to_database_timestamp()","sequel::sequelmethods#application_to_database_timestamp()","sequel::migration::apply()","sequel::migrator::apply()","sequel::model::associations::apply()","sequel::simplemigration#apply()","sequel::model::associations::associationreflection#apply_dataset_changes()","sequel::model::associations::associationreflection#apply_distinct_on_eager_limit_strategy()","sequel::model::associations::associationreflection#apply_eager_dataset_changes()","sequel::model::associations::associationreflection#apply_eager_graph_limit_strategy()","sequel::model::associations::onetomanyassociationreflection#apply_eager_graph_limit_strategy()","sequel::model::associations::associationreflection#apply_eager_limit_strategy()","sequel::model::associations::associationreflection#apply_ruby_eager_limit_strategy()","sequel::model::associations::associationreflection#apply_window_function_eager_limit_strategy()","sequel::dataset::placeholderliteralizer::recorder#arg()","sequel::dataset#array_sql_append()","sequel::sql::aliasmethods#as()","sequel::sql::builders#as()","sequel::dataset#as_hash()","sequel::model::associations::datasetmethods#as_hash()","sequel::model::datasetmethods#as_hash()","sequel::sql::builders#asc()","sequel::sql::ordermethods#asc()","sequel::sql::orderedexpression#asc()","sequel::model::associations::associationreflection#assign_singular?()","sequel::model::associations::singularassociationreflection#assign_singular?()","sequel::model::associations::classmethods#associate()","sequel::model::associations::associationreflection#associated_class()","sequel::model::associations::associationreflection#associated_dataset()","sequel::model::associations::manytomanyassociationreflection#associated_key_alias()","sequel::model::associations::manytomanyassociationreflection#associated_key_array()","sequel::model::associations::manytomanyassociationreflection#associated_key_column()","sequel::model::associations::manytomanyassociationreflection#associated_key_table()","sequel::model::associations::manytomanyassociationreflection#associated_object_keys()","sequel::model::associations::manytooneassociationreflection#associated_object_keys()","sequel::model::associations::onetomanyassociationreflection#associated_object_keys()","sequel::model::associations::associationreflection#association_dataset_for()","sequel::model::associations::associationreflection#association_dataset_proc()","sequel::model::associations::datasetmethods#association_join()","sequel::model::associations::associationreflection#association_method()","sequel::model::associations::associationdatasetmethods#association_reflection()","sequel::model::associations::classmethods#association_reflection()","sequel::model::associations::classmethods#associations()","sequel::model::associations::instancemethods#associations()","sequel::sql::expression::attr_reader()","sequel::model::instancemethods#autoincrementing_primary_key()","sequel::shardedthreadedconnectionpool#available_connections()","sequel::dataset#avg()","sequel::dataset#bind()","sequel::dataset::argumentmapper#bind_arguments()","sequel::sql::builders#blob()","sequel::dataset#boolean_constant_sql_append()","sequel::dataset#cache_get()","sequel::dataset#cache_set()","sequel::database#call()","sequel::dataset#call()","sequel::dataset::argumentmapper#call()","sequel::dataset::preparedstatementmethods#call()","sequel::model::classmethods#call()","sequel::sql::delayedevaluation#call()","sequel::model::associations::associationreflection#can_have_associated_objects?()","sequel::model::associations::manytomanyassociationreflection#can_have_associated_objects?()","sequel::model::associations::manytooneassociationreflection#can_have_associated_objects?()","sequel::model::associations::onetomanyassociationreflection#can_have_associated_objects?()","sequel::model::instancemethods#cancel_action()","sequel::sql::builders#case()","sequel::dataset#case_expression_sql_append()","sequel::sql::builders#cast()","sequel::sql::castmethods#cast()","sequel::sql::builders#cast_numeric()","sequel::sql::castmethods#cast_numeric()","sequel::dataset#cast_sql_append()","sequel::sql::builders#cast_string()","sequel::sql::castmethods#cast_string()","sequel::database#cast_type_literal()","sequel::error#cause()","sequel::migrationdsl#change()","sequel::model::instancemethods#changed_columns()","sequel::sql::builders#char_length()","sequel::schema::createtablegenerator#check()","sequel::migrator::check_current()","sequel::dataset::clause_methods()","sequel::inflections::clear()","sequel::dataset#clear_columns_cache()","sequel::model::classmethods#clear_setter_methods_cache()","sequel::dataset#clone()","sequel::sql::expression#clone()","sequel::model::associations::associationreflection#cloneable?()","sequel::model::associations::manytomanyassociationreflection#cloneable?()","sequel::model::associations::onetomanyassociationreflection#cloneable?()","sequel::sql::numericmethods#coerce()","sequel::schema::createtablegenerator#column()","sequel::sql::joinclause#column_aliases()","sequel::dataset#column_all_sql_append()","sequel::dataset#columns()","sequel::dataset::preparedstatementmethods#columns()","sequel::model::classmethods#columns()","sequel::dataset#columns!()","sequel::dataset#complex_expression_sql_append()","sequel::model::associations::datasetmethods#complex_expression_sql_append()","sequel::dataset#compound_clone()","sequel::dataset#compound_from_self()","sequel::sequelmethods#condition_specifier?()","sequel::sequelmethods#condition_specifier?()","sequel::shardedsingleconnectionpool#conn()","sequel::database::connect()","sequel::sequelmethods#connect()","sequel::sequelmethods#connect()","sequel::basicobject::const_missing()","sequel::dataset#constant_sql_append()","sequel::schema::createtablegenerator#constraint()","sequel::sequelmethods#convert_exception_class()","sequel::sequelmethods#convert_exception_class()","sequel::sequelmethods#convert_output_timestamp()","sequel::sequelmethods#convert_output_timestamp()","sequel::sequelmethods#convert_timestamp()","sequel::sequelmethods#convert_timestamp()","sequel::sequelmethods#core_extensions?()","sequel::sequelmethods#core_extensions?()","sequel::dataset#count()","sequel::model::errors#count()","sequel::migrationdsl::create()","sequel::model::classmethods#create()","sequel::sqltime::create()","sequel::database#create_join_table()","sequel::database#create_join_table!()","sequel::database#create_join_table?()","sequel::database#create_or_replace_view()","sequel::database#create_table()","sequel::database#create_table!()","sequel::database#create_table?()","sequel::database#create_table_generator()","sequel::database#create_view()","sequel::sequelmethods#current()","sequel::sequelmethods#current()","sequel::dataset#current_datetime()","sequel::sequelmethods#database_to_application_timestamp()","sequel::sequelmethods#database_to_application_timestamp()","sequel::database#database_type()","sequel::database#dataset()","sequel::model::classmethods#dataset()","sequel::model::classmethods#dataset=()","sequel::database#dataset_class=()","sequel::model::associations::associationreflection#dataset_method()","sequel::model::classmethods#dataset_module()","sequel::model::associations::associationreflection#dataset_need_primary_key?()","sequel::model::associations::manytooneassociationreflection#dataset_need_primary_key?()","sequel::sqltime::date()","sequel::model::classmethods#db()","sequel::model::classmethods#db=()","sequel::model::classmethods#db_schema()","sequel::sql::builders#deep_qualify()","sequel::model::classmethods#def_model()","sequel::model::classmethods#def_column_alias()","sequel::dataset::datasetmodule::def_dataset_caching_method()","sequel::plugins::def_dataset_methods()","sequel::plugins::def_sequel_method()","sequel::dataset::def_sql_method()","sequel::model::associations::manytomanyassociationreflection#default_associated_key_alias()","sequel::model::associations::manytomanyassociationreflection#default_eager_loader()","sequel::model::associations::manytomanyassociationreflection#default_join_table()","sequel::model::associations::manytooneassociationreflection#default_key()","sequel::model::associations::onetomanyassociationreflection#default_key()","sequel::model::associations::manytomanyassociationreflection#default_left_key()","sequel::model::associations::manytomanyassociationreflection#default_right_key()","sequel::model::associations::onethroughoneassociationreflection#default_right_key()","sequel::sequelmethods#default_timezone=()","sequel::sequelmethods#default_timezone=()","sequel::sql::builders#delay()","sequel::dataset#delayed_evaluation_sql_append()","sequel::dataset::preparedstatementmethods#delayed_evaluation_sql_append()","sequel::dataset#delete()","sequel::model::instancemethods#delete()","sequel::model::associations::associationreflection#delete_row_number_column()","sequel::deprecation::deprecate()","sequel::deprecation::deprecate_constant()","sequel::sql::builders#desc()","sequel::sql::ordermethods#desc()","sequel::sql::orderedexpression#desc()","sequel::migration::descendants()","sequel::model::datasetmethods#destroy()","sequel::model::instancemethods#destroy()","sequel::database#disconnect()","sequel::shardedsingleconnectionpool#disconnect()","sequel::shardedthreadedconnectionpool#disconnect()","sequel::singleconnectionpool#disconnect()","sequel::threadedconnectionpool#disconnect()","sequel::database#disconnect_connection()","sequel::dataset#distinct()","sequel::sql::function#distinct()","sequel::migration#down()","sequel::migrationdsl#down()","sequel::database#drop_column()","sequel::schema::altertablegenerator#drop_column()","sequel::schema::altertablegenerator#drop_constraint()","sequel::schema::altertablegenerator#drop_foreign_key()","sequel::database#drop_index()","sequel::schema::altertablegenerator#drop_index()","sequel::database#drop_join_table()","sequel::database#drop_table()","sequel::database#drop_table?()","sequel::database#drop_view()","sequel::dataset#dup()","sequel::sql::expression#dup()","sequel::dataset#each()","sequel::dataset::placeholderliteralizer#each()","sequel::model::instancemethods#each()","sequel::dataset#each_server()","sequel::model::associations::datasetmethods#eager()","sequel::model::associations::datasetmethods#eager_graph()","sequel::model::associations::datasetmethods#eager_graph_association()","sequel::model::associations::datasetmethods#eager_graph_associations()","sequel::model::associations::datasetmethods#eager_graph_build_associations()","sequel::model::associations::associationreflection#eager_graph_lazy_dataset?()","sequel::model::associations::manytooneassociationreflection#eager_graph_lazy_dataset?()","sequel::model::associations::associationreflection#eager_graph_limit_strategy()","sequel::model::associations::manytooneassociationreflection#eager_graph_limit_strategy()","sequel::model::associations::datasetmethods#eager_graph_with_options()","sequel::model::associations::associationreflection#eager_limit_strategy()","sequel::model::associations::manytooneassociationreflection#eager_limit_strategy()","sequel::model::associations::associationreflection#eager_load_results()","sequel::model::associations::classmethods#eager_load_results()","sequel::model::associations::associationreflection#eager_loader_key()","sequel::model::associations::associationreflection#eager_loading_use_associated_key?()","sequel::model::associations::manytomanyassociationreflection#eager_loading_use_associated_key?()","sequel::sequelmethods#elapsed_seconds_since()","sequel::sequelmethods#elapsed_seconds_since()","sequel::dataset#empty?()","sequel::model::errors#empty?()","sequel::dataset#eql?()","sequel::model::instancemethods#eql?()","sequel::sql::expression#eql?()","sequel::model::instancemethods#errors()","sequel::dataset#escape_like()","sequel::dataset#except()","sequel::dataset#exclude()","sequel::dataset#exclude_having()","sequel::database#execute_ddl()","sequel::database#execute_dui()","sequel::database#execute_insert()","sequel::dataset#exists()","sequel::model::instancemethods#exists?()","sequel::sql::builders#expr()","sequel::sql::caseexpression#expression?()","sequel::model::instancemethods#extend()","sequel::database#extend_datasets()","sequel::database::extension()","sequel::database#extension()","sequel::dataset#extension()","sequel::sequelmethods#extension()","sequel::sequelmethods#extension()","sequel::sql::builders#extract()","sequel::sql::complexexpressionmethods#extract()","sequel::database#fetch()","sequel::dataset#filter()","sequel::sql::function#filter()","sequel::model::associations::associationreflection#filter_by_associations_add_conditions?()","sequel::model::associations::singularassociationreflection#filter_by_associations_add_conditions?()","sequel::model::associations::associationreflection#filter_by_associations_conditions_expression()","sequel::model::associations::manytooneassociationreflection#filter_by_associations_limit_strategy()","sequel::model::associations::associationreflection#finalize()","sequel::model::associations::classmethods#finalize_associations()","sequel::model::associations::associationreflection#finalize_settings()","sequel::model::associations::manytomanyassociationreflection#finalize_settings()","sequel::model::associations::manytooneassociationreflection#finalize_settings()","sequel::model::associations::onetomanyassociationreflection#finalize_settings()","sequel::model::classmethods#find()","sequel::model::classmethods#find_or_create()","sequel::dataset#first()","sequel::dataset::placeholderliteralizer#first()","sequel::dataset#first!()","sequel::dataset#first_source()","sequel::dataset#first_source_alias()","sequel::dataset#first_source_table()","sequel::dataset#for_update()","sequel::schema::createtablegenerator#foreign_key()","sequel::database#freeze()","sequel::dataset#freeze()","sequel::dataset::placeholderliteralizer#freeze()","sequel::model::associations::classmethods#freeze()","sequel::model::associations::instancemethods#freeze()","sequel::model::classmethods#freeze()","sequel::model::instancemethods#freeze()","sequel::shardedsingleconnectionpool#freeze()","sequel::shardedthreadedconnectionpool#freeze()","sequel::database#from()","sequel::dataset#from()","sequel::database#from_application_timestamp()","sequel::dataset#from_self()","sequel::sql::booleanexpression::from_value_pairs()","sequel::model::errors#full_messages()","sequel::schema::createtablegenerator#full_text_index()","sequel::sql::builders#function()","sequel::sql::identifier#function()","sequel::sql::qualifiedidentifier#function()","sequel::dataset#function_sql_append()","sequel::database#get()","sequel::dataset#get()","sequel::dataset::placeholderliteralizer#get()","sequel::connectionpool::classmethods#get_pool()","sequel::database#global_index_namespace?()","sequel::dataset#graph()","sequel::dataset#grep()","sequel::dataset#group()","sequel::dataset#group_and_count()","sequel::dataset#group_append()","sequel::dataset#group_by()","sequel::dataset#group_cube()","sequel::dataset#group_rollup()","sequel::dataset#grouping_sets()","sequel::model::associations::associationreflection#handle_silent_modification_failure?()","sequel::model::associations::onetomanyassociationreflection#handle_silent_modification_failure?()","sequel::schema::createtablegenerator#has_column?()","sequel::model::classmethods#has_dataset?()","sequel::dataset#hash()","sequel::model::instancemethods#hash()","sequel::sql::expression#hash()","sequel::dataset#having()","sequel::shardedsingleconnectionpool#hold()","sequel::shardedthreadedconnectionpool#hold()","sequel::singleconnectionpool#hold()","sequel::threadedconnectionpool#hold()","sequel::model::instancemethods#id()","sequel::sql::builders#identifier()","sequel::sql::builders#ilike()","sequel::sql::stringmethods#ilike()","sequel::model::classmethods#implicit_table_name()","sequel::dataset#import()","sequel::database#in_transaction?()","sequel::model::classmethods#include()","sequel::schema::createtablegenerator#index()","sequel::inflections()","sequel::migration::inherited()","sequel::sql::expression::inherited()","sequel::plugins::inherited_instance_variables()","sequel::model::associations::associationreflection#initialize_association_cache()","sequel::dataset#insert()","sequel::dataset#insert_sql()","sequel::database#inspect()","sequel::dataset#inspect()","sequel::dataset::preparedstatementmethods#inspect()","sequel::literalstring#inspect()","sequel::model::associations::associationreflection#inspect()","sequel::model::instancemethods#inspect()","sequel::sql::blob#inspect()","sequel::sql::expression#inspect()","sequel::sql::valuelist#inspect()","sequel::sqltime#inspect()","sequel::dataset#intersect()","sequel::dataset#invert()","sequel::sql::booleanexpression::invert()","sequel::sql::orderedexpression#invert()","sequel::inflections::irregular()","sequel::integermigrator#is_current?()","sequel::migrator::is_current?()","sequel::timestampmigrator#is_current?()","sequel::dataset#join()","sequel::sql::builders#join()","sequel::dataset#join_clause_sql_append()","sequel::dataset#join_on_clause_sql_append()","sequel::dataset#join_table()","sequel::model::associations::manytomanyassociationreflection#join_table_alias()","sequel::model::associations::manytomanyassociationreflection#join_table_source()","sequel::dataset#join_using_clause_sql_append()","sequel::dataset#joined_dataset?()","sequel::sequelmethods#json_parser_error_class()","sequel::sequelmethods#json_parser_error_class()","sequel::model::instancemethods#keys()","sequel::dataset#last()","sequel::model::datasetmethods#last()","sequel::dataset#lateral()","sequel::sql::function#lateral()","sequel::sql::builders#like()","sequel::sql::stringexpression::like()","sequel::sql::stringmethods#like()","sequel::dataset#limit()","sequel::model::associations::associationreflection#limit_and_offset()","sequel::model::associations::singularassociationreflection#limit_and_offset()","sequel::literalstring#lit()","sequel::sql::blob#lit()","sequel::sql::builders#lit()","sequel::database#literal()","sequel::dataset#literal_append()","sequel::database#literal_symbol()","sequel::dataset::preparedstatementmethods#literal_symbol_append()","sequel::database#literal_symbol_set()","sequel::model::associations::eagergraphloader#load()","sequel::model::classmethods#load()","sequel::database::load_adapter()","sequel::dataset::placeholderliteralizer::loader()","sequel::dataset::placeholderliteralizer::recorder#loader()","sequel::model::instancemethods#lock!()","sequel::dataset#lock_style()","sequel::database#log_connection_yield()","sequel::database#log_exception()","sequel::database#log_info()","sequel::dataset::preparedstatementmethods#log_sql()","sequel::database#logger=()","sequel::model::associations::classmethods#many_to_many()","sequel::model::associations::classmethods#many_to_one()","sequel::dataset#map()","sequel::dataset::unnumberedargumentmapper#map_to_prepared_args()","sequel::model::instancemethods#marshallable!()","sequel::dataset#max()","sequel::shardedsingleconnectionpool#max_size()","sequel::singleconnectionpool#max_size()","sequel::migration#method_missing()","sequel::sql::virtualrow#method_missing()","sequel::schema::createtablegenerator#method_missing()","sequel::migration()","sequel::migrator::migrator_class()","sequel::dataset#min()","sequel::model::datasetmethods#model()","sequel::model::associations::associationdatasetmethods#model_object()","sequel::model::instancemethods#modified!()","sequel::model::instancemethods#modified?()","sequel::dataset#multi_insert()","sequel::dataset#multi_insert_sql()","sequel::dataset#naked()","sequel::model::associations::associationreflection#need_associated_primary_key?()","sequel::model::associations::manytomanyassociationreflection#need_associated_primary_key?()","sequel::sql::builders#negate()","sequel::dataset#negative_boolean_constant_sql_append()","sequel::connectionpool::new()","sequel::database::new()","sequel::dataset::new()","sequel::dataset::placeholderliteralizer::new()","sequel::dataset::placeholderliteralizer::argument::new()","sequel::hookfailed::new()","sequel::integermigrator::new()","sequel::migration::new()","sequel::migrationaltertablereverser::new()","sequel::migrationdsl::new()","sequel::migrationreverser::new()","sequel::migrator::new()","sequel::model::associations::eagergraphloader::new()","sequel::model::datasetmodule::new()","sequel::model::instancemethods::new()","sequel::nomatchingrow::new()","sequel::qualifier::new()","sequel::sql::aliasedexpression::new()","sequel::sql::caseexpression::new()","sequel::sql::cast::new()","sequel::sql::columnall::new()","sequel::sql::complexexpression::new()","sequel::sql::constant::new()","sequel::sql::delayedevaluation::new()","sequel::sql::function::new()","sequel::sql::identifier::new()","sequel::sql::joinclause::new()","sequel::sql::joinonclause::new()","sequel::sql::joinusingclause::new()","sequel::sql::orderedexpression::new()","sequel::sql::placeholderliteralstring::new()","sequel::sql::qualifiedidentifier::new()","sequel::sql::subscript::new()","sequel::sql::virtualrow::new()","sequel::sql::window::new()","sequel::sql::wrapper::new()","sequel::schema::altertablegenerator::new()","sequel::schema::createtablegenerator::new()","sequel::shardedsingleconnectionpool::new()","sequel::shardedthreadedconnectionpool::new()","sequel::simplemigration::new()","sequel::singleconnectionpool::new()","sequel::threadedconnectionpool::new()","sequel::timestampmigrator::new()","sequel::validationfailed::new()","sequel::model::instancemethods#new?()","sequel::model::classmethods#no_primary_key()","sequel::migrationdsl#no_transaction()","sequel::dataset#nowait()","sequel::sequelmethods#object_to_json()","sequel::sequelmethods#object_to_json()","sequel::dataset#offset()","sequel::model::errors#on()","sequel::model::associations::classmethods#one_through_one()","sequel::model::associations::classmethods#one_to_many()","sequel::model::associations::classmethods#one_to_one()","sequel::dataset#options_overlap()","sequel::dataset#or()","sequel::sql::builders#or()","sequel::dataset#order()","sequel::sql::function#order()","sequel::dataset#order_append()","sequel::dataset#order_by()","sequel::dataset#order_more()","sequel::dataset#order_prepend()","sequel::dataset#ordered_expression_sql_append()","sequel::dataset::preparedstatementmethods#orig_dataset()","sequel::sequelmethods#orig_require()","sequel::sequelmethods#orig_require()","sequel::sql::function#over()","sequel::dataset#paged_each()","sequel::model::datasetmethods#paged_each()","sequel::sqltime::parse()","sequel::sequelmethods#parse_json()","sequel::sequelmethods#parse_json()","sequel::model::instancemethods#pk()","sequel::model::instancemethods#pk_equal?()","sequel::model::instancemethods#pk_hash()","sequel::dataset#placeholder_literal_string_sql_append()","sequel::model::associations::associationreflection#placeholder_loader()","sequel::model::classmethods#plugin()","sequel::inflections::plural()","sequel::shardedsingleconnectionpool#pool_type()","sequel::shardedthreadedconnectionpool#pool_type()","sequel::singleconnectionpool#pool_type()","sequel::threadedconnectionpool#pool_type()","sequel::model::associations::manytomanyassociationreflection#predicate_key()","sequel::model::associations::manytooneassociationreflection#predicate_key()","sequel::model::associations::onetomanyassociationreflection#predicate_key()","sequel::model::associations::associationreflection#predicate_key_values()","sequel::model::associations::associationreflection#predicate_keys()","sequel::dataset#prepare()","sequel::dataset::preparedstatementmethods#prepare()","sequel::dataset::preparedstatementmethods#prepared_args()","sequel::dataset::preparedstatementmethods#prepared_modify_values()","sequel::dataset::argumentmapper#prepared_sql()","sequel::dataset::preparedstatementmethods#prepared_sql()","sequel::database#prepared_statement()","sequel::dataset::argumentmapper#prepared_statement_name()","sequel::dataset::preparedstatementmethods#prepared_type()","sequel::model::associations::manytooneassociationreflection#primary_key()","sequel::model::associations::onetomanyassociationreflection#primary_key()","sequel::schema::createtablegenerator#primary_key()","sequel::model::classmethods#primary_key_hash()","sequel::model::associations::manytooneassociationreflection#primary_key_method()","sequel::model::associations::manytooneassociationreflection#primary_key_methods()","sequel::schema::createtablegenerator#primary_key_name()","sequel::model::associations::manytooneassociationreflection#primary_keys()","sequel::dataset#provides_accurate_rows_matched?()","sequel::dataset#qualified_identifier_sql_append()","sequel::model::associations::onetomanyassociationreflection#qualified_key()","sequel::model::associations::manytomanyassociationreflection#qualified_left_key()","sequel::model::instancemethods#qualified_pk_hash()","sequel::model::associations::manytooneassociationreflection#qualified_primary_key()","sequel::model::associations::onetomanyassociationreflection#qualified_primary_key()","sequel::model::classmethods#qualified_primary_key_hash()","sequel::model::associations::manytomanyassociationreflection#qualified_right_key()","sequel::model::associations::manytomanyassociationreflection#qualified_right_primary_key()","sequel::dataset#qualify()","sequel::model::associations::associationreflection#qualify()","sequel::sql::builders#qualify()","sequel::sql::qualifyingmethods#qualify()","sequel::model::associations::associationreflection#qualify_assoc()","sequel::model::associations::associationreflection#qualify_cur()","sequel::database#quote_identifier()","sequel::dataset#quote_identifier_append()","sequel::dataset#quote_identifiers?()","sequel::dataset#quote_schema_table_append()","sequel::sql::function#quoted()","sequel::dataset#quoted_identifier_append()","sequel::model::associations::associationreflection#reciprocal()","sequel::model::associations::onethroughoneassociationreflection#reciprocal()","sequel::model::associations::associationreflection#reciprocal_array?()","sequel::model::associations::manytooneassociationreflection#reciprocal_array?()","sequel::model::associations::onetomanyassociationreflection#reciprocal_array?()","sequel::dataset#recursive_cte_requires_column_aliases?()","sequel::sequelmethods#recursive_map()","sequel::sequelmethods#recursive_map()","sequel::model::instancemethods#refresh()","sequel::database::register_extension()","sequel::dataset::register_extension()","sequel::model::instancemethods#reload()","sequel::model::associations::associationreflection#remove_all_method()","sequel::model::associations::associationreflection#remove_before_destroy?()","sequel::model::associations::onetomanyassociationreflection#remove_before_destroy?()","sequel::model::associations::associationreflection#remove_method()","sequel::database#remove_servers()","sequel::shardedsingleconnectionpool#remove_servers()","sequel::shardedthreadedconnectionpool#remove_servers()","sequel::model::associations::associationreflection#remove_should_check_existing?()","sequel::model::associations::onetomanyassociationreflection#remove_should_check_existing?()","sequel::database#rename_column()","sequel::schema::altertablegenerator#rename_column()","sequel::database#rename_table()","sequel::sequelmethods#require()","sequel::sequelmethods#require()","sequel::dataset#requires_placeholder_type_specifiers?()","sequel::dataset#requires_sql_standard_datetimes?()","sequel::migration#respond_to_missing?()","sequel::schema::createtablegenerator#respond_to_missing?()","sequel::model::classmethods#restrict_primary_key()","sequel::model::classmethods#restrict_primary_key?()","sequel::dataset#returning()","sequel::model::associations::associationreflection#returns_array?()","sequel::model::associations::manytooneassociationreflection#returns_array?()","sequel::model::associations::singularassociationreflection#returns_array?()","sequel::dataset#reverse()","sequel::migrationaltertablereverser#reverse()","sequel::migrationreverser#reverse()","sequel::dataset#reverse_order()","sequel::model::associations::manytomanyassociationreflection#right_primary_key()","sequel::model::associations::manytomanyassociationreflection#right_primary_key_method()","sequel::model::associations::manytomanyassociationreflection#right_primary_key_methods()","sequel::model::associations::manytomanyassociationreflection#right_primary_keys()","sequel::database#rollback_checker()","sequel::database#rollback_on_exit()","sequel::dataset#row_number_column()","sequel::dataset#row_proc()","sequel::database#run()","sequel::dataset::emulatepreparedstatementmethods#run()","sequel::dataset::preparedstatementmethods#run()","sequel::integermigrator#run()","sequel::migrator::run()","sequel::timestampmigrator#run()","sequel::database::run_after_initialize()","sequel::model::instancemethods#save()","sequel::model::instancemethods#save_changes()","sequel::database#schema()","sequel::dataset#schema_and_table()","sequel::database#schema_type_class()","sequel::database#select()","sequel::dataset#select()","sequel::model::associations::associationreflection#select()","sequel::model::associations::manytomanyassociationreflection#select()","sequel::dataset#select_all()","sequel::dataset#select_append()","sequel::dataset#select_group()","sequel::dataset#select_hash()","sequel::dataset#select_hash_groups()","sequel::dataset#select_map()","sequel::dataset#select_more()","sequel::dataset#select_order_map()","sequel::model::associations::manytomanyassociationreflection#separate_query_per_table?()","sequel::database#serial_primary_key_options()","sequel::dataset#server()","sequel::dataset#server?()","sequel::connectionpool#servers()","sequel::database#servers()","sequel::shardedsingleconnectionpool#servers()","sequel::shardedthreadedconnectionpool#servers()","sequel::model::instancemethods#set()","sequel::schema::altertablegenerator#set_column_allow_null()","sequel::database#set_column_default()","sequel::schema::altertablegenerator#set_column_default()","sequel::schema::altertablegenerator#set_column_not_null()","sequel::database#set_column_type()","sequel::schema::altertablegenerator#set_column_type()","sequel::model::classmethods#set_dataset()","sequel::model::instancemethods#set_fields()","sequel::dataset#set_graph_aliases()","sequel::database#set_prepared_statement()","sequel::model::classmethods#set_primary_key()","sequel::model::associations::associationreflection#set_reciprocal_to_self?()","sequel::model::associations::manytooneassociationreflection#set_reciprocal_to_self?()","sequel::model::associations::onetomanyassociationreflection#set_reciprocal_to_self?()","sequel::model::instancemethods#set_server()","sequel::database::set_shared_adapter_scheme()","sequel::model::associations::associationreflection#setter_method()","sequel::model::classmethods#setter_methods()","sequel::database#sharded?()","sequel::dataset#simple_select_all?()","sequel::dataset#single_record()","sequel::dataset#single_record!()","sequel::database#single_threaded?()","sequel::dataset#single_value()","sequel::dataset#single_value!()","sequel::dataset#single_value_ds()","sequel::model::instancemethods#singleton_method_added()","sequel::inflections::singular()","sequel::shardedsingleconnectionpool#size()","sequel::shardedthreadedconnectionpool#size()","sequel::singleconnectionpool#size()","sequel::threadedconnectionpool#size()","sequel::dataset#skip_limit_check()","sequel::dataset#skip_locked()","sequel::model::instancemethods#skip_validation_on_next_save!()","sequel::model::associations::associationreflection#slice_range()","sequel::schema::createtablegenerator#spatial_index()","sequel::dataset#split_alias()","sequel::dataset#split_qualifiers()","sequel::sequelmethods#split_symbol()","sequel::sequelmethods#split_symbol()","sequel::sequelmethods#split_symbols=()","sequel::sequelmethods#split_symbols=()","sequel::sequelmethods#split_symbols?()","sequel::sequelmethods#split_symbols?()","sequel::dataset#sql()","sequel::dataset::placeholderliteralizer#sql()","sequel::sql::booleanexpression#sql_boolean()","sequel::sql::complexexpression#sql_boolean()","sequel::sql::complexexpressionmethods#sql_boolean()","sequel::dataset::placeholderliteralizer::argument#sql_literal_append()","sequel::sql::complexexpression#sql_number()","sequel::sql::complexexpressionmethods#sql_number()","sequel::sql::numericexpression#sql_number()","sequel::sql::complexexpression#sql_string()","sequel::sql::complexexpressionmethods#sql_string()","sequel::sql::stringexpression#sql_string()","sequel::sql::subscriptmethods#sql_subscript()","sequel::sequelmethods#start_timer()","sequel::sequelmethods#start_timer()","sequel::sequelmethods#string_to_date()","sequel::sequelmethods#string_to_date()","sequel::sequelmethods#string_to_datetime()","sequel::sequelmethods#string_to_datetime()","sequel::sequelmethods#string_to_time()","sequel::sequelmethods#string_to_time()","sequel::sql::builders#subscript()","sequel::dataset#subscript_sql_append()","sequel::model::datasetmodule#subset()","sequel::dataset#sum()","sequel::database#supports_create_table_if_not_exists?()","sequel::dataset#supports_cte?()","sequel::dataset#supports_cte_in_subqueries?()","sequel::database#supports_deferrable_constraints?()","sequel::database#supports_deferrable_foreign_key_constraints?()","sequel::dataset#supports_deleting_joins?()","sequel::dataset#supports_derived_column_lists?()","sequel::dataset#supports_distinct_on?()","sequel::database#supports_drop_table_if_exists?()","sequel::database#supports_foreign_key_parsing?()","sequel::dataset#supports_group_cube?()","sequel::dataset#supports_group_rollup?()","sequel::dataset#supports_grouping_sets?()","sequel::database#supports_index_parsing?()","sequel::dataset#supports_insert_select?()","sequel::dataset#supports_intersect_except?()","sequel::dataset#supports_intersect_except_all?()","sequel::dataset#supports_is_true?()","sequel::dataset#supports_join_using?()","sequel::dataset#supports_lateral_subqueries?()","sequel::dataset#supports_limits_in_correlated_subqueries?()","sequel::dataset#supports_modifying_joins?()","sequel::dataset#supports_multiple_column_in?()","sequel::dataset#supports_nowait?()","sequel::dataset#supports_offsets_in_correlated_subqueries?()","sequel::dataset#supports_ordered_distinct_on?()","sequel::database#supports_partial_indexes?()","sequel::database#supports_prepared_transactions?()","sequel::dataset#supports_regexp?()","sequel::dataset#supports_replace?()","sequel::dataset#supports_returning?()","sequel::database#supports_savepoints?()","sequel::database#supports_savepoints_in_prepared_transactions?()","sequel::database#supports_schema_parsing?()","sequel::dataset#supports_select_all_and_column?()","sequel::dataset#supports_skip_locked?()","sequel::database#supports_table_listing?()","sequel::dataset#supports_timestamp_timezones?()","sequel::dataset#supports_timestamp_usecs?()","sequel::database#supports_transaction_isolation_levels?()","sequel::database#supports_transactional_ddl?()","sequel::dataset#supports_updating_joins?()","sequel::database#supports_view_listing?()","sequel::database#supports_views_with_check_option?()","sequel::database#supports_views_with_local_check_option?()","sequel::dataset#supports_where_true?()","sequel::dataset#supports_window_clause?()","sequel::dataset#supports_window_function_frame_option?()","sequel::dataset#supports_window_functions?()","sequel::database#synchronize()","sequel::sequelmethods#synchronize()","sequel::sequelmethods#synchronize()","sequel::sequelmethods#synchronize_with()","sequel::sequelmethods#synchronize_with()","sequel::sql::joinclause#table()","sequel::sql::joinclause#table_alias()","sequel::database#table_exists?()","sequel::model::classmethods#table_name()","sequel::database#test_connection()","sequel::model::instancemethods#this()","sequel::database#timezone()","sequel::database#to_application_timestamp()","sequel::dataset#to_hash()","sequel::model::datasetmethods#to_hash()","sequel::dataset#to_hash_groups()","sequel::model::associations::datasetmethods#to_hash_groups()","sequel::dataset#to_prepared_statement()","sequel::sqltime#to_s()","sequel::literalstring#to_sequel_blob()","sequel::sql::blob#to_sequel_blob()","sequel::database#transaction()","sequel::migrationdsl#transaction()","sequel::sequelmethods#transaction()","sequel::sequelmethods#transaction()","sequel::asttransformer#transform()","sequel::dataset::placeholderliteralizer::argument#transform()","sequel::sql::builders#trim()","sequel::dataset#truncate()","sequel::dataset#truncate_sql()","sequel::sequelmethods#typecast_to_application_timestamp()","sequel::sequelmethods#typecast_to_application_timestamp()","sequel::database#typecast_value()","sequel::inflections::uncountable()","sequel::dataset#unfiltered()","sequel::dataset#ungraphed()","sequel::model::associations::datasetmethods#ungraphed()","sequel::dataset#ungrouped()","sequel::dataset#union()","sequel::schema::createtablegenerator#unique()","sequel::dataset#unlimited()","sequel::dataset#unordered()","sequel::dataset#unqualified_column_for()","sequel::sql::function#unquoted()","sequel::model::classmethods#unrestrict_primary_key()","sequel::dataset#unused_table_alias()","sequel::migration#up()","sequel::migrationdsl#up()","sequel::dataset#update()","sequel::model::instancemethods#update()","sequel::model::instancemethods#update_fields()","sequel::dataset#update_sql()","sequel::database#uri()","sequel::database#url()","sequel::dataset::placeholderliteralizer::recorder#use()","sequel::migration::use_transactions()","sequel::model::instancemethods#valid?()","sequel::database#valid_connection?()","sequel::model::instancemethods#validate()","sequel::sql::builders#value_list()","sequel::version()","sequel::sequelmethods#virtual_row()","sequel::sequelmethods#virtual_row()","sequel::dataset#where()","sequel::dataset#where_all()","sequel::dataset#where_each()","sequel::dataset#where_single_value()","sequel::dataset#window()","sequel::dataset#window_sql_append()","sequel::dataset#with()","sequel::dataset::placeholderliteralizer#with_dataset()","sequel::dataset#with_extend()","sequel::sql::caseexpression#with_merged_expression()","sequel::sql::function#with_ordinality()","sequel::sql::placeholderliteralstring#with_parens()","sequel::model::classmethods#with_pk()","sequel::model::datasetmethods#with_pk()","sequel::model::classmethods#with_pk!()","sequel::model::datasetmethods#with_pk!()","sequel::dataset#with_quote_identifiers()","sequel::dataset#with_recursive()","sequel::dataset#with_row_proc()","sequel::dataset#with_sql()","sequel::dataset#with_sql_all()","sequel::dataset#with_sql_delete()","sequel::dataset#with_sql_each()","sequel::dataset#with_sql_first()","sequel::dataset#with_sql_insert()","sequel::dataset#with_sql_single_value()","sequel::dataset#with_sql_update()","sequel::sql::function#within_group()","sequel::sql::booleanexpression#|()","sequel::sql::subscript#|()","sequel::sql::bitwisemethods#~()","sequel::sql::booleanmethods#~()","sequel::sql::operatorbuilders#~info":[["Sequel","","Sequel.html","","<p>Top level module for Sequel\n<p>There are some module methods that are added via metaprogramming, one for …\n"],["Sequel::ASTTransformer","","Sequel/ASTTransformer.html","","<p>The <code>ASTTransformer</code> class is designed to handle the abstract syntax trees that Sequel uses internally …\n"],["Sequel::BasicObject","","Sequel/BasicObject.html","","<p>The <code>Sequel::BasicObject</code> class is just like the default <code>BasicObject</code> class, except that missing constants …\n"],["Sequel::ConnectionPool","","Sequel/ConnectionPool.html","","<p>The base connection pool class, which all other connection pools are based on.  This class is not instantiated …\n"],["Sequel::ConnectionPool::ClassMethods","","Sequel/ConnectionPool/ClassMethods.html","","<p>Class methods used to return an appropriate pool subclass, separated into a module for easier overridding …\n"],["Sequel::Database","","Sequel/Database.html","","<p>A Database object represents a virtual connection to a database. The Database class is meant to be subclassed …\n"],["Sequel::Dataset","","Sequel/Dataset.html","","<p>A dataset represents an SQL query. Datasets can be used to select, insert, update and delete records. …\n"],["Sequel::Dataset::ArgumentMapper","","Sequel/Dataset/ArgumentMapper.html","","<p>Default implementation of the argument mapper to allow native database support for bind variables and …\n"],["Sequel::Dataset::DatasetModule","","Sequel/Dataset/DatasetModule.html","","<p>This Module subclass is used by Database#extend_datasets and Dataset#with_extend to add dataset methods …\n"],["Sequel::Dataset::EmulatePreparedStatementMethods","","Sequel/Dataset/EmulatePreparedStatementMethods.html","","<p>Prepared statements emulation support for adapters that don&#39;t support native prepared statements. …\n"],["Sequel::Dataset::PlaceholderLiteralizer","","Sequel/Dataset/PlaceholderLiteralizer.html","","<p>PlaceholderLiteralizer allows you to record the application of arbitrary changes to a dataset with placeholder …\n"],["Sequel::Dataset::PlaceholderLiteralizer::Argument","","Sequel/Dataset/PlaceholderLiteralizer/Argument.html","","<p>A placeholder argument used by the PlaceholderLiteralizer.  This records the offset that the argument …\n"],["Sequel::Dataset::PlaceholderLiteralizer::Recorder","","Sequel/Dataset/PlaceholderLiteralizer/Recorder.html","","<p>Records the offsets at which the placeholder arguments are used in the SQL query.\n"],["Sequel::Dataset::PreparedStatementMethods","","Sequel/Dataset/PreparedStatementMethods.html","","<p>Backbone of the prepared statement support.  Grafts bind variable support into datasets by hijacking …\n"],["Sequel::Dataset::UnnumberedArgumentMapper","","Sequel/Dataset/UnnumberedArgumentMapper.html","","<p>Default implementation for an argument mapper that uses unnumbered SQL placeholder arguments.  Keeps …\n"],["Sequel::Deprecation","","Sequel/Deprecation.html","","<p>This module makes it easy to print deprecation warnings with optional backtraces to a given stream.  …\n"],["Sequel::Error","","Sequel/Error.html","","<p>The default exception class for exceptions raised by Sequel. All exception classes defined by Sequel …\n"],["Sequel::HookFailed","","Sequel/HookFailed.html","","<p>Exception class raised when <code>raise_on_save_failure</code> is set and an action is canceled in a hook. or an around …\n"],["Sequel::Inflections","","Sequel/Inflections.html","","<p>This module acts as a singleton returned/yielded by Sequel.inflections, which is used to override or …\n"],["Sequel::IntegerMigrator","","Sequel/IntegerMigrator.html","","<p>The default migrator, recommended in most cases.  Uses a simple incrementing version number starting …\n"],["Sequel::LiteralString","","Sequel/LiteralString.html","","<p><code>LiteralString</code> is used to represent literal SQL expressions. A  <code>LiteralString</code> is copied verbatim into …\n"],["Sequel::Migration","","Sequel/Migration.html","","<p>Sequel&#39;s older migration class, available for backward compatibility. Uses subclasses with up and …\n"],["Sequel::MigrationAlterTableReverser","","Sequel/MigrationAlterTableReverser.html","","<p>Handles reversing an alter_table block in a reversible migration.\n"],["Sequel::MigrationDSL","","Sequel/MigrationDSL.html","","<p>Internal class used by the Sequel.migration DSL, part of the <code>migration</code> extension.\n"],["Sequel::MigrationReverser","","Sequel/MigrationReverser.html","","<p>Handles the reversing of reversible migrations.  Basically records supported methods calls, translates …\n"],["Sequel::Migrator","","Sequel/Migrator.html","","<p>The <code>Migrator</code> class performs migrations based on migration files in a  specified directory. The migration …\n"],["Sequel::Migrator::Error","","Sequel/Migrator/Error.html","","<p>Exception class raised when there is an error with the migrator&#39;s file structure, database, or arguments. …\n"],["Sequel::Migrator::NotCurrentError","","Sequel/Migrator/NotCurrentError.html","","<p>Exception class raised when Migrator.check_current signals that it is not current.\n"],["Sequel::Model","","Sequel/Model.html","","<p><code>Sequel::Model</code> is an object relational mapper built on top of Sequel core.  Each model class is backed …\n"],["Sequel::Model::Associations","","Sequel/Model/Associations.html","","<p>Associations are used in order to specify relationships between model classes that reflect relations …\n"],["Sequel::Model::Associations::AssociationDatasetMethods","","Sequel/Model/Associations/AssociationDatasetMethods.html","","<p>This module contains methods added to all association datasets\n"],["Sequel::Model::Associations::AssociationReflection","","Sequel/Model/Associations/AssociationReflection.html","","<p>AssociationReflection is a Hash subclass that keeps information on Sequel::Model associations. It provides …\n"],["Sequel::Model::Associations::ClassMethods","","Sequel/Model/Associations/ClassMethods.html","","<p>Each kind of association adds a number of instance methods to the model class which are specialized according …\n"],["Sequel::Model::Associations::DatasetMethods","","Sequel/Model/Associations/DatasetMethods.html","","<p>Eager loading makes it so that you can load all associated records for a set of objects in a single query, …\n"],["Sequel::Model::Associations::DatasetModule","","Sequel/Model/Associations/DatasetModule.html","","<p>The dataset module to use for classes using the associations plugin.\n"],["Sequel::Model::Associations::EagerGraphLoader","","Sequel/Model/Associations/EagerGraphLoader.html","","<p>This class is the internal implementation of eager_graph.  It is responsible for taking an array of plain …\n"],["Sequel::Model::Associations::InstanceMethods","","Sequel/Model/Associations/InstanceMethods.html","","<p>Instance methods used to implement the associations support.\n"],["Sequel::Model::Associations::ManyToManyAssociationReflection","","Sequel/Model/Associations/ManyToManyAssociationReflection.html","",""],["Sequel::Model::Associations::ManyToOneAssociationReflection","","Sequel/Model/Associations/ManyToOneAssociationReflection.html","",""],["Sequel::Model::Associations::OneThroughOneAssociationReflection","","Sequel/Model/Associations/OneThroughOneAssociationReflection.html","",""],["Sequel::Model::Associations::OneToManyAssociationReflection","","Sequel/Model/Associations/OneToManyAssociationReflection.html","",""],["Sequel::Model::Associations::OneToOneAssociationReflection","","Sequel/Model/Associations/OneToOneAssociationReflection.html","",""],["Sequel::Model::Associations::SingularAssociationReflection","","Sequel/Model/Associations/SingularAssociationReflection.html","","<p>Methods that turn an association that returns multiple objects into an association that returns a single …\n"],["Sequel::Model::ClassMethods","","Sequel/Model/ClassMethods.html","","<p>Class methods for Sequel::Model that implement basic model functionality.\n<p>All of the following methods …\n\n"],["Sequel::Model::DatasetMethods","","Sequel/Model/DatasetMethods.html","","<p>DatasetMethods contains methods that all model datasets have.\n"],["Sequel::Model::DatasetModule","","Sequel/Model/DatasetModule.html","","<p>This Module subclass is used by Model.dataset_module to add dataset methods to classes.  In addition …\n"],["Sequel::Model::Errors","","Sequel/Model/Errors.html","","<p>Errors represents validation errors, a simple hash subclass with a few convenience methods.\n"],["Sequel::Model::InstanceMethods","","Sequel/Model/InstanceMethods.html","","<p>Sequel::Model instance methods that implement basic model functionality.\n<p>All of the model before/after/around …\n"],["Sequel::NoMatchingRow","","Sequel/NoMatchingRow.html","","<p>Error raised when the user requests a record via the first! or similar method, and the dataset does not …\n"],["Sequel::Plugins","","Sequel/Plugins.html","","<p>Empty namespace that plugins should use to store themselves, so they can be loaded via Model.plugin. …\n"],["Sequel::Qualifier","","Sequel/Qualifier.html","","<p>Handles qualifying existing datasets, so that unqualified columns in the dataset are qualified with a …\n"],["Sequel::SQL","","Sequel/SQL.html","","<p>The SQL module holds classes whose instances represent SQL fragments. It also holds modules that are …\n"],["Sequel::SQL::AliasMethods","","Sequel/SQL/AliasMethods.html","","<p>Includes an <code>as</code> method that creates an SQL alias.\n"],["Sequel::SQL::AliasedExpression","","Sequel/SQL/AliasedExpression.html","","<p>Represents an aliasing of an expression to a given alias.\n"],["Sequel::SQL::BitwiseMethods","","Sequel/SQL/BitwiseMethods.html","","<p>This defines the bitwise methods: &amp;, |, ^, ~, &lt;&lt;, and &gt;&gt;.  Because these methods overlap …\n"],["Sequel::SQL::Blob","","Sequel/SQL/Blob.html","","<p><code>Blob</code> is used to represent binary data in the Ruby environment that is stored as a blob type in the database. …\n"],["Sequel::SQL::BooleanConstant","","Sequel/SQL/BooleanConstant.html","","<p>Represents boolean constants such as <code>NULL</code>, <code>TRUE</code>, and <code>FALSE</code>.\n"],["Sequel::SQL::BooleanExpression","","Sequel/SQL/BooleanExpression.html","","<p>Subclass of <code>ComplexExpression</code> where the expression results in a boolean value in SQL.\n"],["Sequel::SQL::BooleanMethods","","Sequel/SQL/BooleanMethods.html","","<p>This module includes the boolean/logical AND (&amp;), OR (|) and NOT (~) operators that are defined on …\n"],["Sequel::SQL::Builders","","Sequel/SQL/Builders.html","","<p>These methods make it easier to create Sequel expressions without using the core extensions.\n"],["Sequel::SQL::CaseExpression","","Sequel/SQL/CaseExpression.html","","<p>Represents an SQL CASE expression, used for conditional branching in SQL.\n"],["Sequel::SQL::Cast","","Sequel/SQL/Cast.html","","<p>Represents a cast of an SQL expression to a specific type.\n"],["Sequel::SQL::CastMethods","","Sequel/SQL/CastMethods.html","","<p>Holds methods that are used to cast objects to different SQL types.\n"],["Sequel::SQL::ColumnAll","","Sequel/SQL/ColumnAll.html","","<p>Represents all columns in a given table, table.* in SQL\n"],["Sequel::SQL::ComplexExpression","","Sequel/SQL/ComplexExpression.html","","<p>Represents a SQL expression, with a given operator and one or more attributes (which may also be ComplexExpressions …\n"],["Sequel::SQL::ComplexExpressionMethods","","Sequel/SQL/ComplexExpressionMethods.html","","<p>Adds methods that allow you to treat an object as an instance of a specific <code>ComplexExpression</code> subclass. …\n"],["Sequel::SQL::Constant","","Sequel/SQL/Constant.html","","<p>Represents constants or psuedo-constants (e.g. <code>CURRENT_DATE</code>) in SQL.\n"],["Sequel::SQL::Constants","","Sequel/SQL/Constants.html","","<p>Holds default generic constants that can be referenced.  These are included in the Sequel top level module …\n"],["Sequel::SQL::DelayedEvaluation","","Sequel/SQL/DelayedEvaluation.html","","<p>Represents a delayed evaluation, encapsulating a callable object which returns the value to use when …\n"],["Sequel::SQL::Expression","","Sequel/SQL/Expression.html","","<p>Base class for all SQL expression objects.\n"],["Sequel::SQL::Function","","Sequel/SQL/Function.html","","<p>Represents an SQL function call.\n"],["Sequel::SQL::GenericExpression","","Sequel/SQL/GenericExpression.html","","<p>The base class for expressions that can be used in multiple places in an SQL query.\n"],["Sequel::SQL::Identifier","","Sequel/SQL/Identifier.html","","<p>Represents an identifier (column, table, schema, etc.).\n"],["Sequel::SQL::InequalityMethods","","Sequel/SQL/InequalityMethods.html","","<p>This module includes the inequality methods (&gt;, &lt;, &gt;=, &lt;=) that are defined on objects that …\n"],["Sequel::SQL::JoinClause","","Sequel/SQL/JoinClause.html","","<p>Represents an SQL JOIN clause, used for joining tables.\n"],["Sequel::SQL::JoinOnClause","","Sequel/SQL/JoinOnClause.html","","<p>Represents an SQL JOIN clause with ON conditions.\n"],["Sequel::SQL::JoinUsingClause","","Sequel/SQL/JoinUsingClause.html","","<p>Represents an SQL JOIN clause with USING conditions.\n"],["Sequel::SQL::NegativeBooleanConstant","","Sequel/SQL/NegativeBooleanConstant.html","","<p>Represents inverse boolean constants (currently only <code>NOTNULL</code>). A special class to allow for special behavior. …\n"],["Sequel::SQL::NumericExpression","","Sequel/SQL/NumericExpression.html","","<p>Subclass of <code>ComplexExpression</code> where the expression results in a numeric value in SQL.\n"],["Sequel::SQL::NumericMethods","","Sequel/SQL/NumericMethods.html","","<p>This module includes the standard mathematical methods (+, -, *, and /) that are defined on objects that …\n"],["Sequel::SQL::OperatorBuilders","","Sequel/SQL/OperatorBuilders.html","","<p>This adds methods to create SQL expressions using operators:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">+</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:a</span>)   <span class=\"ruby-comment\"># (1 + a)</span>\n<span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">-</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">:a</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Sequel::SQL::OrderMethods","","Sequel/SQL/OrderMethods.html","","<p>Methods that create <code>OrderedExpressions</code>, used for sorting by columns or more complex expressions.\n"],["Sequel::SQL::OrderedExpression","","Sequel/SQL/OrderedExpression.html","","<p>Represents a column/expression to order the result set by.\n"],["Sequel::SQL::PatternMatchMethods","","Sequel/SQL/PatternMatchMethods.html","","<p>This module includes methods for overriding the =~ method for SQL equality, inclusion, and pattern matching. …\n"],["Sequel::SQL::PlaceholderLiteralString","","Sequel/SQL/PlaceholderLiteralString.html","","<p>Represents a literal string with placeholders and arguments. This is necessary to ensure delayed literalization …\n"],["Sequel::SQL::QualifiedIdentifier","","Sequel/SQL/QualifiedIdentifier.html","","<p>Represents a qualified identifier (column with table or table with schema).\n"],["Sequel::SQL::QualifyingMethods","","Sequel/SQL/QualifyingMethods.html","","<p>Includes a <code>qualify</code> and <code>[]</code> methods that create <code>QualifiedIdentifier</code>s, used for qualifying column names …\n"],["Sequel::SQL::StringConcatenationMethods","","Sequel/SQL/StringConcatenationMethods.html","","<p>This module includes the <code>+</code> method.  It is included in <code>StringExpression</code> and can be included elsewhere …\n"],["Sequel::SQL::StringExpression","","Sequel/SQL/StringExpression.html","","<p>Subclass of <code>ComplexExpression</code> where the expression results in a text/string/varchar value in SQL.\n"],["Sequel::SQL::StringMethods","","Sequel/SQL/StringMethods.html","","<p>This module includes the <code>like</code> and <code>ilike</code> methods used for pattern matching that are defined on objects …\n"],["Sequel::SQL::Subscript","","Sequel/SQL/Subscript.html","","<p>Represents an SQL array access, with multiple possible arguments.\n"],["Sequel::SQL::SubscriptMethods","","Sequel/SQL/SubscriptMethods.html","","<p>This module includes the <code>sql_subscript</code> method, representing SQL array accesses.\n"],["Sequel::SQL::ValueList","","Sequel/SQL/ValueList.html","","<p>Represents an SQL value list (IN/NOT IN predicate value).  Added so it is possible to deal with a ruby …\n"],["Sequel::SQL::VirtualRow","","Sequel/SQL/VirtualRow.html","","<p>The purpose of the <code>VirtualRow</code> class is to allow the easy creation of SQL identifiers and functions, in …\n"],["Sequel::SQL::Window","","Sequel/SQL/Window.html","","<p>A <code>Window</code> is part of a window function specifying the window over which a window function operates.\n\n<pre>Sequel::SQL::Window.new(partition: ...</pre>\n"],["Sequel::SQL::Wrapper","","Sequel/SQL/Wrapper.html","","<p>A <code>Wrapper</code> is a simple way to wrap an existing object so that it supports the Sequel DSL.\n"],["Sequel::SQLTime","","Sequel/SQLTime.html","","<p>Time subclass that gets literalized with only the time value, so it operates like a standard SQL time …\n"],["Sequel::Schema","","Sequel/Schema.html","","<p>The Schema module holds the schema generators.\n"],["Sequel::Schema::AlterTableGenerator","","Sequel/Schema/AlterTableGenerator.html","","<p>Schema::AlterTableGenerator is an internal class that the user is not expected to instantiate directly. …\n"],["Sequel::Schema::CreateTableGenerator","","Sequel/Schema/CreateTableGenerator.html","","<p>Schema::CreateTableGenerator is an internal class that the user is not expected to instantiate directly. …\n"],["Sequel::SequelMethods","","Sequel/SequelMethods.html","","<p>Sequel doesn&#39;t pay much attention to timezones by default, but you can set it to handle timezones …\n"],["Sequel::ShardedSingleConnectionPool","","Sequel/ShardedSingleConnectionPool.html","","<p>A ShardedSingleConnectionPool is a single threaded connection pool that works with multiple shards/servers. …\n"],["Sequel::ShardedThreadedConnectionPool","","Sequel/ShardedThreadedConnectionPool.html","","<p>The slowest and most advanced connection, dealing with both multi-threaded access and configurations …\n"],["Sequel::SimpleMigration","","Sequel/SimpleMigration.html","","<p>Migration class used by the Sequel.migration DSL, using instances for each migration, unlike the <code>Migration</code> …\n"],["Sequel::SingleConnectionPool","","Sequel/SingleConnectionPool.html","","<p>This is the fastest connection pool, since it isn&#39;t a connection pool at all. It is just a wrapper …\n"],["Sequel::ThreadedConnectionPool","","Sequel/ThreadedConnectionPool.html","","<p>A connection pool allowing multi-threaded access to a pool of connections. This is the default connection …\n"],["Sequel::TimestampMigrator","","Sequel/TimestampMigrator.html","","<p>The migrator used if any migration file version is greater than 20000101. Stores filenames of migration …\n"],["Sequel::Timezones","","Sequel/SequelMethods.html","","<p>Sequel doesn&#39;t pay much attention to timezones by default, but you can set it to handle timezones …\n"],["Sequel::ValidationFailed","","Sequel/ValidationFailed.html","","<p>Exception class raised when <code>raise_on_save_failure</code> is set and validation fails\n"],["!~","Sequel::SQL::PatternMatchMethods","Sequel/SQL/PatternMatchMethods.html#method-i-21~","(other)",""],["&","Sequel::SQL::BooleanExpression","Sequel/SQL/BooleanExpression.html#method-i-26","(ce)","<p>Always use an AND operator for &amp; on BooleanExpressions\n"],["*","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-2A","(ce=(arg=false;nil))","<p>If no arguments are given, return a new function with the wildcard prepended to the arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">function</span>(<span class=\"ruby-value\">:count</span>).<span class=\"ruby-identifier\">*</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["*","Sequel::SQL::QualifyingMethods","Sequel/SQL/QualifyingMethods.html#method-i-2A","(ce=(arg=false;nil))","<p>If no arguments are given, return an SQL::ColumnAll:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>].<span class=\"ruby-identifier\">*</span>  <span class=\"ruby-comment\"># a.*</span>\n</pre>\n"],["**","Sequel::SQL::OperatorBuilders","Sequel/SQL/OperatorBuilders.html#method-i-2A-2A","(a, b)","<p>Return NumericExpression for the exponentiation:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">**</span>(<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>) <span class=\"ruby-comment\"># SQL: power(2, 3)</span>\n</pre>\n"],["+","Sequel::SQL::NumericExpression","Sequel/SQL/NumericExpression.html#method-i-2B","(ce)","<p>Always use + for + operator for NumericExpressions.\n"],["+","Sequel::SQL::NumericMethods","Sequel/SQL/NumericMethods.html#method-i-2B","(ce)","<p>Use || as the operator when called with StringExpression and String instances, and the + operator for …\n"],["+","Sequel::SQL::StringConcatenationMethods","Sequel/SQL/StringConcatenationMethods.html#method-i-2B","(ce)","<p>Return a <code>StringExpression</code> representing the concatenation of the receiver with the given argument.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:x</span>].<span class=\"ruby-identifier\">sql_string</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<<","Sequel::Database","Sequel/Database.html#method-i-3C-3C","(sql)","<p>Runs the supplied SQL statement string on the database server. Returns self so it can be safely chained: …\n"],["<<","Sequel::Dataset","Sequel/Dataset.html#method-i-3C-3C","(arg)","<p>Inserts the given argument into the database.  Returns self so it can be used safely when chaining:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","Sequel::Dataset","Sequel/Dataset.html#method-i-3D-3D","(o)","<p>Define a hash value such that datasets with the same class, DB, and opts will be considered equal.\n"],["==","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-3D-3D","(obj)","<p>Alias of eql?\n"],["==","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-3D-3D","(other)","<p>Alias of <code>eql?</code>\n"],["===","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-3D-3D-3D","(obj)","<p>Case equality.  By default, checks equality of the primary key value, see pk_equal?.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>] <span class=\"ruby-operator\">===</span> <span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["=~","Sequel::SQL::PatternMatchMethods","Sequel/SQL/PatternMatchMethods.html#method-i-3D~","(other)","<p>Set up an equality, inclusion, or pattern match operation, based on the type of the argument.\n"],["Bignum","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-Bignum","(name, opts=OPTS)","<p>Use custom Bignum method to use :Bignum instead of Bignum class, to work correctly in cases where Bignum …\n"],["Fixnum","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-Fixnum","(name, opts=OPTS)","<p>Use custom Fixnum method to use Integer instead of Fixnum class, to avoid  warnings on ruby 2.4+.\n"],["Model","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-Model","(source)","<p>Lets you create a Model subclass with its dataset already set. <code>source</code> should be an instance of one of …\n"],["[]","Sequel::Database","Sequel/Database.html#method-i-5B-5D","(*args)","<p>Returns a dataset for the database. If the first argument is a string, the method acts as an alias for …\n"],["[]","Sequel::Dataset","Sequel/Dataset.html#method-i-5B-5D","(*conditions)","<p>Returns the first record matching the conditions. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>][<span class=\"ruby-value\">id:</span> <span class=\"ruby-value\">1</span>] <span class=\"ruby-comment\"># SELECT * FROM table WHERE ...</span>\n</pre>\n"],["[]","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-5B-5D","(*args)","<p>Returns the first record from the database matching the conditions. If a hash is given, it is used as …\n"],["[]","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-5B-5D","(*args)","<p>Assume if a single integer is given that it is a lookup by primary key, and call with_pk with the argument. …\n"],["[]","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-5B-5D","(column)","<p>Returns value of the column&#39;s attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>][<span class=\"ruby-value\">:id</span>] <span class=\"ruby-comment\">#=&gt; 1</span>\n</pre>\n"],["[]","Sequel::SQL::QualifyingMethods","Sequel/SQL/QualifyingMethods.html#method-i-5B-5D","(identifier)","<p>Qualify the receiver with the given <code>qualifier</code> (table for column/schema for table).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:table</span>][<span class=\"ruby-value\">:column</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","Sequel::SQL::Subscript","Sequel/SQL/Subscript.html#method-i-5B-5D","(sub)","<p>Create a new <code>Subscript</code> by accessing a subarray of a multidimensional array.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>].<span class=\"ruby-identifier\">sql_subscript</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]=","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-5B-5D-3D","(column, value)","<p>Sets the value for the given column.  If typecasting is enabled for this object, typecast the value based …\n"],["_add_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-_add_method","()","<p>Name symbol for the _add internal association method\n"],["_clone","Sequel::Dataset","Sequel/Dataset.html#method-i-_clone","(opts = nil || (return self))","<p>Save original clone implementation, as some other methods need to call it internally.\n"],["_columns","Sequel::Dataset","Sequel/Dataset.html#method-i-_columns","()","<p>The cached columns for the current dataset.\n"],["_import","Sequel::Dataset","Sequel/Dataset.html#method-i-_import","(columns, values, opts)","<p>Internals of #import.  If primary key values are requested, use separate insert commands for each row. …\n"],["_remove_all_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-_remove_all_method","()","<p>Name symbol for the _remove_all internal association method\n"],["_remove_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-_remove_method","()","<p>Name symbol for the _remove internal association method\n"],["_select_map_multiple","Sequel::Dataset","Sequel/Dataset.html#method-i-_select_map_multiple","(ret_cols)","<p>Return an array of arrays of values given by the symbols in ret_cols.\n"],["_select_map_single","Sequel::Dataset","Sequel/Dataset.html#method-i-_select_map_single","()","<p>Returns an array of the first value in each row.\n"],["_setter_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-_setter_method","()","<p>Name symbol for the _setter association method\n"],["adapter_class","Sequel::Database","Sequel/Database.html#method-c-adapter_class","(scheme)","<p>The Database subclass for the given adapter scheme. Raises Sequel::AdapterNotFound if the adapter could …\n"],["adapter_scheme","Sequel::Database","Sequel/Database.html#method-i-adapter_scheme","()","<p>Returns the scheme symbol for this instance&#39;s class, which reflects which adapter is being used. …\n"],["adapter_scheme","Sequel::Database","Sequel/Database.html#method-c-adapter_scheme","()","<p>Returns the scheme symbol for the Database class.\n"],["add","Sequel::Model::Errors","Sequel/Model/Errors.html#method-i-add","(att, msg)","<p>Adds an error for the given attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">add</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-string\">&#39;is not valid&#39;</span>) <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\">&#39;invalid&#39;</span>\n</pre>\n"],["add_column","Sequel::Database","Sequel/Database.html#method-i-add_column","(table, *args)","<p>Adds a column to the specified table. This method expects a column name, a datatype and optionally a …\n"],["add_column","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_column","(name, type, opts = OPTS)","<p>Add a column with the given name, type, and opts. See CreateTableGenerator#column for the available options …\n"],["add_constraint","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_constraint","(name, *args, &block)","<p>Add a constraint with the given name and args. See CreateTableGenerator#constraint.\n\n<pre>add_constraint(:valid_name, ...</pre>\n"],["add_foreign_key","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_foreign_key","(name, table, opts = OPTS)","<p>Add a foreign key with the given name and referencing the given table. See CreateTableGenerator#column …\n"],["add_full_text_index","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_full_text_index","(columns, opts = OPTS)","<p>Add a full text index on the given columns. See CreateTableGenerator#full_text_index for available options. …\n"],["add_graph_aliases","Sequel::Dataset","Sequel/Dataset.html#method-i-add_graph_aliases","(graph_aliases)","<p>Adds the given graph aliases to the list of graph aliases to use, unlike <code>set_graph_aliases</code>, which replaces …\n"],["add_index","Sequel::Database","Sequel/Database.html#method-i-add_index","(table, columns, options=OPTS)","<p>Adds an index to a table for the given columns:\n\n<pre>DB.add_index :posts, :title\nDB.add_index :posts, [:author, ...</pre>\n"],["add_index","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_index","(columns, opts = OPTS)","<p>Add an index on the given columns. See CreateTableGenerator#index for available options.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">add_index</span>(<span class=\"ruby-value\">:artist_id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["add_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-add_method","()","<p>Name symbol for the add association method\n"],["add_primary_key","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_primary_key","(name, opts = OPTS)","<p>Add a primary key.  See CreateTableGenerator#column for the available options.  Like <code>add_foreign_key</code> …\n"],["add_servers","Sequel::Database","Sequel/Database.html#method-i-add_servers","(servers)","<p>Dynamically add new servers or modify server options at runtime. Also adds new servers to the connection …\n"],["add_servers","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-add_servers","(servers)","<p>Adds new servers to the connection pool. Primarily used in conjunction with primary/replica or sharded …\n"],["add_servers","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-add_servers","(servers)","<p>Adds new servers to the connection pool.  Allows for dynamic expansion of the potential replicas/shards …\n"],["add_spatial_index","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_spatial_index","(columns, opts = OPTS)","<p>Add a spatial index on the given columns. See CreateTableGenerator#index for available options.\n"],["add_type_method","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-c-add_type_method","(*types)","<p>Add a method for each of the given types that creates a column with that type as a constant.  Types given …\n"],["add_unique_constraint","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-add_unique_constraint","(columns, opts = OPTS)","<p>Add a unique constraint to the given column(s)\n\n<pre>add_unique_constraint(:name) # ADD UNIQUE (name)\nadd_unique_constraint(:name, ...</pre>\n"],["after_commit","Sequel::Database","Sequel/Database.html#method-i-after_commit","(opts=OPTS, &block)","<p>If a transaction is not currently in process, yield to the block immediately. Otherwise, add the block …\n"],["after_initialize","Sequel::Database","Sequel/Database.html#method-c-after_initialize","(&block)","<p>Register a hook that will be run when a new Database is instantiated. It is called with the new database …\n"],["after_rollback","Sequel::Database","Sequel/Database.html#method-i-after_rollback","(opts=OPTS, &block)","<p>If a transaction is not currently in progress, ignore the block. Otherwise, add the block to the list …\n"],["after_set_dataset","Sequel::Plugins","Sequel/Plugins.html#method-c-after_set_dataset","(mod, meth)","<p>Add method to <code>mod</code> that overrides set_dataset to call the method afterward.\n"],["aliased_expression_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-aliased_expression_sql_append","(sql, ae)","<p>Append literalization of aliased expression to SQL string.\n"],["all","Sequel::Dataset","Sequel/Dataset.html#method-i-all","(&block)","<p>Returns an array with all records in the dataset. If a block is given, the array is iterated over after …\n"],["all","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-all","(*args, &block)","<p>Return an array of all objects by running the SQL query for the given arguments. If a block is given, …\n"],["all_association_reflections","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-all_association_reflections","()","<p>Array of all association reflections for this model class\n"],["all_connections","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-all_connections","()","<p>Yield all of the currently established connections\n"],["all_connections","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-all_connections","()","<p>Yield all of the available connections, and the ones currently allocated to this thread.  This will not …\n"],["all_connections","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-i-all_connections","()","<p>Yield the connection if one has been made.\n"],["all_connections","Sequel::ThreadedConnectionPool","Sequel/ThreadedConnectionPool.html#method-i-all_connections","()","<p>Yield all of the available connections, and the one currently allocated to this thread.  This will not …\n"],["allocated","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-allocated","(server=:default)","<p>A hash of connections currently being used for the given server, key is the Thread, value is the connection. …\n"],["alter_table","Sequel::Database","Sequel/Database.html#method-i-alter_table","(name, &block)","<p>Alters the given table with the specified block. Example:\n\n<pre>DB.alter_table :items do\n  add_column :category, ...</pre>\n"],["alter_table_generator","Sequel::Database","Sequel/Database.html#method-i-alter_table_generator","(&block)","<p>Return a new Schema::AlterTableGenerator instance with the receiver as the database and the given block. …\n"],["application_to_database_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-application_to_database_timestamp","(v)","<p>Convert the given <code>Time</code>/<code>DateTime</code> object into the database timezone, used when literalizing objects in …\n"],["application_to_database_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-application_to_database_timestamp","(v)","<p>Convert the given <code>Time</code>/<code>DateTime</code> object into the database timezone, used when literalizing objects in …\n"],["apply","Sequel::Migration","Sequel/Migration.html#method-c-apply","(db, direction)","<p>Applies the migration to the supplied database in the specified direction.\n"],["apply","Sequel::Migrator","Sequel/Migrator.html#method-c-apply","(db, directory, target = nil, current = nil)","<p>Wrapper for <code>run</code>, maintaining backwards API compatibility\n"],["apply","Sequel::Model::Associations","Sequel/Model/Associations.html#method-c-apply","(model)","<p>Set an empty association reflection hash in the model\n"],["apply","Sequel::SimpleMigration","Sequel/SimpleMigration.html#method-i-apply","(db, direction)","<p>Apply the appropriate block on the <code>Database</code> instance using instance_exec.\n"],["apply_dataset_changes","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_dataset_changes","(ds)","<p>Apply all non-instance specific changes to the given dataset and return it.\n"],["apply_distinct_on_eager_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_distinct_on_eager_limit_strategy","(ds)","<p>Use DISTINCT ON and ORDER BY clauses to limit the results to the first record with matching keys.\n"],["apply_eager_dataset_changes","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_eager_dataset_changes","(ds)","<p>Apply all non-instance specific changes and the eager_block option to the given dataset and return it. …\n"],["apply_eager_graph_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_eager_graph_limit_strategy","(strategy, ds)","<p>Apply the eager graph limit strategy to the dataset to graph into the current dataset, or return the …\n"],["apply_eager_graph_limit_strategy","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-apply_eager_graph_limit_strategy","(strategy, ds)","<p>Support a correlated subquery limit strategy when using eager_graph.\n"],["apply_eager_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_eager_limit_strategy","(ds, strategy=eager_limit_strategy, limit_and_offset=limit_and_offset())","<p>Apply an eager limit strategy to the dataset, or return the dataset unmodified if it doesn&#39;t need …\n"],["apply_ruby_eager_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_ruby_eager_limit_strategy","(rows, limit_and_offset = limit_and_offset())","<p>If the ruby eager limit strategy is being used, slice the array using the slice range to return the object(s) …\n"],["apply_window_function_eager_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-apply_window_function_eager_limit_strategy","(ds, limit_and_offset=limit_and_offset())","<p>Use a window function to limit the results of the eager loading dataset.\n"],["arg","Sequel::Dataset::PlaceholderLiteralizer::Recorder","Sequel/Dataset/PlaceholderLiteralizer/Recorder.html#method-i-arg","(v=(no_arg_given = true; @argn+=1))","<p>Return an Argument with the specified position, or the next position. In general you shouldn&#39;t mix …\n"],["array_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-array_sql_append","(sql, a)","<p>Append literalization of array to SQL string.\n"],["as","Sequel::SQL::AliasMethods","Sequel/SQL/AliasMethods.html#method-i-as","(aliaz, columns=nil)","<p>Create an SQL alias (<code>AliasedExpression</code>) of the receiving column or expression to the given alias.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">function</span>(<span class=\"ruby-value\">:func</span>).<span class=\"ruby-identifier\">as</span>(<span class=\"ruby-value\">:alias</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["as","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-as","(exp, aliaz, columns=nil)","<p>Create an SQL::AliasedExpression for the given expression and alias.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">as</span>(<span class=\"ruby-value\">:column</span>, <span class=\"ruby-value\">:alias</span>) <span class=\"ruby-comment\"># &quot;column&quot; ...</span>\n</pre>\n"],["as_hash","Sequel::Dataset","Sequel/Dataset.html#method-i-as_hash","(key_column, value_column = nil, opts = OPTS)","<p>Returns a hash with one column used as key and another used as value. If rows have duplicate values for …\n"],["as_hash","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-as_hash","(key_column=nil, value_column=nil, opts=OPTS)","<p>If the dataset is being eagerly loaded, default to calling all instead of each.\n"],["as_hash","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-as_hash","(key_column=nil, value_column=nil, opts=OPTS)","<p>This allows you to call <code>as_hash</code> without any arguments, which will result in a hash with the primary key …\n"],["asc","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-asc","(arg, opts=OPTS)","<p>Order the given argument ascending. Options:\n<p>:nulls  &mdash; Set to :first to use NULLS FIRST (so NULL values …\n\n"],["asc","Sequel::SQL::OrderMethods","Sequel/SQL/OrderMethods.html#method-i-asc","(opts=OPTS)","<p>Mark the receiving SQL column as sorting in an ascending fashion (generally a no-op). Options:\n<p>:nulls … &mdash; "],["asc","Sequel::SQL::OrderedExpression","Sequel/SQL/OrderedExpression.html#method-i-asc","()","<p>Return a copy that is ordered ASC\n"],["assign_singular?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-assign_singular-3F","()","<p>Whether the associations cache should use an array when storing the associated records during eager loading. …\n"],["assign_singular?","Sequel::Model::Associations::SingularAssociationReflection","Sequel/Model/Associations/SingularAssociationReflection.html#method-i-assign_singular-3F","()","<p>Singular associations do not assign singular if they are using the ruby eager limit strategy and have …\n"],["associate","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-associate","(type, name, opts = OPTS, &block)","<p>Associates a related model with the current model. The following types are supported:\n<p>:many_to_one  &mdash; Foreign …\n"],["associated_class","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-associated_class","()","<p>The class associated to the current model class via this association\n"],["associated_dataset","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-associated_dataset","()","<p>The dataset associated via this association, with the non-instance specific changes already applied. …\n"],["associated_key_alias","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-associated_key_alias","()","<p>The alias to use for the associated key when eagerly loading\n"],["associated_key_array","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-associated_key_array","()","<p>Array of associated keys used when eagerly loading.\n"],["associated_key_column","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-associated_key_column","()","<p>The column to use for the associated key when eagerly loading\n"],["associated_key_table","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-associated_key_table","()",""],["associated_object_keys","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-associated_object_keys","()","<p>Alias of right_primary_keys\n"],["associated_object_keys","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-associated_object_keys","()",""],["associated_object_keys","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-associated_object_keys","()","<p>The keys in the associated model&#39;s table related to this association\n"],["association_dataset_for","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-association_dataset_for","(object)","<p>Return an dataset that will load the appropriate associated objects for the given object using this association. …\n"],["association_dataset_proc","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-association_dataset_proc","()","<p>Proc used to create the association dataset method.\n"],["association_join","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-association_join","(*associations)","<p>Adds one or more INNER JOINs to the existing dataset using the keys and conditions specified by the given …\n"],["association_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-association_method","()","<p>Name symbol for association method, the same as the name of the association.\n"],["association_reflection","Sequel::Model::Associations::AssociationDatasetMethods","Sequel/Model/Associations/AssociationDatasetMethods.html#method-i-association_reflection","()","<p>The association reflection related to the association dataset\n"],["association_reflection","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-association_reflection","(name)","<p>The association reflection hash for the association of the given name.\n"],["associations","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-associations","()","<p>Array of association name symbols\n"],["associations","Sequel::Model::Associations::InstanceMethods","Sequel/Model/Associations/InstanceMethods.html#method-i-associations","()","<p>The currently cached associations.  A hash with the keys being the association name symbols and the values …\n"],["attr_reader","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-c-attr_reader","(*args)","<p>Expression objects are assumed to be value objects, where their attribute values can&#39;t change after …\n"],["autoincrementing_primary_key","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-autoincrementing_primary_key","()","<p>The autoincrementing primary key for this model object. Should be overridden if you have a composite …\n"],["available_connections","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-available_connections","(server=:default)","<p>An array of connections opened but not currently used, for the given server. Nonexistent servers will …\n"],["avg","Sequel::Dataset","Sequel/Dataset.html#method-i-avg","(arg=(no_arg = true), &block)","<p>Returns the average value for the given column/expression. Uses a virtual row block if no argument is …\n"],["bind","Sequel::Dataset","Sequel/Dataset.html#method-i-bind","(bind_vars=OPTS)","<p>Set the bind variables to use for the call.  If bind variables have already been set for this dataset, …\n"],["bind_arguments","Sequel::Dataset::ArgumentMapper","Sequel/Dataset/ArgumentMapper.html#method-i-bind_arguments","()","<p>The bind arguments to use for running this prepared statement\n"],["blob","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-blob","(s)","<p>Return an <code>SQL::Blob</code> that holds the same data as this string. Blobs provide proper escaping of binary …\n"],["boolean_constant_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-boolean_constant_sql_append","(sql, constant)","<p>Append literalization of boolean constant to SQL string.\n"],["cache_get","Sequel::Dataset","Sequel/Dataset.html#method-i-cache_get","(k)","<p>Retreive a value from the dataset&#39;s cache in a thread safe manner.\n"],["cache_set","Sequel::Dataset","Sequel/Dataset.html#method-i-cache_set","(k, v)","<p>Set a value in the dataset&#39;s cache in a thread safe manner.\n"],["call","Sequel::Database","Sequel/Database.html#method-i-call","(ps_name, hash=OPTS, &block)","<p>Call the prepared statement with the given name with the given hash of arguments.\n\n<pre>DB[:items].where(id: ...</pre>\n"],["call","Sequel::Dataset","Sequel/Dataset.html#method-i-call","(type, bind_variables=OPTS, *values, &block)","<p>For the given type (:select, :first, :insert, :insert_select, :update, :delete, or :single_value), run …\n"],["call","Sequel::Dataset::ArgumentMapper","Sequel/Dataset/ArgumentMapper.html#method-i-call","(bind_vars=OPTS, &block)","<p>Set the bind arguments based on the hash and call super.\n"],["call","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-call","(bind_vars=OPTS, &block)","<p>Sets the prepared_args to the given hash and runs the prepared statement.\n"],["call","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-call","(values)","<p>Initializes a model instance as an existing record. This constructor is used by Sequel to initialize …\n"],["call","Sequel::SQL::DelayedEvaluation","Sequel/SQL/DelayedEvaluation.html#method-i-call","(ds)","<p>Call the underlying callable and return the result.  If the underlying callable only accepts a single …\n"],["can_have_associated_objects?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-can_have_associated_objects-3F","(obj)","<p>Whether this association can have associated objects, given the current object.  Should be false if obj …\n"],["can_have_associated_objects?","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-can_have_associated_objects-3F","(obj)","<p>many_to_many associations can only have associated objects if none of the :left_primary_keys options …\n"],["can_have_associated_objects?","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-can_have_associated_objects-3F","(obj)","<p>many_to_one associations can only have associated objects if none of the :keys options have a nil value. …\n"],["can_have_associated_objects?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-can_have_associated_objects-3F","(obj)","<p>one_to_many associations can only have associated objects if none of the :keys options have a nil value. …\n"],["cancel_action","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-cancel_action","(msg=nil)","<p>Cancel the current action.  Should be called in before hooks to halt the processing of the action.   …\n"],["case","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-case","(*args)","<p>Return an <code>SQL::CaseExpression</code> created with the given arguments. The first argument are the <code>WHEN</code>/<code>THEN</code> …\n"],["case_expression_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-case_expression_sql_append","(sql, ce)","<p>Append literalization of case expression to SQL string.\n"],["cast","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-cast","(arg, sql_type)","<p>Cast the reciever to the given SQL type.  You can specify a ruby class as a type, and it is handled similarly …\n"],["cast","Sequel::SQL::CastMethods","Sequel/SQL/CastMethods.html#method-i-cast","(sql_type)","<p>Cast the reciever to the given SQL type.  You can specify a ruby class as a type, and it is handled similarly …\n"],["cast_numeric","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-cast_numeric","(arg, sql_type = nil)","<p>Cast the reciever to the given SQL type (or the database&#39;s default Integer type if none given), and …\n"],["cast_numeric","Sequel::SQL::CastMethods","Sequel/SQL/CastMethods.html#method-i-cast_numeric","(sql_type = nil)","<p>Cast the reciever to the given SQL type (or the database&#39;s default Integer type if none given), and …\n"],["cast_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-cast_sql_append","(sql, expr, type)","<p>Append literalization of cast expression to SQL string.\n"],["cast_string","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-cast_string","(arg, sql_type = nil)","<p>Cast the reciever to the given SQL type (or the database&#39;s default String type if none given), and …\n"],["cast_string","Sequel::SQL::CastMethods","Sequel/SQL/CastMethods.html#method-i-cast_string","(sql_type = nil)","<p>Cast the reciever to the given SQL type (or the database&#39;s default String type if none given), and …\n"],["cast_type_literal","Sequel::Database","Sequel/Database.html#method-i-cast_type_literal","(type)","<p>Cast the given type to a literal type\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">cast_type_literal</span>(<span class=\"ruby-constant\">Float</span>) <span class=\"ruby-comment\"># double precision</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">cast_type_literal</span>(<span class=\"ruby-value\">:foo</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cause","Sequel::Error","Sequel/Error.html#method-i-cause","()","<p>:nocov:  Returned the wrapped exception if one exists, otherwise use ruby&#39;s default behavior.\n"],["change","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-change","(&block)","<p>Creates a reversible migration.  This is the same as creating the same block with <code>up</code>, but it also calls …\n"],["changed_columns","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-changed_columns","()","<p>The columns that have been updated.  This isn&#39;t completely accurate, as it could contain columns …\n"],["char_length","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-char_length","(arg)","<p>Return an emulated function call for getting the number of characters in the argument:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">char_length</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["check","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-check","(*args, &block)","<p>Add an unnamed constraint, specified by the given block or args:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">check</span>(<span class=\"ruby-value\">num:</span> <span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># CHECK num &gt;= 1 AND ...</span>\n</pre>\n"],["check_current","Sequel::Migrator","Sequel/Migrator.html#method-c-check_current","(*args)","<p>Raise a NotCurrentError unless the migrator is current, takes the same arguments as #run.\n"],["clause_methods","Sequel::Dataset","Sequel/Dataset.html#method-c-clause_methods","(type, clauses)","<p>Given a type (e.g. select) and an array of clauses, return an array of methods to call to build the  …\n"],["clear","Sequel::Inflections","Sequel/Inflections.html#method-c-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is :all). Give the scope as a symbol of the …\n"],["clear_columns_cache","Sequel::Dataset","Sequel/Dataset.html#method-i-clear_columns_cache","()","<p>Clear the columns hash for the current dataset.  This is not a thread safe operation, so it should only …\n"],["clear_setter_methods_cache","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-clear_setter_methods_cache","()","<p>Clear the setter_methods cache\n"],["clone","Sequel::Dataset","Sequel/Dataset.html#method-i-clone","(opts = nil || (return self))","<p>Returns a new clone of the dataset with the given options merged. If the options changed include options …\n"],["clone","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-clone","()","<p>Make clone/dup return self, since Expression objects are supposed to be frozen value objects\n"],["cloneable?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-cloneable-3F","(ref)","<p>Whether you are able to clone from the given association type to the current association type, true by …\n"],["cloneable?","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-cloneable-3F","(ref)","<p>one_through_one and many_to_many associations can be clones\n"],["cloneable?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-cloneable-3F","(ref)","<p>one_to_many and one_to_one associations can be clones\n"],["coerce","Sequel::SQL::NumericMethods","Sequel/SQL/NumericMethods.html#method-i-coerce","(other)","<p>If the argument given is Numeric, treat it as a NumericExpression, allowing code such as:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:x</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["column","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-column","(name, type, opts = OPTS)","<p>Add a column with the given name, type, and opts:\n\n<pre>column :num, :integer\n# num INTEGER\n\ncolumn :name, String, ...</pre>\n"],["column_aliases","Sequel::SQL::JoinClause","Sequel/SQL/JoinClause.html#method-i-column_aliases","()","<p>The column aliases to use for the JOIN , or nil if the JOIN does not use a derived column list.\n"],["column_all_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-column_all_sql_append","(sql, ca)","<p>Append literalization of column all selection to SQL string.\n"],["columns","Sequel::Dataset","Sequel/Dataset.html#method-i-columns","()","<p>Returns the columns in the result set in order as an array of symbols. If the columns are currently cached, …\n"],["columns","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-columns","()","<p>Send the columns to the original dataset, as calling it on the prepared statement can cause problems. …\n"],["columns","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-columns","()","<p>Returns the columns in the result set in their original order. Generally, this will use the columns determined …\n"],["columns!","Sequel::Dataset","Sequel/Dataset.html#method-i-columns-21","()","<p>Ignore any cached column information and perform a query to retrieve a row in order to get the columns. …\n"],["complex_expression_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>Append literalization of complex expression to SQL string.\n"],["complex_expression_sql_append","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>If the expression is in the form <code>x = y</code> where <code>y</code> is a <code>Sequel::Model</code> instance, array of <code>Sequel::Model</code> instances, …\n"],["compound_clone","Sequel::Dataset","Sequel/Dataset.html#method-i-compound_clone","(type, dataset, opts)","<p>Add the dataset to the list of compounds\n"],["compound_from_self","Sequel::Dataset","Sequel/Dataset.html#method-i-compound_from_self","()","<p>Return a from_self dataset if an order or limit is specified, so it works as expected with UNION, EXCEPT …\n"],["condition_specifier?","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-condition_specifier-3F","(obj)","<p>Returns true if the passed object could be a specifier of conditions, false otherwise. Currently, Sequel …\n"],["condition_specifier?","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-condition_specifier-3F","(obj)","<p>Returns true if the passed object could be a specifier of conditions, false otherwise. Currently, Sequel …\n"],["conn","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-conn","(server=:default)","<p>The connection for the given server.\n"],["connect","Sequel::Database","Sequel/Database.html#method-c-connect","(conn_string, opts = OPTS)","<p>Connects to a database.  See Sequel.connect.\n"],["connect","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-connect","(*args, &block)","<p>Creates a new database object based on the supplied connection string and optional arguments.  The specified …\n"],["connect","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-connect","(*args, &block)","<p>Creates a new database object based on the supplied connection string and optional arguments.  The specified …\n"],["const_missing","Sequel::BasicObject","Sequel/BasicObject.html#method-c-const_missing","(name)","<p>Lookup missing constants in <code>::Object</code>\n"],["constant_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-constant_sql_append","(sql, constant)","<p>Append literalization of constant to SQL string.\n"],["constraint","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-constraint","(name, *args, &block)","<p>Adds a named CHECK constraint (or unnamed if name is nil), with the given block or args. To provide options …\n"],["convert_exception_class","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-convert_exception_class","(exception, klass)","<p>Convert the <code>exception</code> to the given class.  The given class should be <code>Sequel::Error</code> or a subclass.  Returns …\n"],["convert_exception_class","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-convert_exception_class","(exception, klass)","<p>Convert the <code>exception</code> to the given class.  The given class should be <code>Sequel::Error</code> or a subclass.  Returns …\n"],["convert_output_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-convert_output_timestamp","(v, output_timezone)","<p>Converts the object to the given <code>output_timezone</code>.\n"],["convert_output_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-convert_output_timestamp","(v, output_timezone)","<p>Converts the object to the given <code>output_timezone</code>.\n"],["convert_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-convert_timestamp","(v, input_timezone)","<p>Converts the given object from the given input timezone to the <code>application_timezone</code> using <code>convert_input_timestamp</code> …\n"],["convert_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-convert_timestamp","(v, input_timezone)","<p>Converts the given object from the given input timezone to the <code>application_timezone</code> using <code>convert_input_timestamp</code> …\n"],["core_extensions?","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-core_extensions-3F","()","<p>Assume the core extensions are not loaded by default, if the core_extensions extension is loaded, this …\n"],["core_extensions?","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-core_extensions-3F","()","<p>Assume the core extensions are not loaded by default, if the core_extensions extension is loaded, this …\n"],["count","Sequel::Dataset","Sequel/Dataset.html#method-i-count","(arg=(no_arg=true), &block)","<p>Returns the number of records in the dataset. If an argument is provided, it is used as the argument …\n"],["count","Sequel::Model::Errors","Sequel/Model/Errors.html#method-i-count","()","<p>Return the total number of error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-comment\"># =&gt; 3</span>\n</pre>\n"],["create","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-c-create","(&block)",""],["create","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-create","(values = OPTS, &block)","<p>Creates instance using new with the given values and block, and saves it.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">create</span>(<span class=\"ruby-value\">name:</span> <span class=\"ruby-string\">&#39;Bob&#39;</span>)\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["create","Sequel::SQLTime","Sequel/SQLTime.html#method-c-create","(hour, minute, second, usec = 0)","<p>Create a new SQLTime instance given an hour, minute, second, and usec.\n"],["create_join_table","Sequel::Database","Sequel/Database.html#method-i-create_join_table","(hash, options=OPTS)","<p>Create a join table using a hash of foreign keys to referenced table names.  Example:\n\n<pre>create_join_table(cat_id: ...</pre>\n"],["create_join_table!","Sequel::Database","Sequel/Database.html#method-i-create_join_table-21","(hash, options=OPTS)","<p>Forcibly create a join table, attempting to drop it if it already exists, then creating it.\n"],["create_join_table?","Sequel::Database","Sequel/Database.html#method-i-create_join_table-3F","(hash, options=OPTS)","<p>Creates the join table unless it already exists.\n"],["create_or_replace_view","Sequel::Database","Sequel/Database.html#method-i-create_or_replace_view","(name, source, options = OPTS)","<p>Creates a view, replacing a view with the same name if one already exists.\n\n<pre>DB.create_or_replace_view(:some_items, ...</pre>\n"],["create_table","Sequel::Database","Sequel/Database.html#method-i-create_table","(name, options=OPTS, &block)","<p>Creates a table with the columns given in the provided block:\n\n<pre>DB.create_table :posts do\n  primary_key ...</pre>\n"],["create_table!","Sequel::Database","Sequel/Database.html#method-i-create_table-21","(name, options=OPTS, &block)","<p>Forcibly create a table, attempting to drop it if it already exists, then creating it.\n\n<pre>DB.create_table!(:a){Integer ...</pre>\n"],["create_table?","Sequel::Database","Sequel/Database.html#method-i-create_table-3F","(name, options=OPTS, &block)","<p>Creates the table unless the table already exists.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">create_table?</span>(<span class=\"ruby-value\">:a</span>){<span class=\"ruby-constant\">Integer</span> <span class=\"ruby-value\">:a</span>} \n<span class=\"ruby-comment\"># SELECT NULL FROM ...</span>\n</pre>\n"],["create_table_generator","Sequel::Database","Sequel/Database.html#method-i-create_table_generator","(&block)","<p>Return a new Schema::CreateTableGenerator instance with the receiver as the database and the given block. …\n"],["create_view","Sequel::Database","Sequel/Database.html#method-i-create_view","(name, source, options = OPTS)","<p>Creates a view based on a dataset or an SQL string:\n\n<pre>DB.create_view(:cheap_items, &quot;SELECT * FROM items ...</pre>\n"],["current","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-current","()","<p>The current concurrency primitive, Thread.current by default.\n"],["current","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-current","()","<p>The current concurrency primitive, Thread.current by default.\n"],["current_datetime","Sequel::Dataset","Sequel/Dataset.html#method-i-current_datetime","()","<p>An object representing the current date or time, should be an instance of Sequel.datetime_class.\n"],["database_to_application_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-database_to_application_timestamp","(v)","<p>Convert the given object into an object of <code>Sequel.datetime_class</code> in the <code>application_timezone</code>.  Used when …\n"],["database_to_application_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-database_to_application_timestamp","(v)","<p>Convert the given object into an object of <code>Sequel.datetime_class</code> in the <code>application_timezone</code>.  Used when …\n"],["database_type","Sequel::Database","Sequel/Database.html#method-i-database_type","()","<p>The database type for this database object, the same as the adapter scheme by default.  Should be overridden …\n"],["dataset","Sequel::Database","Sequel/Database.html#method-i-dataset","()","<p>Returns a blank dataset for this database.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">dataset</span> <span class=\"ruby-comment\"># SELECT *</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">dataset</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">:items</span>) <span class=\"ruby-comment\"># SELECT * FROM ...</span>\n</pre>\n"],["dataset","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-dataset","()","<p>Returns the dataset associated with the Model class.  Raises an <code>Error</code> if there is no associated dataset …\n"],["dataset=","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-dataset-3D","(ds)","<p>Alias of set_dataset\n"],["dataset_class=","Sequel::Database","Sequel/Database.html#method-i-dataset_class-3D","(c)","<p>If the database has any dataset modules associated with it, use a subclass of the given class that includes …\n"],["dataset_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-dataset_method","()","<p>Name symbol for the dataset association method\n"],["dataset_module","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-dataset_module","(mod = nil, &block)","<p>Extend the dataset with a module, similar to adding a plugin with the methods defined in DatasetMethods …\n"],["dataset_need_primary_key?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-dataset_need_primary_key-3F","()","<p>Whether the dataset needs a primary key to function, true by default.\n"],["dataset_need_primary_key?","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-dataset_need_primary_key-3F","()","<p>Whether the dataset needs a primary key to function, false for many_to_one associations.\n"],["date","Sequel::SQLTime","Sequel/SQLTime.html#method-c-date","()","<p>Use the date explicitly set, or the current date if there is not a date set.\n"],["db","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-db","()","<p>Returns the database associated with the Model class. If this model doesn&#39;t have a database associated …\n"],["db=","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-db-3D","(db)","<p>Sets the database associated with the Model class. Should only be used if the Model class currently does …\n"],["db_schema","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-db_schema","()","<p>Returns the cached schema information if available or gets it from the database.  This is a hash where …\n"],["deep_qualify","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-deep_qualify","(qualifier, expr)","<p>Do a deep qualification of the argument using the qualifier.  This recurses into nested structures.\n\n<pre>Sequel.deep_qualify(:table, ...</pre>\n"],["def_Model","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-def_Model","(mod)","<p>Define a Model method on the given module that calls the Model method on the receiver.  This is how the …\n"],["def_column_alias","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-def_column_alias","(meth, column)","<p>Create a column alias, where the column methods have one name, but the underlying storage uses a different …\n"],["def_dataset_caching_method","Sequel::Dataset::DatasetModule","Sequel/Dataset/DatasetModule.html#method-c-def_dataset_caching_method","(mod, meth)","<p>Define a method in the module\n"],["def_dataset_methods","Sequel::Plugins","Sequel/Plugins.html#method-c-def_dataset_methods","(mod, meths)","<p>In the given module <code>mod</code>, define methods that are call the same method on the dataset.  This is designed …\n"],["def_sequel_method","Sequel::Plugins","Sequel/Plugins.html#method-c-def_sequel_method","(model, meth, expected_arity, &block)","<p>Define a private instance method using the block with the provided name and expected arity.  If the name …\n"],["def_sql_method","Sequel::Dataset","Sequel/Dataset.html#method-c-def_sql_method","(mod, type, clauses)","<p>Define a dataset literalization method for the given type in the given module, using the given clauses. …\n"],["default_associated_key_alias","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-default_associated_key_alias","()","<p>The default associated key alias(es) to use when eager loading associations via eager.\n"],["default_eager_loader","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-default_eager_loader","(eo)","<p>The default eager loader used if the user doesn&#39;t override it.  Extracted to a method so the code …\n"],["default_join_table","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-default_join_table","()","<p>Default name symbol for the join table.\n"],["default_key","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-default_key","()","<p>Default foreign key name symbol for foreign key in current model&#39;s table that points to the given …\n"],["default_key","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-default_key","()","<p>Default foreign key name symbol for key in associated table that points to current table&#39;s primary …\n"],["default_left_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-default_left_key","()","<p>Default foreign key name symbol for key in join table that points to current table&#39;s primary key …\n"],["default_right_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-default_right_key","()","<p>Default foreign key name symbol for foreign key in join table that points to the association&#39;s table&#39;s …\n"],["default_right_key","Sequel::Model::Associations::OneThroughOneAssociationReflection","Sequel/Model/Associations/OneThroughOneAssociationReflection.html#method-i-default_right_key","()","<p>one_through_one associations should not singularize the association name when creating the foreign key. …\n"],["default_timezone=","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-default_timezone-3D","(tz)","<p>Sets the database, application, and typecasting timezones to the given timezone.\n"],["default_timezone=","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-default_timezone-3D","(tz)","<p>Sets the database, application, and typecasting timezones to the given timezone.\n"],["delay","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-delay","(&block)","<p>Return a delayed evaluation that uses the passed block. This is used to delay evaluations of the code …\n"],["delayed_evaluation_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-delayed_evaluation_sql_append","(sql, delay)","<p>Append literalization of delayed evaluation to SQL string, causing the delayed evaluation proc to be …\n"],["delayed_evaluation_sql_append","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-delayed_evaluation_sql_append","(sql, delay)","<p>Disallow use of delayed evaluations in prepared statements.\n"],["delete","Sequel::Dataset","Sequel/Dataset.html#method-i-delete","(&block)","<p>Deletes the records in the dataset, returning the number of records deleted.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>].<span class=\"ruby-identifier\">delete</span> <span class=\"ruby-comment\"># DELETE ...</span>\n</pre>\n"],["delete","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-delete","()","<p>Deletes and returns <code>self</code>.  Does not run destroy hooks. Look into using <code>destroy</code> instead.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">delete</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete_row_number_column","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-delete_row_number_column","(ds=associated_dataset)","<p>Return the symbol used for the row number column if the window function eager limit strategy is being …\n"],["deprecate","Sequel::Deprecation","Sequel/Deprecation.html#method-c-deprecate","(method, instead=nil)","<p>Print the message and possibly backtrace to the output.\n"],["deprecate_constant","Sequel::Deprecation","Sequel/Deprecation.html#method-c-deprecate_constant","(mod, constant)","<p>If using ruby 2.3+, use Module#deprecate_constant to deprecate the constant, otherwise do nothing as …\n"],["desc","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-desc","(arg, opts=OPTS)","<p>Order the given argument descending. Options:\n<p>:nulls  &mdash; Set to :first to use NULLS FIRST (so NULL values …\n\n"],["desc","Sequel::SQL::OrderMethods","Sequel/SQL/OrderMethods.html#method-i-desc","(opts=OPTS)","<p>Mark the receiving SQL column as sorting in a descending fashion. Options:\n<p>:nulls  &mdash; Set to :first to use …\n\n"],["desc","Sequel::SQL::OrderedExpression","Sequel/SQL/OrderedExpression.html#method-i-desc","()","<p>Return a copy that is ordered DESC\n"],["descendants","Sequel::Migration","Sequel/Migration.html#method-c-descendants","()","<p>Returns the list of Migration descendants.\n"],["destroy","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-destroy","()","<p>Destroy each row in the dataset by instantiating it and then calling destroy on the resulting model object. …\n"],["destroy","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-destroy","(opts = OPTS)","<p>Like delete but runs hooks before and after delete. Uses a transaction if use_transactions is true or …\n"],["disconnect","Sequel::Database","Sequel/Database.html#method-i-disconnect","(opts = OPTS)","<p>Disconnects all available connections from the connection pool.  Any connections currently in use will …\n"],["disconnect","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-disconnect","(opts=OPTS)","<p>Disconnects from the database. Once a connection is requested using #hold, the connection is reestablished. …\n"],["disconnect","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-disconnect","(opts=OPTS)","<p>Removes all connections currently available on all servers, optionally yielding each connection to the …\n"],["disconnect","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-i-disconnect","(opts=nil)","<p>Disconnect the connection from the database.\n"],["disconnect","Sequel::ThreadedConnectionPool","Sequel/ThreadedConnectionPool.html#method-i-disconnect","(opts=OPTS)","<p>Removes all connections currently available, optionally yielding each connection to the given block. …\n"],["disconnect_connection","Sequel::Database","Sequel/Database.html#method-i-disconnect_connection","(conn)","<p>Should only be called by the connection pool code to disconnect a connection. By default, calls the close …\n"],["distinct","Sequel::Dataset","Sequel/Dataset.html#method-i-distinct","(*args, &block)","<p>Returns a copy of the dataset with the SQL DISTINCT clause. The DISTINCT clause is used to remove duplicate …\n"],["distinct","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-distinct","()","<p>Return a new function with DISTINCT before the method arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">function</span>(<span class=\"ruby-value\">:count</span>, <span class=\"ruby-value\">:col</span>).<span class=\"ruby-identifier\">distinct</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["down","Sequel::Migration","Sequel/Migration.html#method-i-down","()","<p>The default down action does nothing\n"],["down","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-down","(&block)","<p>Defines the migration&#39;s down action.\n"],["drop_column","Sequel::Database","Sequel/Database.html#method-i-drop_column","(table, *args)","<p>Removes a column from the specified table:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">drop_column</span> <span class=\"ruby-value\">:items</span>, <span class=\"ruby-value\">:category</span>\n</pre>\n<p>See <code>alter_table</code>.\n"],["drop_column","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-drop_column","(name, opts=OPTS)","<p>Remove a column from the table.\n\n<pre>drop_column(:artist_id) # DROP COLUMN artist_id\ndrop_column(:artist_id, ...</pre>\n"],["drop_constraint","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-drop_constraint","(name, opts=OPTS)","<p>Remove a constraint from the table:\n\n<pre>drop_constraint(:unique_name) # DROP CONSTRAINT unique_name\ndrop_constraint(:unique_name, ...</pre>\n"],["drop_foreign_key","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-drop_foreign_key","(name, opts=OPTS)","<p>Remove a foreign key and the associated column from the table. General options:\n<p>:name  &mdash; The name of the …\n\n"],["drop_index","Sequel::Database","Sequel/Database.html#method-i-drop_index","(table, columns, options=OPTS)","<p>Removes an index for the given table and column(s):\n\n<pre>DB.drop_index :posts, :title\nDB.drop_index :posts, ...</pre>\n"],["drop_index","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-drop_index","(columns, options=OPTS)","<p>Remove an index from the table. General options:\n<p>:name  &mdash; The name of the index to drop.  If not given, …\n\n"],["drop_join_table","Sequel::Database","Sequel/Database.html#method-i-drop_join_table","(hash, options=OPTS)","<p>Drop the join table that would have been created with the same arguments to create_join_table:\n\n<pre>drop_join_table(cat_id: ...</pre>\n"],["drop_table","Sequel::Database","Sequel/Database.html#method-i-drop_table","(*names)","<p>Drops one or more tables corresponding to the given names:\n\n<pre>DB.drop_table(:posts) # DROP TABLE posts\nDB.drop_table(:posts, ...</pre>\n"],["drop_table?","Sequel::Database","Sequel/Database.html#method-i-drop_table-3F","(*names)","<p>Drops the table if it already exists.  If it doesn&#39;t exist, does nothing.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">drop_table?</span>(<span class=\"ruby-value\">:a</span>)\n<span class=\"ruby-comment\"># SELECT ...</span>\n</pre>\n"],["drop_view","Sequel::Database","Sequel/Database.html#method-i-drop_view","(*names)","<p>Drops one or more views corresponding to the given names:\n\n<pre>DB.drop_view(:cheap_items)\nDB.drop_view(:cheap_items, ...</pre>\n"],["dup","Sequel::Dataset","Sequel/Dataset.html#method-i-dup","()","<p>Return self, as datasets are always frozen.\n"],["dup","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-dup","()",""],["each","Sequel::Dataset","Sequel/Dataset.html#method-i-each","()","<p>Iterates over the records in the dataset as they are yielded from the database adapter, and returns self. …\n"],["each","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-each","(*args, &block)","<p>Run the SQL query for the given arguments, yielding each returned row to the block.\n"],["each","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-each","(&block)","<p>Iterates through all of the current values using each.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Album</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">each</span>{<span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">k</span>, <span class=\"ruby-identifier\">v</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-node\">&quot;#{k} =&gt; #{v}&quot;</span>}\n<span class=\"ruby-comment\"># id ...</span>\n</pre>\n"],["each_server","Sequel::Dataset","Sequel/Dataset.html#method-i-each_server","()","<p>Yield a dataset for each server in the connection pool that is tied to that server. Intended for use …\n"],["eager","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-eager","(*associations)","<p>The preferred eager loading method.  Loads all associated records using one query for each association. …\n"],["eager_graph","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-eager_graph","(*associations)","<p>The secondary eager loading method.  Loads all associations in a single query. This method should only …\n"],["eager_graph_association","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-eager_graph_association","(ds, model, ta, requirements, r, *associations)","<p>Call graph on the association with the correct arguments, update the eager_graph data structure, and …\n"],["eager_graph_associations","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-eager_graph_associations","(ds, model, ta, requirements, *associations)","<p>Check the associations are valid for the given model. Call eager_graph_association on each association. …\n"],["eager_graph_build_associations","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-eager_graph_build_associations","(hashes)","<p>Replace the array of plain hashes with an array of model objects will all eager_graphed associations …\n"],["eager_graph_lazy_dataset?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-eager_graph_lazy_dataset-3F","()","<p>Whether to eagerly graph a lazy dataset, true by default.  If this is false, the association won&#39;t …\n"],["eager_graph_lazy_dataset?","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-eager_graph_lazy_dataset-3F","()","<p>Whether to eagerly graph a lazy dataset, true for many_to_one associations only if the key is nil.\n"],["eager_graph_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-eager_graph_limit_strategy","(strategy)","<p>The eager_graph limit strategy to use for this dataset\n"],["eager_graph_limit_strategy","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-eager_graph_limit_strategy","(_)","<p>many_to_one associations don&#39;t need an eager_graph limit strategy\n"],["eager_graph_with_options","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-eager_graph_with_options","(associations, opts=OPTS)","<p>Run eager_graph with some options specific to just this call. Unlike eager_graph, this takes the associations …\n"],["eager_limit_strategy","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-eager_limit_strategy","()","<p>The eager limit strategy to use for this dataset.\n"],["eager_limit_strategy","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-eager_limit_strategy","()","<p>many_to_one associations don&#39;t need an eager limit strategy\n"],["eager_load_results","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-eager_load_results","(eo, &block)","<p>Eager load the associated objects using the hash of eager options, yielding each row to the block.\n"],["eager_load_results","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-eager_load_results","(opts, eo, &block)","<p>Eager load the association with the given eager loader options.\n"],["eager_loader_key","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-eager_loader_key","()","<p>The key to use for the key hash when eager loading\n"],["eager_loading_use_associated_key?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-eager_loading_use_associated_key-3F","()","<p>By default associations do not need to select a key in an associated table to eagerly load.\n"],["eager_loading_use_associated_key?","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-eager_loading_use_associated_key-3F","()","<p>many_to_many associations need to select a key in an associated table to eagerly load\n"],["elapsed_seconds_since","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-elapsed_seconds_since","(timer)","<p>The elapsed seconds since the given timer object was created.  The timer object should have been created …\n"],["elapsed_seconds_since","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-elapsed_seconds_since","(timer)","<p>The elapsed seconds since the given timer object was created.  The timer object should have been created …\n"],["empty?","Sequel::Dataset","Sequel/Dataset.html#method-i-empty-3F","()","<p>Returns true if no records exist in the dataset, false otherwise\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>].<span class=\"ruby-identifier\">empty?</span> <span class=\"ruby-comment\"># SELECT 1 AS one FROM ...</span>\n</pre>\n"],["empty?","Sequel::Model::Errors","Sequel/Model/Errors.html#method-i-empty-3F","()","<p>Return true if there are no error messages, false otherwise.\n"],["eql?","Sequel::Dataset","Sequel/Dataset.html#method-i-eql-3F","(o)","<p>Alias for ==\n"],["eql?","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-eql-3F","(obj)","<p>Compares model instances by values.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>] <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>] <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["eql?","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-eql-3F","(other)","<p>Returns true if the receiver is the same expression as the the <code>other</code> expression.\n"],["errors","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-errors","()","<p>Returns the validation errors associated with this object. See <code>Errors</code>.\n"],["escape_like","Sequel::Dataset","Sequel/Dataset.html#method-i-escape_like","(string)","<p>Returns the string with the LIKE metacharacters (% and _) escaped. Useful for when the LIKE term is a …\n"],["except","Sequel::Dataset","Sequel/Dataset.html#method-i-except","(dataset, opts=OPTS)","<p>Adds an EXCEPT clause using a second dataset object. An EXCEPT compound dataset returns all rows in the …\n"],["exclude","Sequel::Dataset","Sequel/Dataset.html#method-i-exclude","(*cond, &block)","<p>Performs the inverse of Dataset#where.  Note that if you have multiple filter conditions, this is not …\n"],["exclude_having","Sequel::Dataset","Sequel/Dataset.html#method-i-exclude_having","(*cond, &block)","<p>Inverts the given conditions and adds them to the HAVING clause.\n\n<pre>DB[:items].select_group(:name).exclude_having{count(name) ...</pre>\n"],["execute_ddl","Sequel::Database","Sequel/Database.html#method-i-execute_ddl","(sql, opts=OPTS, &block)","<p>Method that should be used when submitting any DDL (Data Definition Language) SQL, such as <code>create_table</code> …\n"],["execute_dui","Sequel::Database","Sequel/Database.html#method-i-execute_dui","(sql, opts=OPTS, &block)","<p>Method that should be used when issuing a DELETE or UPDATE statement.  By default, calls execute. This …\n"],["execute_insert","Sequel::Database","Sequel/Database.html#method-i-execute_insert","(sql, opts=OPTS, &block)","<p>Method that should be used when issuing a INSERT statement.  By default, calls execute_dui. This method …\n"],["exists","Sequel::Dataset","Sequel/Dataset.html#method-i-exists","()","<p>Returns an EXISTS clause for the dataset as an SQL::PlaceholderLiteralString.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">select</span>(<span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">exists</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exists?","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-exists-3F","()","<p>Returns true when current instance exists, false otherwise. Generally an object that isn&#39;t new will …\n"],["expr","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-expr","(arg=(no_arg=true), &block)","<p>Wraps the given object in an appropriate Sequel wrapper. If the given object is already a Sequel object, …\n"],["expression?","Sequel::SQL::CaseExpression","Sequel/SQL/CaseExpression.html#method-i-expression-3F","()","<p>Whether to use an expression for this CASE expression.\n"],["extend","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-extend","(mod)","<p>Ignore the model&#39;s setter method cache when this instances extends a module, as the module may contain …\n"],["extend_datasets","Sequel::Database","Sequel/Database.html#method-i-extend_datasets","(mod=nil, &block)","<p>Equivalent to extending all datasets produced by the database with a module.  What it actually does is …\n"],["extension","Sequel::Database","Sequel/Database.html#method-c-extension","(*extensions)","<p>Apply an extension to all Database objects created in the future.\n"],["extension","Sequel::Database","Sequel/Database.html#method-i-extension","(*exts)","<p>Load an extension into the receiver.  In addition to requiring the extension file, this also modifies …\n"],["extension","Sequel::Dataset","Sequel/Dataset.html#method-i-extension","(*a)","<p>Return a clone of the dataset loaded with the given dataset extensions. If no related extension file …\n"],["extension","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-extension","(*extensions)","<p>Load all Sequel extensions given.  Extensions are just files that exist under <code>sequel/extensions</code> in the …\n"],["extension","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-extension","(*extensions)","<p>Load all Sequel extensions given.  Extensions are just files that exist under <code>sequel/extensions</code> in the …\n"],["extract","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-extract","(datetime_part, exp)","<p>Extract a datetime_part (e.g. year, month) from the given expression:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">extract</span>(<span class=\"ruby-value\">:year</span>, <span class=\"ruby-value\">:date</span>) <span class=\"ruby-comment\"># extract(year ...</span>\n</pre>\n"],["extract","Sequel::SQL::ComplexExpressionMethods","Sequel/SQL/ComplexExpressionMethods.html#method-i-extract","(datetime_part)","<p>Extract a datetime part (e.g. year, month) from self:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:date</span>].<span class=\"ruby-identifier\">extract</span>(<span class=\"ruby-value\">:year</span>) <span class=\"ruby-comment\"># extract(year FROM ...</span>\n</pre>\n"],["fetch","Sequel::Database","Sequel/Database.html#method-i-fetch","(sql, *args, &block)","<p>Fetches records for an arbitrary SQL statement. If a block is given, it is used to iterate over the records: …\n"],["filter","Sequel::Dataset","Sequel/Dataset.html#method-i-filter","(*cond, &block)","<p>Alias for where.\n"],["filter","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-filter","(*args, &block)","<p>Return a new function with FILTER added to it, for filtered aggregate functions:\n\n<pre>Sequel.function(:foo, ...</pre>\n"],["filter_by_associations_add_conditions?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-filter_by_associations_add_conditions-3F","()","<p>Whether additional conditions should be added when using the filter by associations support.\n"],["filter_by_associations_add_conditions?","Sequel::Model::Associations::SingularAssociationReflection","Sequel/Model/Associations/SingularAssociationReflection.html#method-i-filter_by_associations_add_conditions-3F","()","<p>Add conditions when filtering by singular associations with orders, since the underlying relationship …\n"],["filter_by_associations_conditions_expression","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-filter_by_associations_conditions_expression","(obj)","<p>The expression to use for the additional conditions to be added for the filter by association support, …\n"],["filter_by_associations_limit_strategy","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-filter_by_associations_limit_strategy","()","<p>many_to_one associations don&#39;t need a filter by associations limit strategy\n"],["finalize","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-finalize","()","<p>Finalize the association by first attempting to populate the thread-safe cache, and then transfering …\n"],["finalize_associations","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-finalize_associations","()","<p>Finalize all associations such that values that are looked up dynamically in associated classes are set …\n"],["finalize_settings","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-finalize_settings","()",""],["finalize_settings","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-finalize_settings","()",""],["finalize_settings","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-finalize_settings","()",""],["finalize_settings","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-finalize_settings","()",""],["find","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-find","(*args, &block)","<p>Finds a single record according to the supplied filter. You are encouraged to use Model.[] or Model.first …\n"],["find_or_create","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-find_or_create","(cond, &block)","<p>Like <code>find</code> but invokes create with given conditions when record does not exist.  Unlike <code>find</code> in that the …\n"],["first","Sequel::Dataset","Sequel/Dataset.html#method-i-first","(*args, &block)","<p>Returns the first matching record if no arguments are given. If a integer argument is given, it is interpreted …\n"],["first","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-first","(*args)","<p>Run the SQL query for the given arguments, returning the first row.\n"],["first!","Sequel::Dataset","Sequel/Dataset.html#method-i-first-21","(*args, &block)","<p>Calls first.  If first returns nil (signaling that no row matches), raise a Sequel::NoMatchingRow exception. …\n"],["first_source","Sequel::Dataset","Sequel/Dataset.html#method-i-first_source","()","<p>Alias of <code>first_source_alias</code>\n"],["first_source_alias","Sequel::Dataset","Sequel/Dataset.html#method-i-first_source_alias","()","<p>The first source (primary table) for this dataset.  If the dataset doesn&#39;t have a table, raises an …\n"],["first_source_table","Sequel::Dataset","Sequel/Dataset.html#method-i-first_source_table","()","<p>The first source (primary table) for this dataset.  If the dataset doesn&#39;t have a table, raises an …\n"],["for_update","Sequel::Dataset","Sequel/Dataset.html#method-i-for_update","()","<p>Returns a cloned dataset with a :update lock style.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>].<span class=\"ruby-identifier\">for_update</span> <span class=\"ruby-comment\"># SELECT * FROM table FOR UPDATE</span>\n</pre>\n"],["foreign_key","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-foreign_key","(name, table=nil, opts = OPTS)","<p>Add a foreign key in the table that references another table. See #column for available options.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">foreign_key</span>(<span class=\"ruby-value\">:artist_id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["freeze","Sequel::Database","Sequel/Database.html#method-i-freeze","()","<p>Freeze internal data structures for the Database instance.\n"],["freeze","Sequel::Dataset","Sequel/Dataset.html#method-i-freeze","()","<p>Freeze the opts when freezing the dataset.\n"],["freeze","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-freeze","()","<p>Freeze the fragments and final SQL when freezing the literalizer.\n"],["freeze","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-freeze","()","<p>Freeze association related metadata when freezing model class.\n"],["freeze","Sequel::Model::Associations::InstanceMethods","Sequel/Model/Associations/InstanceMethods.html#method-i-freeze","()","<p>Freeze the associations cache when freezing the object.  Note that retrieving associations after freezing …\n"],["freeze","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-freeze","()","<p>Freeze a model class, disallowing any further changes to it.\n"],["freeze","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-freeze","()","<p>Freeze the object in such a way that it is still usable but not modifiable. Once an object is frozen, …\n"],["freeze","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-freeze","()",""],["freeze","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-freeze","()",""],["from","Sequel::Database","Sequel/Database.html#method-i-from","(*args, &block)","<p>Returns a new dataset with the <code>from</code> method invoked. If a block is given, it acts as a virtual row block …\n"],["from","Sequel::Dataset","Sequel/Dataset.html#method-i-from","(*source, &block)","<p>Returns a copy of the dataset with the source changed. If no source is given, removes all tables.  If …\n"],["from_application_timestamp","Sequel::Database","Sequel/Database.html#method-i-from_application_timestamp","(v)","<p>Convert the given timestamp from the application&#39;s timezone, to the databases&#39;s timezone or the …\n"],["from_self","Sequel::Dataset","Sequel/Dataset.html#method-i-from_self","(opts=OPTS)","<p>Returns a dataset selecting from the current dataset. Options:\n<p>:alias  &mdash; Controls the alias of the table …\n"],["from_value_pairs","Sequel::SQL::BooleanExpression","Sequel/SQL/BooleanExpression.html#method-c-from_value_pairs","(pairs, op=:AND, negate=false)","<p>Take pairs of values (e.g. a hash or array of two element arrays) and converts it to a <code>BooleanExpression</code> …\n"],["full_messages","Sequel::Model::Errors","Sequel/Model/Errors.html#method-i-full_messages","()","<p>Returns an array of fully-formatted error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">full_messages</span>\n<span class=\"ruby-comment\"># =&gt; [&#39;name is not valid&#39;,</span>\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["full_text_index","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-full_text_index","(columns, opts = OPTS)","<p>Add a full text index on the given columns. See #index for additional options.\n<p>PostgreSQL specific options: …\n"],["function","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-function","(name, *args)","<p>Returns a <code>Sequel::SQL::Function</code> with the function name and the given arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">function</span>(<span class=\"ruby-value\">:now</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["function","Sequel::SQL::Identifier","Sequel/SQL/Identifier.html#method-i-function","(*args)","<p>Create a Function using this identifier as the functions name, with the given args.\n"],["function","Sequel::SQL::QualifiedIdentifier","Sequel/SQL/QualifiedIdentifier.html#method-i-function","(*args)","<p>Create a Function using this identifier as the functions name, with the given args.\n"],["function_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-function_sql_append","(sql, f)","<p>Append literalization of function call to SQL string.\n"],["get","Sequel::Database","Sequel/Database.html#method-i-get","(*args, &block)","<p>Returns a single value from the database, see Dataset#get.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">get</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># SELECT 1</span>\n<span class=\"ruby-comment\"># =&gt; 1</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">get</span>{<span class=\"ruby-identifier\">server_version</span>.<span class=\"ruby-identifier\">function</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get","Sequel::Dataset","Sequel/Dataset.html#method-i-get","(column=(no_arg=true; nil), &block)","<p>Return the column value for the first matching record in the dataset. Raises an error if both an argument …\n"],["get","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-get","(*args)","<p>Run the SQL query for the given arguments, returning the first value.  For this to make sense, the dataset …\n"],["get_pool","Sequel::ConnectionPool::ClassMethods","Sequel/ConnectionPool/ClassMethods.html#method-i-get_pool","(db, opts = OPTS)","<p>Return a pool subclass instance based on the given options.  If a <code>:pool_class</code> option is provided is provided, …\n"],["global_index_namespace?","Sequel::Database","Sequel/Database.html#method-i-global_index_namespace-3F","()","<p>Whether the database uses a global namespace for the index, true by default.  If false, the indexes are …\n"],["graph","Sequel::Dataset","Sequel/Dataset.html#method-i-graph","(dataset, join_conditions = nil, options = OPTS, &block)","<p>Similar to Dataset#join_table, but uses unambiguous aliases for selected columns and keeps metadata about …\n"],["grep","Sequel::Dataset","Sequel/Dataset.html#method-i-grep","(columns, patterns, opts=OPTS)","<p>Match any of the columns to any of the patterns. The terms can be strings (which use LIKE) or regular …\n"],["group","Sequel::Dataset","Sequel/Dataset.html#method-i-group","(*columns, &block)","<p>Returns a copy of the dataset with the results grouped by the value of  the given columns.  If a block …\n"],["group_and_count","Sequel::Dataset","Sequel/Dataset.html#method-i-group_and_count","(*columns, &block)","<p>Returns a dataset grouped by the given column with count by group. Column aliases may be supplied, and …\n"],["group_append","Sequel::Dataset","Sequel/Dataset.html#method-i-group_append","(*columns, &block)","<p>Returns a copy of the dataset with the given columns added to the list of existing columns to group on. …\n"],["group_by","Sequel::Dataset","Sequel/Dataset.html#method-i-group_by","(*columns, &block)","<p>Alias of group\n"],["group_cube","Sequel::Dataset","Sequel/Dataset.html#method-i-group_cube","()","<p>Adds the appropriate CUBE syntax to GROUP BY.\n"],["group_rollup","Sequel::Dataset","Sequel/Dataset.html#method-i-group_rollup","()","<p>Adds the appropriate ROLLUP syntax to GROUP BY.\n"],["grouping_sets","Sequel::Dataset","Sequel/Dataset.html#method-i-grouping_sets","()","<p>Adds the appropriate GROUPING SETS syntax to GROUP BY.\n"],["handle_silent_modification_failure?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-handle_silent_modification_failure-3F","()","<p>Whether to handle silent modification failure when adding/removing associated records, false by default. …\n"],["handle_silent_modification_failure?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-handle_silent_modification_failure-3F","()","<p>Handle silent failure of add/remove methods if raise_on_save_failure is false.\n"],["has_column?","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-has_column-3F","(name)","<p>True if the generator includes the creation of a column with the given name.\n"],["has_dataset?","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-has_dataset-3F","()","<p>Whether the model has a dataset.  True for most model classes, but can be false if the model class is …\n"],["hash","Sequel::Dataset","Sequel/Dataset.html#method-i-hash","()","<p>Define a hash value such that datasets with the same class, DB, and opts, will have the same hash value. …\n"],["hash","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-hash","()","<p>Value that should be unique for objects with the same class and pk (if pk is not nil), or the same class …\n"],["hash","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-hash","()","<p>Make sure that the hash value is the same if the attributes are the same.\n"],["having","Sequel::Dataset","Sequel/Dataset.html#method-i-having","(*cond, &block)","<p>Returns a copy of the dataset with the HAVING conditions changed. See #where for argument types.\n\n<pre>DB[:items].group(:sum).having(sum: ...</pre>\n"],["hold","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-hold","(server=:default)","<p>Yields the connection to the supplied block for the given server. This method simulates the ConnectionPool#hold …\n"],["hold","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-hold","(server=:default)","<p>Chooses the first available connection to the given server, or if none are available, creates a new connection. …\n"],["hold","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-i-hold","(server=nil)","<p>Yield the connection to the block.\n"],["hold","Sequel::ThreadedConnectionPool","Sequel/ThreadedConnectionPool.html#method-i-hold","(server=nil)","<p>Chooses the first available connection, or if none are available, creates a new connection.  Passes the …\n"],["id","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-id","()","<p>Returns value for the :id attribute, even if the primary key is not id. To get the primary key value, …\n"],["identifier","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-identifier","(name)","<p>Return the argument wrapped as an <code>SQL::Identifier</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">identifier</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># &quot;a&quot;</span>\n</pre>\n"],["ilike","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-ilike","(*args)","<p>Create a <code>BooleanExpression</code> case insensitive (if the database supports it) pattern match of the receiver …\n"],["ilike","Sequel::SQL::StringMethods","Sequel/SQL/StringMethods.html#method-i-ilike","(*ces)","<p>Create a <code>BooleanExpression</code> case insensitive pattern match of the receiver with the given patterns.   …\n"],["implicit_table_name","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-implicit_table_name","()","<p>Returns the implicit table name for the model class, which is the demodulized, underscored, pluralized …\n"],["import","Sequel::Dataset","Sequel/Dataset.html#method-i-import","(columns, values, opts=OPTS)","<p>Inserts multiple records into the associated table. This method can be used to efficiently insert a large …\n"],["in_transaction?","Sequel::Database","Sequel/Database.html#method-i-in_transaction-3F","(opts=OPTS)","<p>Return true if already in a transaction given the options, false otherwise.  Respects the :server option …\n"],["include","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-include","(*mods)","<p>Clear the setter_methods cache when a module is included, as it may contain setter methods.\n"],["index","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-index","(columns, opts = OPTS)","<p>Add an index on the given column(s) with the given options. Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">index</span> <span class=\"ruby-value\">:name</span>\n<span class=\"ruby-comment\"># CREATE INDEX table_name_index ...</span>\n</pre>\n"],["inflections","Sequel","Sequel.html#method-c-inflections","()","<p>Yield the Inflections module if a block is given, and return the Inflections module.\n"],["inherited","Sequel::Migration","Sequel/Migration.html#method-c-inherited","(base)","<p>Adds the new migration class to the list of Migration descendants.\n"],["inherited","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-c-inherited","(subclass)","<p>Copy the comparison_attrs into the subclass.\n"],["inherited_instance_variables","Sequel::Plugins","Sequel/Plugins.html#method-c-inherited_instance_variables","(mod, hash)","<p>Add method to <code>mod</code> that overrides inherited_instance_variables to include the values in this hash.\n"],["initialize_association_cache","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-initialize_association_cache","(objects)","<p>Initialize the associations cache for the current association for the given objects.\n"],["insert","Sequel::Dataset","Sequel/Dataset.html#method-i-insert","(*values, &block)","<p>Inserts values into the associated table.  The returned value is generally the value of the autoincremented …\n"],["insert_sql","Sequel::Dataset","Sequel/Dataset.html#method-i-insert_sql","(*values)","<p>Returns an INSERT SQL query string.  See <code>insert</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">insert_sql</span>(<span class=\"ruby-value\">a:</span> <span class=\"ruby-value\">1</span>)\n<span class=\"ruby-comment\"># =&gt; &quot;INSERT INTO items (a) ...</span>\n</pre>\n"],["inspect","Sequel::Database","Sequel/Database.html#method-i-inspect","()","<p>Returns a string representation of the database object including the class name and connection URI and …\n"],["inspect","Sequel::Dataset","Sequel/Dataset.html#method-i-inspect","()","<p>Returns a string representation of the dataset including the class name  and the corresponding SQL select …\n"],["inspect","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-inspect","()","<p>Programmer friendly string showing this is a prepared statement, with the prepared SQL it represents …\n"],["inspect","Sequel::LiteralString","Sequel/LiteralString.html#method-i-inspect","()","<p>Show that the current string is a literal string in addition to the output.\n"],["inspect","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-inspect","()","<p>Show which type of reflection this is, and a guess at what code was used to create the association.\n"],["inspect","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-inspect","()","<p>Returns a string representation of the model instance including the class name and values.\n"],["inspect","Sequel::SQL::Blob","Sequel/SQL/Blob.html#method-i-inspect","()","<p>Return a string showing that this is a blob, the size, and the some or all of the content, depending …\n"],["inspect","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-inspect","()","<p>Show the class name and instance variables for the object.\n"],["inspect","Sequel::SQL::ValueList","Sequel/SQL/ValueList.html#method-i-inspect","()","<p>Show that this is a value list and not just an array\n"],["inspect","Sequel::SQLTime","Sequel/SQLTime.html#method-i-inspect","()","<p>Show that this is an SQLTime, and the time represented\n"],["intersect","Sequel::Dataset","Sequel/Dataset.html#method-i-intersect","(dataset, opts=OPTS)","<p>Adds an INTERSECT clause using a second dataset object. An INTERSECT compound dataset returns all rows …\n"],["invert","Sequel::Dataset","Sequel/Dataset.html#method-i-invert","()","<p>Inverts the current WHERE and HAVING clauses.  If there is neither a WHERE or HAVING clause, adds a  …\n"],["invert","Sequel::SQL::BooleanExpression","Sequel/SQL/BooleanExpression.html#method-c-invert","(ce)","<p>Invert the expression, if possible.  If the expression cannot be inverted, raise an error.  An inverted …\n"],["invert","Sequel::SQL::OrderedExpression","Sequel/SQL/OrderedExpression.html#method-i-invert","()","<p>Return an inverted expression, changing ASC to DESC and NULLS FIRST to NULLS LAST.\n"],["irregular","Sequel::Inflections","Sequel/Inflections.html#method-c-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and singularization at the same time. This …\n"],["is_current?","Sequel::IntegerMigrator","Sequel/IntegerMigrator.html#method-i-is_current-3F","()","<p>The integer migrator is current if the current version is the same as the target version.\n"],["is_current?","Sequel::Migrator","Sequel/Migrator.html#method-c-is_current-3F","(db, directory, opts=OPTS)","<p>Return whether the migrator is current (i.e. it does not need to make any changes).  Takes the same arguments …\n"],["is_current?","Sequel::TimestampMigrator","Sequel/TimestampMigrator.html#method-i-is_current-3F","()","<p>The timestamp migrator is current if there are no migrations to apply in either direction.\n"],["join","Sequel::Dataset","Sequel/Dataset.html#method-i-join","(*args, &block)","<p>Alias of <code>inner_join</code>\n"],["join","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-join","(args, joiner=nil)","<p>Return a <code>Sequel::SQL::StringExpression</code> representing an SQL string made up of the concatenation of the …\n"],["join_clause_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-join_clause_sql_append","(sql, jc)","<p>Append literalization of JOIN clause without ON or USING to SQL string.\n"],["join_on_clause_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-join_on_clause_sql_append","(sql, jc)","<p>Append literalization of JOIN ON clause to SQL string.\n"],["join_table","Sequel::Dataset","Sequel/Dataset.html#method-i-join_table","(type, table, expr=nil, options=OPTS, &block)","<p>Returns a joined dataset.  Not usually called directly, users should use the appropriate join method …\n"],["join_table_alias","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-join_table_alias","()","<p>The join table itself, unless it is aliased, in which case this is the alias.\n"],["join_table_source","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-join_table_source","()","<p>The source of the join table.  This is the join table itself, unless it is aliased, in which case it …\n"],["join_using_clause_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-join_using_clause_sql_append","(sql, jc)","<p>Append literalization of JOIN USING clause to SQL string.\n"],["joined_dataset?","Sequel::Dataset","Sequel/Dataset.html#method-i-joined_dataset-3F","()","<p>Whether this dataset is a joined dataset (multiple FROM tables or any JOINs).\n"],["json_parser_error_class","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-json_parser_error_class","()","<p>The exception classed raised if there is an error parsing JSON. This can be overridden to use an alternative …\n"],["json_parser_error_class","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-json_parser_error_class","()","<p>The exception classed raised if there is an error parsing JSON. This can be overridden to use an alternative …\n"],["keys","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-keys","()","<p>Returns the keys in <code>values</code>.  May not include all column names.\n\n<pre>Artist.new.keys # =&gt; []\nArtist.new(name: ...</pre>\n"],["last","Sequel::Dataset","Sequel/Dataset.html#method-i-last","(*args, &block)","<p>Reverses the order and then runs #first with the given arguments and block.  Note that this will not …\n"],["last","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-last","(*a, &block)","<p>If there is no order already defined on this dataset, order it by the primary key and call last.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Album</span>.<span class=\"ruby-identifier\">last</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["lateral","Sequel::Dataset","Sequel/Dataset.html#method-i-lateral","()","<p>Marks this dataset as a lateral dataset.  If used in another dataset&#39;s FROM or JOIN clauses, it will …\n"],["lateral","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-lateral","()","<p>Return a function which will use LATERAL when literalized:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">function</span>(<span class=\"ruby-value\">:foo</span>, <span class=\"ruby-value\">:col</span>).<span class=\"ruby-identifier\">lateral</span> <span class=\"ruby-comment\"># LATERAL ...</span>\n</pre>\n"],["like","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-like","(*args)","<p>Create a <code>SQL::BooleanExpression</code> case sensitive (if the database supports it) pattern match of the receiver …\n"],["like","Sequel::SQL::StringExpression","Sequel/SQL/StringExpression.html#method-c-like","(l, *ces)","<p>Creates a SQL pattern match exprssion. left (l) is the SQL string we are matching against, and ces are …\n"],["like","Sequel::SQL::StringMethods","Sequel/SQL/StringMethods.html#method-i-like","(*ces)","<p>Create a <code>BooleanExpression</code> case sensitive (if the database supports it) pattern match of the receiver …\n"],["limit","Sequel::Dataset","Sequel/Dataset.html#method-i-limit","(l, o = (no_offset = true; nil))","<p>If given an integer, the dataset will contain only the first l results. If given a range, it will contain …\n"],["limit_and_offset","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-limit_and_offset","()","<p>The limit and offset for this association (returned as a two element array).\n"],["limit_and_offset","Sequel::Model::Associations::SingularAssociationReflection","Sequel/Model/Associations/SingularAssociationReflection.html#method-i-limit_and_offset","()","<p>Make sure singular associations always have 1 as the limit\n"],["lit","Sequel::LiteralString","Sequel/LiteralString.html#method-i-lit","(*args)","<p>Return self if no args are given, otherwise return a SQL::PlaceholderLiteralString with the current string …\n"],["lit","Sequel::SQL::Blob","Sequel/SQL/Blob.html#method-i-lit","(*args)","<p>Return a LiteralString with the same content if no args are given, otherwise return a SQL::PlaceholderLiteralString …\n"],["lit","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-lit","(s, *args)","<p>Converts a string into a <code>Sequel::LiteralString</code>, in order to override string literalization, e.g.:\n\n<pre>DB[:items].where(abc: ...</pre>\n"],["literal","Sequel::Database","Sequel/Database.html#method-i-literal","(v)","<p>Proxy the literal call to the dataset.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">literal</span>(<span class=\"ruby-value\">1</span>)   <span class=\"ruby-comment\"># 1</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">literal</span>(<span class=\"ruby-value\">:a</span>)  <span class=\"ruby-comment\"># a</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">literal</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># &#39;a&#39;</span>\n</pre>\n"],["literal_append","Sequel::Dataset","Sequel/Dataset.html#method-i-literal_append","(sql, v)","<p>Append a literal representation of a value to the given SQL string.\n<p>If an unsupported object is given, …\n"],["literal_symbol","Sequel::Database","Sequel/Database.html#method-i-literal_symbol","(sym)","<p>Return the literalized version of the symbol if cached, or nil if it is not cached.\n"],["literal_symbol_append","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-literal_symbol_append","(sql, v)","<p>Changes the values of symbols if they start with $ and prepared_args is present.  If so, they are considered …\n"],["literal_symbol_set","Sequel::Database","Sequel/Database.html#method-i-literal_symbol_set","(sym, lit)","<p>Set the cached value of the literal symbol.\n"],["load","Sequel::Model::Associations::EagerGraphLoader","Sequel/Model/Associations/EagerGraphLoader.html#method-i-load","(hashes)","<p>Return an array of primary model instances with the associations cache prepopulated for all model objects …\n"],["load","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-load","(values)","<p>Calls #call with the values hash.\n"],["load_adapter","Sequel::Database","Sequel/Database.html#method-c-load_adapter","(scheme, opts=OPTS)","<p>Load the adapter from the file system.  Raises Sequel::AdapterNotFound if the adapter cannot be loaded, …\n"],["loader","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-c-loader","(dataset, &block)","<p>Create a PlaceholderLiteralizer by yielding a Recorder and dataset to the given block, recording the …\n"],["loader","Sequel::Dataset::PlaceholderLiteralizer::Recorder","Sequel/Dataset/PlaceholderLiteralizer/Recorder.html#method-i-loader","(dataset, &block)","<p>Yields the receiver and the dataset to the block, which should call #arg on the receiver for each placeholder …\n"],["lock!","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-lock-21","(style=:update)","<p>Refresh this record using <code>for_update</code> (by default, or the specified style when given) unless this is a …\n"],["lock_style","Sequel::Dataset","Sequel/Dataset.html#method-i-lock_style","(style)","<p>Returns a cloned dataset with the given lock style.  If style is a string, it will be used directly. …\n"],["log_connection_yield","Sequel::Database","Sequel/Database.html#method-i-log_connection_yield","(sql, conn, args=nil)","<p>Yield to the block, logging any errors at error level to all loggers, and all other queries with the …\n"],["log_exception","Sequel::Database","Sequel/Database.html#method-i-log_exception","(exception, message)","<p>Log a message at error level, with information about the exception.\n"],["log_info","Sequel::Database","Sequel/Database.html#method-i-log_info","(message, args=nil)","<p>Log a message at level info to all loggers.\n"],["log_sql","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-log_sql","()","<p>Whether to log the full SQL query.  By default, just the prepared statement name is generally logged …\n"],["logger=","Sequel::Database","Sequel/Database.html#method-i-logger-3D","(logger)","<p>Remove any existing loggers and just use the given logger:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-constant\">Logger</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">$stdout</span>)\n</pre>\n"],["many_to_many","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-many_to_many","(name, opts=OPTS, &block)","<p>Shortcut for adding a many_to_many association, see #associate\n"],["many_to_one","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-many_to_one","(name, opts=OPTS, &block)","<p>Shortcut for adding a many_to_one association, see #associate\n"],["map","Sequel::Dataset","Sequel/Dataset.html#method-i-map","(column=nil, &block)","<p>Maps column values for each record in the dataset (if an argument is given) or performs the stock mapping …\n"],["map_to_prepared_args","Sequel::Dataset::UnnumberedArgumentMapper","Sequel/Dataset/UnnumberedArgumentMapper.html#method-i-map_to_prepared_args","(bind_vars)","<p>Returns a single output array mapping the values of the input hash. Keys in the input hash that are used …\n"],["marshallable!","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-marshallable-21","()","<p>Remove elements of the model object that make marshalling fail. Returns self.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">a</span> = <span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>]\n<span class=\"ruby-identifier\">a</span>.<span class=\"ruby-identifier\">marshallable!</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["max","Sequel::Dataset","Sequel/Dataset.html#method-i-max","(arg=(no_arg = true), &block)","<p>Returns the maximum value for the given column/expression. Uses a virtual row block if no argument is …\n"],["max_size","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-max_size","()","<p>The ShardedSingleConnectionPool always has a maximum size of 1.\n"],["max_size","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-i-max_size","()","<p>The SingleConnectionPool always has a maximum size of 1.\n"],["method_missing","Sequel::Migration","Sequel/Migration.html#method-i-method_missing","(method_sym, *args, &block)","<p>Intercepts method calls intended for the database and sends them along.\n"],["method_missing","Sequel::SQL::VirtualRow","Sequel/SQL/VirtualRow.html#method-i-method_missing","(m, *args)","<p>Return an <code>Identifier</code>, <code>QualifiedIdentifier</code>, or <code>Function</code>, depending on arguments and whether a block is …\n"],["method_missing","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-method_missing","(type, name = nil, opts = OPTS)","<p>Add a column with the given type, name, and opts.  See #column for available options.\n"],["migration","Sequel","Sequel.html#method-c-migration","(&block)","<p>The preferred method for writing Sequel migrations, using a DSL:\n\n<pre>Sequel.migration do\n  up do\n    create_table(:artists) ...</pre>\n"],["migrator_class","Sequel::Migrator","Sequel/Migrator.html#method-c-migrator_class","(directory)","<p>Choose the Migrator subclass to use.  Uses the TimestampMigrator if the version number is greater than …\n"],["min","Sequel::Dataset","Sequel/Dataset.html#method-i-min","(arg=(no_arg = true), &block)","<p>Returns the minimum value for the given column/expression. Uses a virtual row block if no argument is …\n"],["model","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-model","()","<p>The model class associated with this dataset\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">dataset</span>.<span class=\"ruby-identifier\">model</span> <span class=\"ruby-comment\"># =&gt; Artist</span>\n</pre>\n"],["model_object","Sequel::Model::Associations::AssociationDatasetMethods","Sequel/Model/Associations/AssociationDatasetMethods.html#method-i-model_object","()","<p>The model object that created the association dataset\n"],["modified!","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-modified-21","(column=nil)","<p>Explicitly mark the object as modified, so <code>save_changes</code>/<code>update</code> will run callbacks even if no columns …\n"],["modified?","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-modified-3F","(column=nil)","<p>Whether this object has been modified since last saved, used by save_changes to determine whether changes …\n"],["multi_insert","Sequel::Dataset","Sequel/Dataset.html#method-i-multi_insert","(hashes, opts=OPTS)","<p>This is a front end for import that allows you to submit an array of hashes instead of arrays of columns …\n"],["multi_insert_sql","Sequel::Dataset","Sequel/Dataset.html#method-i-multi_insert_sql","(columns, values)","<p>Returns an array of insert statements for inserting multiple records. This method is used by <code>multi_insert</code> …\n"],["naked","Sequel::Dataset","Sequel/Dataset.html#method-i-naked","()","<p>Returns a cloned dataset without a row_proc.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ds</span> = <span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">with_row_proc</span>(<span class=\"ruby-value\">:invert</span>.<span class=\"ruby-identifier\">to_proc</span>)\n<span class=\"ruby-identifier\">ds</span>.<span class=\"ruby-identifier\">all</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["need_associated_primary_key?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-need_associated_primary_key-3F","()","<p>Whether the associated object needs a primary key to be added/removed, false by default.\n"],["need_associated_primary_key?","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-need_associated_primary_key-3F","()","<p>Whether the associated object needs a primary key to be added/removed, true for many_to_many associations. …\n"],["negate","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-negate","(arg)","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from the condition specifier, matching none of the conditions. …\n"],["negative_boolean_constant_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-negative_boolean_constant_sql_append","(sql, constant)","<p>Append literalization of negative boolean constant to SQL string.\n"],["new","Sequel::ConnectionPool","Sequel/ConnectionPool.html#method-c-new","(db, opts=OPTS)","<p>Instantiates a connection pool with the given options.  The block is called with a single symbol (specifying …\n"],["new","Sequel::Database","Sequel/Database.html#method-c-new","(opts = OPTS)","<p>Constructs a new instance of a database connection with the specified options hash.\n<p>Accepts the following …\n"],["new","Sequel::Dataset","Sequel/Dataset.html#method-c-new","(db)","<p>Constructs a new Dataset instance with an associated database and  options. Datasets are usually constructed …\n"],["new","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-c-new","(dataset, fragments, final_sql, arity)","<p>Save the dataset, array of SQL fragments, and ending SQL string.\n"],["new","Sequel::Dataset::PlaceholderLiteralizer::Argument","Sequel/Dataset/PlaceholderLiteralizer/Argument.html#method-c-new","(recorder, pos, transformer=nil)","<p>Set the recorder, the argument position, and any transforming block to use for this placeholder.\n"],["new","Sequel::HookFailed","Sequel/HookFailed.html#method-c-new","(message=nil, model=nil)",""],["new","Sequel::IntegerMigrator","Sequel/IntegerMigrator.html#method-c-new","(db, directory, opts=OPTS)","<p>Set up all state for the migrator instance\n"],["new","Sequel::Migration","Sequel/Migration.html#method-c-new","(db)","<p>Set the database associated with this migration.\n"],["new","Sequel::MigrationAlterTableReverser","Sequel/MigrationAlterTableReverser.html#method-c-new","()",""],["new","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-c-new","(&block)","<p>Create a new migration class, and instance_exec the block.\n"],["new","Sequel::MigrationReverser","Sequel/MigrationReverser.html#method-c-new","()",""],["new","Sequel::Migrator","Sequel/Migrator.html#method-c-new","(db, directory, opts=OPTS)","<p>Setup the state for the migrator\n"],["new","Sequel::Model::Associations::EagerGraphLoader","Sequel/Model/Associations/EagerGraphLoader.html#method-c-new","(dataset)","<p>Initialize all of the data structures used during loading.\n"],["new","Sequel::Model::DatasetModule","Sequel/Model/DatasetModule.html#method-c-new","(model)","<p>Store the model related to this dataset module.\n"],["new","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-c-new","(values = OPTS)","<p>Creates new instance and passes the given values to set. If a block is given, yield the instance to the …\n"],["new","Sequel::NoMatchingRow","Sequel/NoMatchingRow.html#method-c-new","(msg=nil)","<p>If the first argument is a Sequel::Dataset, set the dataset related to the exception to that argument, …\n"],["new","Sequel::Qualifier","Sequel/Qualifier.html#method-c-new","(table)","<p>Set the table used to qualify unqualified columns\n"],["new","Sequel::SQL::AliasedExpression","Sequel/SQL/AliasedExpression.html#method-c-new","(expression, aliaz, columns=nil)","<p>Create an object with the given expression, alias, and optional column aliases.\n"],["new","Sequel::SQL::CaseExpression","Sequel/SQL/CaseExpression.html#method-c-new","(conditions, default, expression=(no_expression=true; nil))","<p>Create an object with the given conditions and default value, and optional expression.  An expression …\n"],["new","Sequel::SQL::Cast","Sequel/SQL/Cast.html#method-c-new","(expr, type)","<p>Set the expression and type for the cast\n"],["new","Sequel::SQL::ColumnAll","Sequel/SQL/ColumnAll.html#method-c-new","(table)","<p>Create an object with the given table\n"],["new","Sequel::SQL::ComplexExpression","Sequel/SQL/ComplexExpression.html#method-c-new","(op, *args)","<p>Set the operator symbol and arguments for this object to the ones given. Convert all args that are hashes …\n"],["new","Sequel::SQL::Constant","Sequel/SQL/Constant.html#method-c-new","(constant)","<p>Create a constant with the given value\n"],["new","Sequel::SQL::DelayedEvaluation","Sequel/SQL/DelayedEvaluation.html#method-c-new","(callable)","<p>Set the callable object\n"],["new","Sequel::SQL::Function","Sequel/SQL/Function.html#method-c-new","(name, *args)","<p>Set the name and args for the function\n"],["new","Sequel::SQL::Identifier","Sequel/SQL/Identifier.html#method-c-new","(value)","<p>Set the identifier to the given argument\n"],["new","Sequel::SQL::JoinClause","Sequel/SQL/JoinClause.html#method-c-new","(join_type, table_expr)","<p>Create an object with the given join_type and table expression.\n"],["new","Sequel::SQL::JoinOnClause","Sequel/SQL/JoinOnClause.html#method-c-new","(on, *args)","<p>Create an object with the ON conditions and call super with the remaining args.\n"],["new","Sequel::SQL::JoinUsingClause","Sequel/SQL/JoinUsingClause.html#method-c-new","(cols, *args)","<p>Create an object with the given USING conditions and call super with the remaining args.\n"],["new","Sequel::SQL::OrderedExpression","Sequel/SQL/OrderedExpression.html#method-c-new","(expression, descending = true, opts=OPTS)","<p>Set the expression and descending attributes to the given values. Options:\n<p>:nulls  &mdash; Can be :first/:last …\n\n"],["new","Sequel::SQL::PlaceholderLiteralString","Sequel/SQL/PlaceholderLiteralString.html#method-c-new","(str, args, parens=false)","<p>Create an object with the given string, placeholder arguments, and parens flag.\n"],["new","Sequel::SQL::QualifiedIdentifier","Sequel/SQL/QualifiedIdentifier.html#method-c-new","(table, column)","<p>Set the table and column to the given arguments\n"],["new","Sequel::SQL::Subscript","Sequel/SQL/Subscript.html#method-c-new","(expression, sub)","<p>Set the array column and subscripts to the given arguments\n"],["new","Sequel::SQL::VirtualRow","Sequel/SQL/VirtualRow.html#method-c-new","()",""],["new","Sequel::SQL::Window","Sequel/SQL/Window.html#method-c-new","(opts=OPTS)","<p>Set the options to the options given\n"],["new","Sequel::SQL::Wrapper","Sequel/SQL/Wrapper.html#method-c-new","(value)","<p>Set the value wrapped by the object.\n"],["new","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-c-new","(db, &block)","<p>Set the Database object to which to apply the changes, and evaluate the block in the context of this …\n"],["new","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-c-new","(db, &block)","<p>Set the database in which to create the table, and evaluate the block in the context of this object. …\n"],["new","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-c-new","(db, opts=OPTS)","<p>The single threaded pool takes the following options:\n<p>:servers  &mdash; A hash of servers to use.  Keys should …\n"],["new","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-c-new","(db, opts = OPTS)","<p>The following additional options are respected:\n<p>:servers  &mdash; A hash of servers to use.  Keys should be symbols. …\n"],["new","Sequel::SimpleMigration","Sequel/SimpleMigration.html#method-c-new","()","<p>Don&#39;t set transaction use by default.\n"],["new","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-c-new","(db, opts=OPTS)",""],["new","Sequel::ThreadedConnectionPool","Sequel/ThreadedConnectionPool.html#method-c-new","(db, opts = OPTS)","<p>The following additional options are respected:\n<p>:max_connections  &mdash; The maximum number of connections the …\n"],["new","Sequel::TimestampMigrator","Sequel/TimestampMigrator.html#method-c-new","(db, directory, opts=OPTS)","<p>Set up all state for the migrator instance\n"],["new","Sequel::ValidationFailed","Sequel/ValidationFailed.html#method-c-new","(errors=nil)",""],["new?","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-new-3F","()","<p>Returns true if the current instance represents a new record.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">new?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">new?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["no_primary_key","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-no_primary_key","()","<p>Mark the model as not having a primary key. Not having a primary key can cause issues, among which is …\n"],["no_transaction","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-no_transaction","()","<p>Disable the use of transactions for the related migration\n"],["nowait","Sequel::Dataset","Sequel/Dataset.html#method-i-nowait","()","<p>Returns a copy of the dataset that will raise a DatabaseLockTimeout instead of waiting for rows that …\n"],["object_to_json","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-object_to_json","(obj, *args, &block)","<p>Convert given object to json and return the result. This can be overridden to use an alternative json …\n"],["object_to_json","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-object_to_json","(obj, *args, &block)","<p>Convert given object to json and return the result. This can be overridden to use an alternative json …\n"],["offset","Sequel::Dataset","Sequel/Dataset.html#method-i-offset","(o)","<p>Returns a copy of the dataset with a specified order. Can be safely combined with limit. If you call …\n"],["on","Sequel::Model::Errors","Sequel/Model/Errors.html#method-i-on","(att)","<p>Returns the array of errors for the given attribute, or nil if there are no errors for the attribute. …\n"],["one_through_one","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-one_through_one","(name, opts=OPTS, &block)","<p>Shortcut for adding a one_through_one association, see #associate\n"],["one_to_many","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-one_to_many","(name, opts=OPTS, &block)","<p>Shortcut for adding a one_to_many association, see #associate\n"],["one_to_one","Sequel::Model::Associations::ClassMethods","Sequel/Model/Associations/ClassMethods.html#method-i-one_to_one","(name, opts=OPTS, &block)","<p>Shortcut for adding a one_to_one association, see #associate\n"],["options_overlap","Sequel::Dataset","Sequel/Dataset.html#method-i-options_overlap","(opts)","<p>Return true if the dataset has a non-nil value for any key in opts.\n"],["or","Sequel::Dataset","Sequel/Dataset.html#method-i-or","(*cond, &block)","<p>Adds an alternate filter to an existing WHERE clause using OR.  If there  is no WHERE clause, then the …\n"],["or","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-or","(arg)","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from the condition specifier, matching any of the conditions. …\n"],["order","Sequel::Dataset","Sequel/Dataset.html#method-i-order","(*columns, &block)","<p>Returns a copy of the dataset with the order changed. If the dataset has an existing order, it is ignored …\n"],["order","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-order","(*args)","<p>Return a new function where the function will be ordered.  Only useful for aggregate functions that are …\n"],["order_append","Sequel::Dataset","Sequel/Dataset.html#method-i-order_append","(*columns, &block)","<p>Returns a copy of the dataset with the order columns added to the end of the existing order.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-value\">:a</span>).<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-value\">:b</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["order_by","Sequel::Dataset","Sequel/Dataset.html#method-i-order_by","(*columns, &block)","<p>Alias of order\n"],["order_more","Sequel::Dataset","Sequel/Dataset.html#method-i-order_more","(*columns, &block)","<p>Alias of order_append.\n"],["order_prepend","Sequel::Dataset","Sequel/Dataset.html#method-i-order_prepend","(*columns, &block)","<p>Returns a copy of the dataset with the order columns added to the beginning of the existing order.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-value\">:a</span>).<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-value\">:b</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ordered_expression_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-ordered_expression_sql_append","(sql, oe)","<p>Append literalization of ordered expression to SQL string.\n"],["orig_dataset","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-orig_dataset","()","<p>The dataset that created this prepared statement.\n"],["orig_require","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-orig_require","(files, subdir=nil)","<p>Alias of original require method, as Sequel.require does a relative require for backwards compatibility. …\n"],["orig_require","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-orig_require","(files, subdir=nil)","<p>Alias of original require method, as Sequel.require does a relative require for backwards compatibility. …\n"],["over","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-over","(window=OPTS)","<p>Return a new function with an OVER clause (making it a window function). See Sequel::SQL::Window for …\n"],["paged_each","Sequel::Dataset","Sequel/Dataset.html#method-i-paged_each","(opts=OPTS)","<p>Yields each row in the dataset, but internally uses multiple queries as needed to process the entire …\n"],["paged_each","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-paged_each","(*a, &block)","<p>If there is no order already defined on this dataset, order it by the primary key and call paged_each. …\n"],["parse","Sequel::SQLTime","Sequel/SQLTime.html#method-c-parse","(*)","<p>Set the correct date and timezone when parsing times.\n"],["parse_json","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-parse_json","(json)","<p>Parse the string as JSON and return the result. This can be overridden to use an alternative json implementation. …\n"],["parse_json","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-parse_json","(json)","<p>Parse the string as JSON and return the result. This can be overridden to use an alternative json implementation. …\n"],["pk","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-pk","()","<p>Returns the primary key value identifying the model instance. Raises an <code>Error</code> if this model does not …\n"],["pk_equal?","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-pk_equal-3F","(obj)","<p>If the receiver has a primary key value, returns true if the objects have the same class and primary …\n"],["pk_hash","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-pk_hash","()","<p>Returns a hash mapping the receivers primary key column(s) to their values.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">pk_hash</span> <span class=\"ruby-comment\"># =&gt; {:id=&gt;1} ...</span>\n</pre>\n"],["placeholder_literal_string_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-placeholder_literal_string_sql_append","(sql, pls)","<p>Append literalization of placeholder literal string to SQL string.\n"],["placeholder_loader","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-placeholder_loader","()","<p>A placeholder literalizer that can be used to lazily load the association. If one can&#39;t be used, …\n"],["plugin","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-plugin","(plugin, *args, &block)","<p>Loads a plugin for use with the model class, passing optional arguments to the plugin.  If the plugin …\n"],["plural","Sequel::Inflections","Sequel/Inflections.html#method-c-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular …\n"],["pool_type","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-pool_type","()",""],["pool_type","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-pool_type","()",""],["pool_type","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-i-pool_type","()",""],["pool_type","Sequel::ThreadedConnectionPool","Sequel/ThreadedConnectionPool.html#method-i-pool_type","()",""],["predicate_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-predicate_key","()","<p>The hash key to use for the eager loading predicate (left side of IN (1, 2, 3)). The left key qualified …\n"],["predicate_key","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-predicate_key","()","<p>The expression to use on the left hand side of the IN lookup when eager loading\n"],["predicate_key","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-predicate_key","()","<p>The hash key to use for the eager loading predicate (left side of IN (1, 2, 3))\n"],["predicate_key_values","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-predicate_key_values","(object)","<p>The values that predicate_keys should match for objects to be associated.\n"],["predicate_keys","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-predicate_keys","()","<p>The keys to use for loading of the regular dataset, as an array.\n"],["prepare","Sequel::Dataset","Sequel/Dataset.html#method-i-prepare","(type, name, *values)","<p>Prepare an SQL statement for later execution.  Takes a type similar to #call, and the <code>name</code> symbol of …\n"],["prepare","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-prepare","(*)","<p>Raise an error if attempting to call prepare on an already prepared statement.\n"],["prepared_args","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-prepared_args","()","<p>The array/hash of bound variable placeholder names.\n"],["prepared_modify_values","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-prepared_modify_values","()","<p>The argument to supply to insert and update, which may use placeholders specified by prepared_args\n"],["prepared_sql","Sequel::Dataset::ArgumentMapper","Sequel/Dataset/ArgumentMapper.html#method-i-prepared_sql","()","<p>Override the given *_sql method based on the type, and cache the result of the sql.\n"],["prepared_sql","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-prepared_sql","()","<p>Returns the SQL for the prepared statement, depending on the type of the statement and the prepared_modify_values. …\n"],["prepared_statement","Sequel::Database","Sequel/Database.html#method-i-prepared_statement","(name)","<p>Synchronize access to the prepared statements cache.\n"],["prepared_statement_name","Sequel::Dataset::ArgumentMapper","Sequel/Dataset/ArgumentMapper.html#method-i-prepared_statement_name","()","<p>The name of the prepared statement, if any.\n"],["prepared_type","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-prepared_type","()","<p>The type of prepared statement, should be one of :select, :first, :insert, :update, :delete, or :single_value …\n"],["primary_key","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-primary_key","()","<p>The column(s) in the associated table that the key in the current table references (either a symbol or …\n"],["primary_key","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-primary_key","()","<p>The column in the current table that the key in the associated table references.\n"],["primary_key","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-primary_key","(name, *args)","<p>Adds an autoincrementing primary key column or a primary key constraint. To just create a constraint, …\n"],["primary_key_hash","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-primary_key_hash","(value)","<p>Returns primary key attribute hash.  If using a composite primary key value such be an array with values …\n"],["primary_key_method","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-primary_key_method","()","<p>The method symbol or array of method symbols to call on the associated object to get the value to use …\n"],["primary_key_methods","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-primary_key_methods","()","<p>The array of method symbols to call on the associated object to get the value to use for the foreign …\n"],["primary_key_name","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-primary_key_name","()","<p>The name of the primary key for this generator, if it has a primary key.\n"],["primary_keys","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-primary_keys","()","<p>The columns in the associated table that the key in the current table references (always an array).\n"],["provides_accurate_rows_matched?","Sequel::Dataset","Sequel/Dataset.html#method-i-provides_accurate_rows_matched-3F","()","<p>Whether this dataset will provide accurate number of rows matched for delete and update statements, true …\n"],["qualified_identifier_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-qualified_identifier_sql_append","(sql, table, column=(c = table.column; table = table.table; c))","<p>Append literalization of qualified identifier to SQL string. If 3 arguments are given, the 2nd should …\n"],["qualified_key","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-qualified_key","()",""],["qualified_left_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-qualified_left_key","()",""],["qualified_pk_hash","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-qualified_pk_hash","(qualifier=model.table_name)","<p>Returns a hash mapping the receivers qualified primary key column(s) to their values.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">qualified_pk_hash</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["qualified_primary_key","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-qualified_primary_key","()","<p>primary_key qualified by the associated table\n"],["qualified_primary_key","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-qualified_primary_key","()","<p>primary_key qualified by the current table\n"],["qualified_primary_key_hash","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-qualified_primary_key_hash","(value, qualifier=table_name)","<p>Return a hash where the keys are qualified column references.  Uses the given qualifier if provided, …\n"],["qualified_right_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-qualified_right_key","()","<p>The right key qualified by the join table.\n"],["qualified_right_primary_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-qualified_right_primary_key","()","<p>right_primary_key qualified by the associated table\n"],["qualify","Sequel::Dataset","Sequel/Dataset.html#method-i-qualify","(table=(cache=true; first_source))","<p>Qualify to the given table, or first source if no table is given.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-value\">id:</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">qualify</span>\n<span class=\"ruby-comment\"># SELECT ...</span>\n</pre>\n"],["qualify","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-qualify","(table, col)","<p>Qualify <code>col</code> with the given table name.\n"],["qualify","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-qualify","(qualifier, identifier)","<p>Create a qualified identifier with the given qualifier and identifier\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">qualify</span>(<span class=\"ruby-value\">:table</span>, <span class=\"ruby-value\">:column</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["qualify","Sequel::SQL::QualifyingMethods","Sequel/SQL/QualifyingMethods.html#method-i-qualify","(qualifier)","<p>Qualify the receiver with the given <code>qualifier</code> (table for column/schema for table).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:column</span>].<span class=\"ruby-identifier\">qualify</span>(<span class=\"ruby-value\">:table</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["qualify_assoc","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-qualify_assoc","(col)","<p>Qualify col with the associated model&#39;s table name.\n"],["qualify_cur","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-qualify_cur","(col)","<p>Qualify col with the current model&#39;s table name.\n"],["quote_identifier","Sequel::Database","Sequel/Database.html#method-i-quote_identifier","(v)","<p>Proxy the quote_identifier method to the dataset, useful for quoting unqualified identifiers for use …\n"],["quote_identifier_append","Sequel::Dataset","Sequel/Dataset.html#method-i-quote_identifier_append","(sql, name)","<p>Append literalization of unqualified identifier to SQL string. Adds quoting to identifiers (columns and …\n"],["quote_identifiers?","Sequel::Dataset","Sequel/Dataset.html#method-i-quote_identifiers-3F","()","<p>Whether this dataset quotes identifiers.\n"],["quote_schema_table_append","Sequel::Dataset","Sequel/Dataset.html#method-i-quote_schema_table_append","(sql, table)","<p>Append literalization of identifier or unqualified identifier to SQL string.\n"],["quoted","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-quoted","()","<p>Return a new function where the function name will be quoted if the database supports quoted functions: …\n"],["quoted_identifier_append","Sequel::Dataset","Sequel/Dataset.html#method-i-quoted_identifier_append","(sql, name)","<p>Append literalization of quoted identifier to SQL string. This method quotes the given name with the …\n"],["reciprocal","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-reciprocal","()","<p>Returns the reciprocal association variable, if one exists. The reciprocal association is the association …\n"],["reciprocal","Sequel::Model::Associations::OneThroughOneAssociationReflection","Sequel/Model/Associations/OneThroughOneAssociationReflection.html#method-i-reciprocal","()","<p>one_through_one associations have no reciprocals\n"],["reciprocal_array?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-reciprocal_array-3F","()","<p>Whether the reciprocal of this association returns an array of objects instead of a single object, true …\n"],["reciprocal_array?","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-reciprocal_array-3F","()","<p>True only if the reciprocal is a one_to_many association.\n"],["reciprocal_array?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-reciprocal_array-3F","()","<p>Whether the reciprocal of this association returns an array of objects instead of a single object, false …\n"],["recursive_cte_requires_column_aliases?","Sequel::Dataset","Sequel/Dataset.html#method-i-recursive_cte_requires_column_aliases-3F","()","<p>Whether you must use a column alias list for recursive CTEs, false by default.\n"],["recursive_map","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-recursive_map","(array, converter)","<p>Convert each item in the array to the correct type, handling multi-dimensional arrays.  For each element …\n"],["recursive_map","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-recursive_map","(array, converter)","<p>Convert each item in the array to the correct type, handling multi-dimensional arrays.  For each element …\n"],["refresh","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-refresh","()","<p>Reloads attributes from database and returns self. Also clears all changed_columns information.  Raises …\n"],["register_extension","Sequel::Database","Sequel/Database.html#method-c-register_extension","(ext, mod=nil, &block)","<p>Register an extension callback for Database objects.  ext should be the extension name symbol, and mod …\n"],["register_extension","Sequel::Dataset","Sequel/Dataset.html#method-c-register_extension","(ext, mod=nil, &block)","<p>Register an extension callback for Dataset objects.  ext should be the extension name symbol, and mod …\n"],["reload","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-reload","()","<p>Alias of refresh, but not aliased directly to make overriding in a plugin easier.\n"],["remove_all_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-remove_all_method","()","<p>Name symbol for the remove_all_ association method\n"],["remove_before_destroy?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-remove_before_destroy-3F","()","<p>Whether associated objects need to be removed from the association before being destroyed in order to …\n"],["remove_before_destroy?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-remove_before_destroy-3F","()","<p>Destroying one_to_many associated objects automatically deletes the foreign key.\n"],["remove_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-remove_method","()","<p>Name symbol for the remove_ association method\n"],["remove_servers","Sequel::Database","Sequel/Database.html#method-i-remove_servers","(*servers)","<p>Dynamically remove existing servers from the connection pool. Only usable when using a sharded connection …\n"],["remove_servers","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-remove_servers","(servers)","<p>Remove servers from the connection pool. Similar to disconnecting from all given servers, except that …\n"],["remove_servers","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-remove_servers","(servers)","<p>Remove servers from the connection pool. Similar to disconnecting from all given servers, except that …\n"],["remove_should_check_existing?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-remove_should_check_existing-3F","()","<p>Whether to check that an object to be disassociated is already associated to this object, false by default. …\n"],["remove_should_check_existing?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-remove_should_check_existing-3F","()","<p>The one_to_many association needs to check that an object to be removed already is associated.\n"],["rename_column","Sequel::Database","Sequel/Database.html#method-i-rename_column","(table, *args)","<p>Renames a column in the specified table. This method expects the current column name and the new column …\n"],["rename_column","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-rename_column","(name, new_name, opts = OPTS)","<p>Rename one of the table&#39;s columns.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rename_column</span>(<span class=\"ruby-value\">:name</span>, <span class=\"ruby-value\">:artist_name</span>) <span class=\"ruby-comment\"># RENAME COLUMN name TO artist_name</span>\n</pre>\n"],["rename_table","Sequel::Database","Sequel/Database.html#method-i-rename_table","(name, new_name)","<p>Renames a table:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">tables</span> <span class=\"ruby-comment\">#=&gt; [:items]</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">rename_table</span> <span class=\"ruby-value\">:items</span>, <span class=\"ruby-value\">:old_items</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">tables</span> <span class=\"ruby-comment\">#=&gt; [:old_items]</span>\n</pre>\n"],["require","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-require","(files, subdir=nil)","<p>For backwards compatibility only.  require_relative should be used instead.\n"],["require","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-require","(files, subdir=nil)","<p>For backwards compatibility only.  require_relative should be used instead.\n"],["requires_placeholder_type_specifiers?","Sequel::Dataset","Sequel/Dataset.html#method-i-requires_placeholder_type_specifiers-3F","()","<p>Whether type specifiers are required for prepared statement/bound variable argument placeholders (i.e. …\n"],["requires_sql_standard_datetimes?","Sequel::Dataset","Sequel/Dataset.html#method-i-requires_sql_standard_datetimes-3F","()","<p>Whether the dataset requires SQL standard datetimes. False by default, as most allow strings with ISO …\n"],["respond_to_missing?","Sequel::Migration","Sequel/Migration.html#method-i-respond_to_missing-3F","(meth, include_private)","<p>This object responds to all methods the database responds to.\n"],["respond_to_missing?","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-respond_to_missing-3F","(meth, include_private)","<p>This object responds to all methods.\n"],["restrict_primary_key","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-restrict_primary_key","()","<p>Restrict the setting of the primary key(s) when using mass assignment (e.g. <code>set</code>).  Because this is the …\n"],["restrict_primary_key?","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-restrict_primary_key-3F","()","<p>Whether or not setting the primary key(s) when using mass assignment (e.g. <code>set</code>) is restricted, true by …\n"],["returning","Sequel::Dataset","Sequel/Dataset.html#method-i-returning","(*values)","<p>Modify the RETURNING clause, only supported on a few databases.  If returning is used, instead of insert …\n"],["returns_array?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-returns_array-3F","()","<p>Whether this association returns an array of objects instead of a single object, true by default.\n"],["returns_array?","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-returns_array-3F","()","<p>Whether this association returns an array of objects instead of a single object, false for a many_to_one …\n"],["returns_array?","Sequel::Model::Associations::SingularAssociationReflection","Sequel/Model/Associations/SingularAssociationReflection.html#method-i-returns_array-3F","()","<p>Singular associations always return a single object, not an array.\n"],["reverse","Sequel::Dataset","Sequel/Dataset.html#method-i-reverse","(*order, &block)","<p>Returns a copy of the dataset with the order reversed. If no order is given, the existing order is inverted. …\n"],["reverse","Sequel::MigrationAlterTableReverser","Sequel/MigrationAlterTableReverser.html#method-i-reverse","(&block)",""],["reverse","Sequel::MigrationReverser","Sequel/MigrationReverser.html#method-i-reverse","(&block)","<p>Reverse the actions for the given block.  Takes the block given and returns a new block that reverses …\n"],["reverse_order","Sequel::Dataset","Sequel/Dataset.html#method-i-reverse_order","(*order, &block)","<p>Alias of <code>reverse</code>\n"],["right_primary_key","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-right_primary_key","()","<p>The primary key column(s) to use in the associated table (can be symbol or array).\n"],["right_primary_key_method","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-right_primary_key_method","()","<p>The method symbol or array of method symbols to call on the associated objects to get the foreign key …\n"],["right_primary_key_methods","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-right_primary_key_methods","()","<p>The array of method symbols to call on the associated objects to get the foreign key values for the join …\n"],["right_primary_keys","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-right_primary_keys","()","<p>The primary key columns to use in the associated table (always array).\n"],["rollback_checker","Sequel::Database","Sequel/Database.html#method-i-rollback_checker","(opts=OPTS)","<p>Returns a proc that you can call to check if the transaction has been rolled back.  The proc will return …\n"],["rollback_on_exit","Sequel::Database","Sequel/Database.html#method-i-rollback_on_exit","(opts=OPTS)","<p>When exiting the transaction block through methods other than an exception (e.g. normal exit, non-local …\n"],["row_number_column","Sequel::Dataset","Sequel/Dataset.html#method-i-row_number_column","()","<p>The alias to use for the row_number column, used when emulating OFFSET support and for eager limit strategies …\n"],["row_proc","Sequel::Dataset","Sequel/Dataset.html#method-i-row_proc","()","<p>The row_proc for this database, should be any object that responds to <code>call</code> with a single hash argument …\n"],["run","Sequel::Database","Sequel/Database.html#method-i-run","(sql, opts=OPTS)","<p>Runs the supplied SQL statement string on the database server. Returns nil. Options:\n<p>:server  &mdash; The server …\n\n"],["run","Sequel::Dataset::EmulatePreparedStatementMethods","Sequel/Dataset/EmulatePreparedStatementMethods.html#method-i-run","(&block)",""],["run","Sequel::Dataset::PreparedStatementMethods","Sequel/Dataset/PreparedStatementMethods.html#method-i-run","(&block)","<p>Run the method based on the type of prepared statement.\n"],["run","Sequel::IntegerMigrator","Sequel/IntegerMigrator.html#method-i-run","()","<p>Apply all migrations on the database\n"],["run","Sequel::Migrator","Sequel/Migrator.html#method-c-run","(db, directory, opts=OPTS)","<p>Migrates the supplied database using the migration files in the specified directory. Options:\n<p>:allow_missing_migration_files … &mdash; "],["run","Sequel::TimestampMigrator","Sequel/TimestampMigrator.html#method-i-run","()","<p>Apply all migration tuples on the database\n"],["run_after_initialize","Sequel::Database","Sequel/Database.html#method-c-run_after_initialize","(instance)","<p>Run the after_initialize hook for the given <code>instance</code>.\n"],["save","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-save","(opts=OPTS)","<p>Creates or updates the record, after making sure the record is valid and before hooks execute successfully. …\n"],["save_changes","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-save_changes","(opts=OPTS)","<p>Saves only changed columns if the object has been modified. If the object has not been modified, returns …\n"],["schema","Sequel::Database","Sequel/Database.html#method-i-schema","(table, opts=OPTS)","<p>Returns the schema for the given table as an array with all members being arrays of length 2, the first …\n"],["schema_and_table","Sequel::Dataset","Sequel/Dataset.html#method-i-schema_and_table","(table_name, sch=nil)","<p>Split the schema information from the table, returning two strings, one for the schema and one for the …\n"],["schema_type_class","Sequel::Database","Sequel/Database.html#method-i-schema_type_class","(type)","<p>Return ruby class or array of classes for the given type symbol.\n"],["select","Sequel::Database","Sequel/Database.html#method-i-select","(*args, &block)","<p>Returns a new dataset with the select method invoked.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">select</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># SELECT 1</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">select</span>{<span class=\"ruby-identifier\">server_version</span>.<span class=\"ruby-identifier\">function</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["select","Sequel::Dataset","Sequel/Dataset.html#method-i-select","(*columns, &block)","<p>Returns a copy of the dataset with the columns selected changed to the given columns. This also takes …\n"],["select","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-select","()","<p>The columns to select when loading the association.\n"],["select","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-select","()","<p>The columns to select when loading the association, associated_class.table_name.* by default.\n"],["select_all","Sequel::Dataset","Sequel/Dataset.html#method-i-select_all","(*tables)","<p>Returns a copy of the dataset selecting the wildcard if no arguments are given.  If arguments are given, …\n"],["select_append","Sequel::Dataset","Sequel/Dataset.html#method-i-select_append","(*columns, &block)","<p>Returns a copy of the dataset with the given columns added to the existing selected columns.  If no columns …\n"],["select_group","Sequel::Dataset","Sequel/Dataset.html#method-i-select_group","(*columns, &block)","<p>Set both the select and group clauses with the given <code>columns</code>. Column aliases may be supplied, and will …\n"],["select_hash","Sequel::Dataset","Sequel/Dataset.html#method-i-select_hash","(key_column, value_column, opts = OPTS)","<p>Returns a hash with key_column values as keys and value_column values as values.  Similar to as_hash …\n"],["select_hash_groups","Sequel::Dataset","Sequel/Dataset.html#method-i-select_hash_groups","(key_column, value_column, opts = OPTS)","<p>Returns a hash with key_column values as keys and an array of value_column values. Similar to to_hash_groups …\n"],["select_map","Sequel::Dataset","Sequel/Dataset.html#method-i-select_map","(column=nil, &block)","<p>Selects the column given (either as an argument or as a block), and returns an array of all values of …\n"],["select_more","Sequel::Dataset","Sequel/Dataset.html#method-i-select_more","(*columns, &block)","<p>Alias for select_append.\n"],["select_order_map","Sequel::Dataset","Sequel/Dataset.html#method-i-select_order_map","(column=nil, &block)","<p>The same as select_map, but in addition orders the array by the column.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>].<span class=\"ruby-identifier\">select_order_map</span>(<span class=\"ruby-value\">:id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["separate_query_per_table?","Sequel::Model::Associations::ManyToManyAssociationReflection","Sequel/Model/Associations/ManyToManyAssociationReflection.html#method-i-separate_query_per_table-3F","()","<p>Whether a separate query should be used for the join table.\n"],["serial_primary_key_options","Sequel::Database","Sequel/Database.html#method-i-serial_primary_key_options","()","<p>Default serial primary key options, used by the table creation code.\n"],["server","Sequel::Dataset","Sequel/Dataset.html#method-i-server","(servr)","<p>Set the server for this dataset to use.  Used to pick a specific database shard to run a query against, …\n"],["server?","Sequel::Dataset","Sequel/Dataset.html#method-i-server-3F","(server)","<p>If the database uses sharding and the current dataset has not had a server set, return a cloned dataset …\n"],["servers","Sequel::ConnectionPool","Sequel/ConnectionPool.html#method-i-servers","()","<p>An array of symbols for all shards/servers, which is a single <code>:default</code> by default.\n"],["servers","Sequel::Database","Sequel/Database.html#method-i-servers","()","<p>An array of servers/shards for this Database object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">servers</span> <span class=\"ruby-comment\"># Unsharded: =&gt; [:default]</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">servers</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["servers","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-servers","()","<p>Return an array of symbols for servers in the connection pool.\n"],["servers","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-servers","()","<p>Return an array of symbols for servers in the connection pool.\n"],["set","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-set","(hash)","<p>Updates the instance with the supplied values with support for virtual attributes, raising an exception …\n"],["set_column_allow_null","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-set_column_allow_null","(name, allow_null=true)","<p>Set a given column as allowing NULL values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set_column_allow_null</span>(<span class=\"ruby-value\">:artist_name</span>) <span class=\"ruby-comment\"># ALTER COLUMN artist_name ...</span>\n</pre>\n"],["set_column_default","Sequel::Database","Sequel/Database.html#method-i-set_column_default","(table, *args)","<p>Sets the default value for the given column in the given table:\n\n<pre>DB.set_column_default :items, :category, ...</pre>\n"],["set_column_default","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-set_column_default","(name, default)","<p>Modify the default value for one of the table&#39;s column.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set_column_default</span>(<span class=\"ruby-value\">:artist_name</span>, <span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># ALTER ...</span>\n</pre>\n"],["set_column_not_null","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-set_column_not_null","(name)","<p>Set a given column as not allowing NULL values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set_column_not_null</span>(<span class=\"ruby-value\">:artist_name</span>) <span class=\"ruby-comment\"># ALTER COLUMN artist_name ...</span>\n</pre>\n"],["set_column_type","Sequel::Database","Sequel/Database.html#method-i-set_column_type","(table, *args)","<p>Set the data type for the given column in the given table:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">set_column_type</span> <span class=\"ruby-value\">:items</span>, <span class=\"ruby-value\">:price</span>, <span class=\"ruby-value\">:float</span>\n</pre>\n<p>See …\n"],["set_column_type","Sequel::Schema::AlterTableGenerator","Sequel/Schema/AlterTableGenerator.html#method-i-set_column_type","(name, type, opts=OPTS)","<p>Modify the type of one of the table&#39;s column.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">set_column_type</span>(<span class=\"ruby-value\">:artist_name</span>, <span class=\"ruby-string\">&#39;char(10)&#39;</span>) <span class=\"ruby-comment\"># ALTER COLUMN ...</span>\n</pre>\n"],["set_dataset","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-set_dataset","(ds, opts=OPTS)","<p>Sets the dataset associated with the Model class. <code>ds</code> can be a <code>Symbol</code>, <code>LiteralString</code>, <code>SQL::Identifier</code> …\n"],["set_fields","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-set_fields","(hash, fields, opts=nil)","<p>For each of the fields in the given array <code>fields</code>, call the setter method with the value of that <code>hash</code> …\n"],["set_graph_aliases","Sequel::Dataset","Sequel/Dataset.html#method-i-set_graph_aliases","(graph_aliases)","<p>This allows you to manually specify the graph aliases to use when using graph.  You can use it to only …\n"],["set_prepared_statement","Sequel::Database","Sequel/Database.html#method-i-set_prepared_statement","(name, ps)","<p>Cache the prepared statement object at the given name.\n"],["set_primary_key","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-set_primary_key","(key)","<p>Sets the primary key for this model. You can use either a regular  or a composite primary key.  To not …\n"],["set_reciprocal_to_self?","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-set_reciprocal_to_self-3F","()","<p>Whether to set the reciprocal association to self when loading associated records, false by default. …\n"],["set_reciprocal_to_self?","Sequel::Model::Associations::ManyToOneAssociationReflection","Sequel/Model/Associations/ManyToOneAssociationReflection.html#method-i-set_reciprocal_to_self-3F","()","<p>True only if the reciprocal is a one_to_one association.\n"],["set_reciprocal_to_self?","Sequel::Model::Associations::OneToManyAssociationReflection","Sequel/Model/Associations/OneToManyAssociationReflection.html#method-i-set_reciprocal_to_self-3F","()","<p>One to many associations set the reciprocal to self when loading associated records.\n"],["set_server","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-set_server","(s)","<p>Set the shard that this object is tied to.  Returns self.\n"],["set_shared_adapter_scheme","Sequel::Database","Sequel/Database.html#method-c-set_shared_adapter_scheme","(scheme, mod)","<p>Sets the given module as the shared adapter module for the given scheme. Used to register shared adapters …\n"],["setter_method","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-setter_method","()","<p>Name symbol for the setter association method\n"],["setter_methods","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-setter_methods","()","<p>Cache of setter methods to allow by default, in order to speed up mass assignment.\n"],["sharded?","Sequel::Database","Sequel/Database.html#method-i-sharded-3F","()","<p>Whether this database instance uses multiple servers, either for sharding or for primary/replica configurations. …\n"],["simple_select_all?","Sequel::Dataset","Sequel/Dataset.html#method-i-simple_select_all-3F","()","<p>Whether this dataset is a simple select from an underlying table, such as:\n\n<pre>SELECT * FROM table\nSELECT ...</pre>\n"],["single_record","Sequel::Dataset","Sequel/Dataset.html#method-i-single_record","()","<p>Limits the dataset to one record, and returns the first record in the dataset, or nil if the dataset …\n"],["single_record!","Sequel::Dataset","Sequel/Dataset.html#method-i-single_record-21","()","<p>Returns the first record in dataset, without limiting the dataset. Returns nil if the dataset has no …\n"],["single_threaded?","Sequel::Database","Sequel/Database.html#method-i-single_threaded-3F","()","<p>Returns true if the database is using a single-threaded connection pool.\n"],["single_value","Sequel::Dataset","Sequel/Dataset.html#method-i-single_value","()","<p>Returns the first value of the first record in the dataset. Returns nil if dataset is empty.  Users should …\n"],["single_value!","Sequel::Dataset","Sequel/Dataset.html#method-i-single_value-21","()","<p>Returns the first value of the first record in the dataset, without limiting the dataset. Returns nil …\n"],["single_value_ds","Sequel::Dataset","Sequel/Dataset.html#method-i-single_value_ds","()","<p>A dataset for returning single values from the current dataset.\n"],["singleton_method_added","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-singleton_method_added","(meth)","<p>Clear the setter_methods cache when a method is added\n"],["singular","Sequel::Inflections","Sequel/Inflections.html#method-c-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can either be a string or a regular …\n"],["size","Sequel::ShardedSingleConnectionPool","Sequel/ShardedSingleConnectionPool.html#method-i-size","()","<p>The number of different shards/servers this pool is connected to.\n"],["size","Sequel::ShardedThreadedConnectionPool","Sequel/ShardedThreadedConnectionPool.html#method-i-size","(server=:default)","<p>The total number of connections opened for the given server. Nonexistent servers will return the created …\n"],["size","Sequel::SingleConnectionPool","Sequel/SingleConnectionPool.html#method-i-size","()","<p>The SingleConnectionPool always has a size of 1 if connected and 0 if not.\n"],["size","Sequel::ThreadedConnectionPool","Sequel/ThreadedConnectionPool.html#method-i-size","()","<p>The total number of connections opened, either available or allocated. The calling code should not have …\n"],["skip_limit_check","Sequel::Dataset","Sequel/Dataset.html#method-i-skip_limit_check","()","<p>Specify that the check for limits/offsets when updating/deleting be skipped for the dataset.\n"],["skip_locked","Sequel::Dataset","Sequel/Dataset.html#method-i-skip_locked","()","<p>Skip locked rows when returning results from this dataset.\n"],["skip_validation_on_next_save!","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-skip_validation_on_next_save-21","()","<p>Skip all validation of the object on the next call to #save, including the running of validation hooks. …\n"],["slice_range","Sequel::Model::Associations::AssociationReflection","Sequel/Model/Associations/AssociationReflection.html#method-i-slice_range","(limit_and_offset = limit_and_offset())","<p>The range used for slicing when using the :ruby eager limit strategy.\n"],["spatial_index","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-spatial_index","(columns, opts = OPTS)","<p>Add a spatial index on the given columns. See #index for additional options.\n"],["split_alias","Sequel::Dataset","Sequel/Dataset.html#method-i-split_alias","(c)","<p>Splits a possible implicit alias in <code>c</code>, handling both SQL::AliasedExpressions and Symbols.  Returns an …\n"],["split_qualifiers","Sequel::Dataset","Sequel/Dataset.html#method-i-split_qualifiers","(table_name, *args)","<p>Splits table_name into an array of strings.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ds</span>.<span class=\"ruby-identifier\">split_qualifiers</span>(<span class=\"ruby-value\">:s</span>) <span class=\"ruby-comment\"># [&#39;s&#39;]</span>\n<span class=\"ruby-identifier\">ds</span>.<span class=\"ruby-identifier\">split_qualifiers</span>(<span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:t</span>][<span class=\"ruby-value\">:s</span>]) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["split_symbol","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-split_symbol","(sym)","<p>Splits the symbol into three parts, if symbol splitting is enabled (not the default). Each part will …\n"],["split_symbol","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-split_symbol","(sym)","<p>Splits the symbol into three parts, if symbol splitting is enabled (not the default). Each part will …\n"],["split_symbols=","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-split_symbols-3D","(v)","<p>Setting this to true enables Sequel&#39;s historical behavior of splitting symbols on double or triple …\n"],["split_symbols=","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-split_symbols-3D","(v)","<p>Setting this to true enables Sequel&#39;s historical behavior of splitting symbols on double or triple …\n"],["split_symbols?","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-split_symbols-3F","()","<p>Whether Sequel currently splits symbols into qualified/aliased identifiers.\n"],["split_symbols?","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-split_symbols-3F","()","<p>Whether Sequel currently splits symbols into qualified/aliased identifiers.\n"],["sql","Sequel::Dataset","Sequel/Dataset.html#method-i-sql","()","<p>Same as <code>select_sql</code>, not aliased directly to make subclassing simpler.\n"],["sql","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-sql","(*args)","<p>Return the SQL query to use for the given arguments.\n"],["sql_boolean","Sequel::SQL::BooleanExpression","Sequel/SQL/BooleanExpression.html#method-i-sql_boolean","()","<p>Return self instead of creating a new object to save on memory.\n"],["sql_boolean","Sequel::SQL::ComplexExpression","Sequel/SQL/ComplexExpression.html#method-i-sql_boolean","()","<p>Return a BooleanExpression with the same op and args.\n"],["sql_boolean","Sequel::SQL::ComplexExpressionMethods","Sequel/SQL/ComplexExpressionMethods.html#method-i-sql_boolean","()","<p>Return a BooleanExpression representation of <code>self</code>.\n"],["sql_literal_append","Sequel::Dataset::PlaceholderLiteralizer::Argument","Sequel/Dataset/PlaceholderLiteralizer/Argument.html#method-i-sql_literal_append","(ds, sql)","<p>Record the SQL query offset, argument position, and transforming block where the argument should be literalized. …\n"],["sql_number","Sequel::SQL::ComplexExpression","Sequel/SQL/ComplexExpression.html#method-i-sql_number","()","<p>Return a NumericExpression with the same op and args.\n"],["sql_number","Sequel::SQL::ComplexExpressionMethods","Sequel/SQL/ComplexExpressionMethods.html#method-i-sql_number","()","<p>Return a NumericExpression representation of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">~</span><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>] <span class=\"ruby-comment\"># NOT &quot;a&quot;</span>\n<span class=\"ruby-operator\">~</span>(<span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>].<span class=\"ruby-identifier\">sql_number</span>) <span class=\"ruby-comment\"># ~&quot;a&quot;</span>\n</pre>\n"],["sql_number","Sequel::SQL::NumericExpression","Sequel/SQL/NumericExpression.html#method-i-sql_number","()","<p>Return self instead of creating a new object to save on memory.\n"],["sql_string","Sequel::SQL::ComplexExpression","Sequel/SQL/ComplexExpression.html#method-i-sql_string","()","<p>Return a StringExpression with the same op and args.\n"],["sql_string","Sequel::SQL::ComplexExpressionMethods","Sequel/SQL/ComplexExpressionMethods.html#method-i-sql_string","()","<p>Return a StringExpression representation of <code>self</code>.\n\n<pre>Sequel[:a] + :b # &quot;a&quot; + &quot;b&quot;\nSequel[:a].sql_string + ...</pre>\n"],["sql_string","Sequel::SQL::StringExpression","Sequel/SQL/StringExpression.html#method-i-sql_string","()","<p>Return self instead of creating a new object to save on memory.\n"],["sql_subscript","Sequel::SQL::SubscriptMethods","Sequel/SQL/SubscriptMethods.html#method-i-sql_subscript","(*sub)","<p>Return a <code>Subscript</code> with the given arguments, representing an SQL array access.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:array</span>].<span class=\"ruby-identifier\">sql_subscript</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["start_timer","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-start_timer","()","<p>A timer object that can be passed to Sequel.elapsed_seconds_since to return the number of seconds elapsed. …\n"],["start_timer","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-start_timer","()","<p>A timer object that can be passed to Sequel.elapsed_seconds_since to return the number of seconds elapsed. …\n"],["string_to_date","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-string_to_date","(string)","<p>Converts the given <code>string</code> into a <code>Date</code> object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">string_to_date</span>(<span class=\"ruby-string\">&#39;2010-09-10&#39;</span>) <span class=\"ruby-comment\"># Date.civil(2010, 09, ...</span>\n</pre>\n"],["string_to_date","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-string_to_date","(string)","<p>Converts the given <code>string</code> into a <code>Date</code> object.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">string_to_date</span>(<span class=\"ruby-string\">&#39;2010-09-10&#39;</span>) <span class=\"ruby-comment\"># Date.civil(2010, 09, ...</span>\n</pre>\n"],["string_to_datetime","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-string_to_datetime","(string)","<p>Converts the given <code>string</code> into a <code>Time</code> or <code>DateTime</code> object, depending on the value of <code>Sequel.datetime_class</code> …\n"],["string_to_datetime","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-string_to_datetime","(string)","<p>Converts the given <code>string</code> into a <code>Time</code> or <code>DateTime</code> object, depending on the value of <code>Sequel.datetime_class</code> …\n"],["string_to_time","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-string_to_time","(string)","<p>Converts the given <code>string</code> into a <code>Sequel::SQLTime</code> object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">v</span> = <span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">string_to_time</span>(<span class=\"ruby-string\">&#39;10:20:30&#39;</span>) <span class=\"ruby-comment\"># Sequel::SQLTime.parse(&#39;10:20:30&#39;) ...</span>\n</pre>\n"],["string_to_time","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-string_to_time","(string)","<p>Converts the given <code>string</code> into a <code>Sequel::SQLTime</code> object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">v</span> = <span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">string_to_time</span>(<span class=\"ruby-string\">&#39;10:20:30&#39;</span>) <span class=\"ruby-comment\"># Sequel::SQLTime.parse(&#39;10:20:30&#39;) ...</span>\n</pre>\n"],["subscript","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-subscript","(exp, *subs)","<p>Return an <code>SQL::Subscript</code> with the given arguments, representing an SQL array access.\n\n<pre>Sequel.subscript(:array, ...</pre>\n"],["subscript_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-subscript_sql_append","(sql, s)","<p>Append literalization of subscripts (SQL array accesses) to SQL string.\n"],["subset","Sequel::Model::DatasetModule","Sequel/Model/DatasetModule.html#method-i-subset","(name, *args, &block)","<p>Alias for where.\n"],["sum","Sequel::Dataset","Sequel/Dataset.html#method-i-sum","(arg=(no_arg = true), &block)","<p>Returns the sum for the given column/expression. Uses a virtual row block if no column is given.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>].<span class=\"ruby-identifier\">sum</span>(<span class=\"ruby-value\">:id</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["supports_create_table_if_not_exists?","Sequel::Database","Sequel/Database.html#method-i-supports_create_table_if_not_exists-3F","()","<p>Whether the database supports CREATE TABLE IF NOT EXISTS syntax, false by default.\n"],["supports_cte?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_cte-3F","(type=:select)","<p>Whether the dataset supports common table expressions, false by default. If given, <code>type</code> can be :select, …\n"],["supports_cte_in_subqueries?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_cte_in_subqueries-3F","()","<p>Whether the dataset supports common table expressions in subqueries, false by default. If false, applies …\n"],["supports_deferrable_constraints?","Sequel::Database","Sequel/Database.html#method-i-supports_deferrable_constraints-3F","()","<p>Whether the database supports deferrable constraints, false by default as few databases do.\n"],["supports_deferrable_foreign_key_constraints?","Sequel::Database","Sequel/Database.html#method-i-supports_deferrable_foreign_key_constraints-3F","()","<p>Whether the database supports deferrable foreign key constraints, false by default as few databases do. …\n"],["supports_deleting_joins?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_deleting_joins-3F","()","<p>Whether deleting from joined datasets is supported, false by default.\n"],["supports_derived_column_lists?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_derived_column_lists-3F","()","<p>Whether the database supports derived column lists (e.g. “table_expr AS table_alias(column_alias1, …\n"],["supports_distinct_on?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_distinct_on-3F","()","<p>Whether the dataset supports or can emulate the DISTINCT ON clause, false by default.\n"],["supports_drop_table_if_exists?","Sequel::Database","Sequel/Database.html#method-i-supports_drop_table_if_exists-3F","()","<p>Whether the database supports DROP TABLE IF EXISTS syntax, false by default.\n"],["supports_foreign_key_parsing?","Sequel::Database","Sequel/Database.html#method-i-supports_foreign_key_parsing-3F","()","<p>Whether the database supports Database#foreign_key_list for parsing foreign keys.\n"],["supports_group_cube?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_group_cube-3F","()","<p>Whether the dataset supports CUBE with GROUP BY, false by default.\n"],["supports_group_rollup?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_group_rollup-3F","()","<p>Whether the dataset supports ROLLUP with GROUP BY, false by default.\n"],["supports_grouping_sets?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_grouping_sets-3F","()","<p>Whether the dataset supports GROUPING SETS with GROUP BY, false by default.\n"],["supports_index_parsing?","Sequel::Database","Sequel/Database.html#method-i-supports_index_parsing-3F","()","<p>Whether the database supports Database#indexes for parsing indexes.\n"],["supports_insert_select?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_insert_select-3F","()","<p>Whether this dataset supports the <code>insert_select</code> method for returning all columns values directly from …\n"],["supports_intersect_except?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_intersect_except-3F","()","<p>Whether the dataset supports the INTERSECT and EXCEPT compound operations, true by default.\n"],["supports_intersect_except_all?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_intersect_except_all-3F","()","<p>Whether the dataset supports the INTERSECT ALL and EXCEPT ALL compound operations, true by default.\n"],["supports_is_true?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_is_true-3F","()","<p>Whether the dataset supports the IS TRUE syntax, true by default.\n"],["supports_join_using?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_join_using-3F","()","<p>Whether the dataset supports the JOIN table USING (column1, …) syntax, true by default. If false, support …\n"],["supports_lateral_subqueries?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_lateral_subqueries-3F","()","<p>Whether the dataset supports LATERAL for subqueries in the FROM or JOIN clauses, false by default.\n"],["supports_limits_in_correlated_subqueries?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_limits_in_correlated_subqueries-3F","()","<p>Whether limits are supported in correlated subqueries, true by default.\n"],["supports_modifying_joins?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_modifying_joins-3F","()","<p>Whether modifying joined datasets is supported, false by default.\n"],["supports_multiple_column_in?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_multiple_column_in-3F","()","<p>Whether the IN/NOT IN operators support multiple columns when an array of values is given, true by default. …\n"],["supports_nowait?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_nowait-3F","()","<p>Whether the dataset supports skipping raising an error instead of waiting for locked rows when returning …\n"],["supports_offsets_in_correlated_subqueries?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_offsets_in_correlated_subqueries-3F","()","<p>Whether offsets are supported in correlated subqueries, true by default.\n"],["supports_ordered_distinct_on?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_ordered_distinct_on-3F","()","<p>Whether the dataset supports or can fully emulate the DISTINCT ON clause, including respecting the ORDER …\n"],["supports_partial_indexes?","Sequel::Database","Sequel/Database.html#method-i-supports_partial_indexes-3F","()","<p>Whether the database supports partial indexes (indexes on a subset of a table), false by default.\n"],["supports_prepared_transactions?","Sequel::Database","Sequel/Database.html#method-i-supports_prepared_transactions-3F","()","<p>Whether the database and adapter support prepared transactions (two-phase commit), false by default. …\n"],["supports_regexp?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_regexp-3F","()","<p>Whether the dataset supports pattern matching by regular expressions, false by default.\n"],["supports_replace?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_replace-3F","()","<p>Whether the dataset supports REPLACE syntax, false by default.\n"],["supports_returning?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_returning-3F","(type)","<p>Whether the RETURNING clause is supported for the given type of query, false by default. <code>type</code> can be …\n"],["supports_savepoints?","Sequel::Database","Sequel/Database.html#method-i-supports_savepoints-3F","()","<p>Whether the database and adapter support savepoints, false by default.\n"],["supports_savepoints_in_prepared_transactions?","Sequel::Database","Sequel/Database.html#method-i-supports_savepoints_in_prepared_transactions-3F","()","<p>Whether the database and adapter support savepoints inside prepared transactions (two-phase commit), …\n"],["supports_schema_parsing?","Sequel::Database","Sequel/Database.html#method-i-supports_schema_parsing-3F","()","<p>Whether the database supports schema parsing via Database#schema.\n"],["supports_select_all_and_column?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_select_all_and_column-3F","()","<p>Whether the database supports <code>SELECT *, column FROM table</code>, true by default.\n"],["supports_skip_locked?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_skip_locked-3F","()","<p>Whether the dataset supports skipping locked rows when returning data, false by default.\n"],["supports_table_listing?","Sequel::Database","Sequel/Database.html#method-i-supports_table_listing-3F","()","<p>Whether the database supports Database#tables for getting list of tables.\n"],["supports_timestamp_timezones?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_timestamp_timezones-3F","()","<p>Whether the dataset supports timezones in literal timestamps, false by default.\n"],["supports_timestamp_usecs?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_timestamp_usecs-3F","()","<p>Whether the dataset supports fractional seconds in literal timestamps, true by default.\n"],["supports_transaction_isolation_levels?","Sequel::Database","Sequel/Database.html#method-i-supports_transaction_isolation_levels-3F","()","<p>Whether the database and adapter support transaction isolation levels, false by default.\n"],["supports_transactional_ddl?","Sequel::Database","Sequel/Database.html#method-i-supports_transactional_ddl-3F","()","<p>Whether DDL statements work correctly in transactions, false by default.\n"],["supports_updating_joins?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_updating_joins-3F","()","<p>Whether updating joined datasets is supported, false by default.\n"],["supports_view_listing?","Sequel::Database","Sequel/Database.html#method-i-supports_view_listing-3F","()","<p>Whether the database supports Database#views for getting list of views.\n"],["supports_views_with_check_option?","Sequel::Database","Sequel/Database.html#method-i-supports_views_with_check_option-3F","()","<p>Whether CREATE VIEW … WITH CHECK OPTION is supported, false by default.\n"],["supports_views_with_local_check_option?","Sequel::Database","Sequel/Database.html#method-i-supports_views_with_local_check_option-3F","()","<p>Whether CREATE VIEW … WITH LOCAL CHECK OPTION is supported, false by default.\n"],["supports_where_true?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_where_true-3F","()","<p>Whether the dataset supports WHERE TRUE (or WHERE 1 for databases that that use 1 for true), true by …\n"],["supports_window_clause?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_window_clause-3F","()","<p>Whether the dataset supports the WINDOW clause to define windows used by multiple window functions, false …\n"],["supports_window_function_frame_option?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_window_function_frame_option-3F","(option)","<p>Whether the dataset supports the given window function option.  True by default. This should only be …\n"],["supports_window_functions?","Sequel::Dataset","Sequel/Dataset.html#method-i-supports_window_functions-3F","()","<p>Whether the dataset supports window functions, false by default.\n"],["synchronize","Sequel::Database","Sequel/Database.html#method-i-synchronize","(server=nil)","<p>:nocov:\n"],["synchronize","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-synchronize","(&block)","<p>Unless in single threaded mode, protects access to any mutable global data structure in Sequel. Uses …\n"],["synchronize","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-synchronize","(&block)","<p>Unless in single threaded mode, protects access to any mutable global data structure in Sequel. Uses …\n"],["synchronize_with","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-synchronize_with","(mutex)","<p>If a mutex is given, synchronize access using it.  If nil is given, just yield to the block.  This is …\n"],["synchronize_with","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-synchronize_with","(mutex)","<p>If a mutex is given, synchronize access using it.  If nil is given, just yield to the block.  This is …\n"],["table","Sequel::SQL::JoinClause","Sequel/SQL/JoinClause.html#method-i-table","()","<p>The table/set related to the JOIN, without any alias.\n"],["table_alias","Sequel::SQL::JoinClause","Sequel/SQL/JoinClause.html#method-i-table_alias","()","<p>The table alias to use for the JOIN , or nil if the JOIN does not alias the table.\n"],["table_exists?","Sequel::Database","Sequel/Database.html#method-i-table_exists-3F","(name)","<p>Returns true if a table with the given name exists.  This requires a query to the database.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">table_exists?</span>(<span class=\"ruby-value\">:foo</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["table_name","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-table_name","()","<p>Returns name of primary table for the dataset. If the table for the dataset is aliased, returns the aliased …\n"],["test_connection","Sequel::Database","Sequel/Database.html#method-i-test_connection","(server=nil)","<p>Attempts to acquire a database connection.  Returns true if successful. Will probably raise an Error …\n"],["this","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-this","()","<p>Returns (naked) dataset that should return only this instance.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>[<span class=\"ruby-value\">1</span>].<span class=\"ruby-identifier\">this</span>\n<span class=\"ruby-comment\"># SELECT * FROM artists ...</span>\n</pre>\n"],["timezone","Sequel::Database","Sequel/Database.html#method-i-timezone","()","<p>The timezone to use for this database, defaulting to <code>Sequel.database_timezone</code>.\n"],["to_application_timestamp","Sequel::Database","Sequel/Database.html#method-i-to_application_timestamp","(v)","<p>Convert the given timestamp to the application&#39;s timezone, from the databases&#39;s timezone or the …\n"],["to_hash","Sequel::Dataset","Sequel/Dataset.html#method-i-to_hash","(*a)","<p>Alias of as_hash for backwards compatibility.\n"],["to_hash","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-to_hash","(*a)","<p>Alias of as_hash for backwards compatibility.\n"],["to_hash_groups","Sequel::Dataset","Sequel/Dataset.html#method-i-to_hash_groups","(key_column, value_column = nil, opts = OPTS)","<p>Returns a hash with one column used as key and the values being an array of column values. If the value_column …\n"],["to_hash_groups","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-to_hash_groups","(key_column, value_column=nil, opts=OPTS)","<p>If the dataset is being eagerly loaded, default to calling all instead of each.\n"],["to_prepared_statement","Sequel::Dataset","Sequel/Dataset.html#method-i-to_prepared_statement","(type, values=nil, opts=OPTS)","<p>Return a cloned copy of the current dataset extended with PreparedStatementMethods, setting the type …\n"],["to_s","Sequel::SQLTime","Sequel/SQLTime.html#method-i-to_s","(*args)","<p>Return a string in HH:MM:SS format representing the time.\n"],["to_sequel_blob","Sequel::LiteralString","Sequel/LiteralString.html#method-i-to_sequel_blob","()","<p>Convert a literal string to a SQL::Blob.\n"],["to_sequel_blob","Sequel::SQL::Blob","Sequel/SQL/Blob.html#method-i-to_sequel_blob","()","<p>Returns <code>self</code>, since it is already a blob.\n"],["transaction","Sequel::Database","Sequel/Database.html#method-i-transaction","(opts=OPTS, &block)","<p>Starts a database transaction.  When a database transaction is used, either all statements are successful …\n"],["transaction","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-transaction","()","<p>Enable the use of transactions for the related migration\n"],["transaction","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-transaction","(dbs, opts=OPTS, &block)","<p>Uses a transaction on all given databases with the given options. This:\n\n<pre>Sequel.transaction([DB1, DB2, ...</pre>\n"],["transaction","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-transaction","(dbs, opts=OPTS, &block)","<p>Uses a transaction on all given databases with the given options. This:\n\n<pre>Sequel.transaction([DB1, DB2, ...</pre>\n"],["transform","Sequel::ASTTransformer","Sequel/ASTTransformer.html#method-i-transform","(obj)","<p>Return <code>obj</code> or a potentially transformed version of it.\n"],["transform","Sequel::Dataset::PlaceholderLiteralizer::Argument","Sequel/Dataset/PlaceholderLiteralizer/Argument.html#method-i-transform","(&block)","<p>Return a new Argument object for the same recorder and argument position, but with a different transformer …\n"],["trim","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-trim","(arg)","<p>Return an emulated function call for trimming a string of spaces from both sides (similar to ruby&#39;s …\n"],["truncate","Sequel::Dataset","Sequel/Dataset.html#method-i-truncate","()","<p>Truncates the dataset.  Returns nil.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:table</span>].<span class=\"ruby-identifier\">truncate</span> <span class=\"ruby-comment\"># TRUNCATE table</span>\n<span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n"],["truncate_sql","Sequel::Dataset","Sequel/Dataset.html#method-i-truncate_sql","()","<p>Returns a TRUNCATE SQL query string.  See <code>truncate</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">truncate_sql</span> <span class=\"ruby-comment\"># =&gt; &#39;TRUNCATE items&#39;</span>\n</pre>\n"],["typecast_to_application_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-typecast_to_application_timestamp","(v)","<p>Convert the given object into an object of <code>Sequel.datetime_class</code> in the <code>application_timezone</code>.  Used when …\n"],["typecast_to_application_timestamp","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-typecast_to_application_timestamp","(v)","<p>Convert the given object into an object of <code>Sequel.datetime_class</code> in the <code>application_timezone</code>.  Used when …\n"],["typecast_value","Sequel::Database","Sequel/Database.html#method-i-typecast_value","(column_type, value)","<p>Typecast the value to the given column_type. Calls typecast_value_#{column_type} if the method exists, …\n"],["uncountable","Sequel::Inflections","Sequel/Inflections.html#method-c-uncountable","(*words)","<p>Add uncountable words that shouldn&#39;t be attempted inflected.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">uncountable</span> <span class=\"ruby-string\">&quot;money&quot;</span>\n<span class=\"ruby-identifier\">uncountable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unfiltered","Sequel::Dataset","Sequel/Dataset.html#method-i-unfiltered","()","<p>Returns a copy of the dataset with no filters (HAVING or WHERE clause) applied.\n\n<pre>DB[:items].group(:a).having(a: ...</pre>\n"],["ungraphed","Sequel::Dataset","Sequel/Dataset.html#method-i-ungraphed","()","<p>Remove the splitting of results into subhashes, and all metadata related to the current graph (if any). …\n"],["ungraphed","Sequel::Model::Associations::DatasetMethods","Sequel/Model/Associations/DatasetMethods.html#method-i-ungraphed","()","<p>Do not attempt to split the result set into associations, just return results as simple objects.  This …\n"],["ungrouped","Sequel::Dataset","Sequel/Dataset.html#method-i-ungrouped","()","<p>Returns a copy of the dataset with no grouping (GROUP or HAVING clause) applied.\n\n<pre>DB[:items].group(:a).having(a: ...</pre>\n"],["union","Sequel::Dataset","Sequel/Dataset.html#method-i-union","(dataset, opts=OPTS)","<p>Adds a UNION clause using a second dataset object. A UNION compound dataset returns all rows in either …\n"],["unique","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-unique","(columns, opts = OPTS)","<p>Add a unique constraint on the given columns.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">unique</span>(<span class=\"ruby-value\">:name</span>) <span class=\"ruby-comment\"># UNIQUE (name)</span>\n</pre>\n<p>Supports the same :deferrable …\n"],["unlimited","Sequel::Dataset","Sequel/Dataset.html#method-i-unlimited","()","<p>Returns a copy of the dataset with no limit or offset.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">limit</span>(<span class=\"ruby-value\">10</span>, <span class=\"ruby-value\">20</span>).<span class=\"ruby-identifier\">unlimited</span> <span class=\"ruby-comment\"># SELECT * FROM ...</span>\n</pre>\n"],["unordered","Sequel::Dataset","Sequel/Dataset.html#method-i-unordered","()","<p>Returns a copy of the dataset with no order.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-value\">:a</span>).<span class=\"ruby-identifier\">unordered</span> <span class=\"ruby-comment\"># SELECT * FROM items</span>\n</pre>\n"],["unqualified_column_for","Sequel::Dataset","Sequel/Dataset.html#method-i-unqualified_column_for","(v)","<p>This returns an SQL::Identifier or SQL::AliasedExpression containing an SQL identifier that represents …\n"],["unquoted","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-unquoted","()","<p>Return a new function where the function name will not be quoted even if the database supports quoted …\n"],["unrestrict_primary_key","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-unrestrict_primary_key","()","<p>Allow the setting of the primary key(s) when using the mass assignment methods. Using this method can …\n"],["unused_table_alias","Sequel::Dataset","Sequel/Dataset.html#method-i-unused_table_alias","(table_alias, used_aliases = [])","<p>Creates a unique table alias that hasn&#39;t already been used in the dataset. table_alias can be any …\n"],["up","Sequel::Migration","Sequel/Migration.html#method-i-up","()","<p>The default up action does nothing\n"],["up","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-up","(&block)","<p>Defines the migration&#39;s up action.\n"],["update","Sequel::Dataset","Sequel/Dataset.html#method-i-update","(values=OPTS, &block)","<p>Updates values for the dataset.  The returned value is the number of rows updated. <code>values</code> should be a …\n"],["update","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-update","(hash)","<p>Runs #set with the passed hash and then runs save_changes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">artist</span>.<span class=\"ruby-identifier\">update</span>(<span class=\"ruby-value\">name:</span> <span class=\"ruby-string\">&#39;Jim&#39;</span>) <span class=\"ruby-comment\"># UPDATE artists ...</span>\n</pre>\n"],["update_fields","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-update_fields","(hash, fields, opts=nil)","<p>Update the instance&#39;s values by calling set_fields with the arguments, then calls save_changes.\n\n<pre>artist.update_fields({name: ...</pre>\n"],["update_sql","Sequel::Dataset","Sequel/Dataset.html#method-i-update_sql","(values = OPTS)","<p>Formats an UPDATE statement using the given values.  See <code>update</code>.\n\n<pre>DB[:items].update_sql(price: 100, category: ...</pre>\n"],["uri","Sequel::Database","Sequel/Database.html#method-i-uri","()","<p>Returns the URI use to connect to the database.  If a URI was not used when connecting, returns nil. …\n"],["url","Sequel::Database","Sequel/Database.html#method-i-url","()","<p>Explicit alias of uri for easier subclassing.\n"],["use","Sequel::Dataset::PlaceholderLiteralizer::Recorder","Sequel/Dataset/PlaceholderLiteralizer/Recorder.html#method-i-use","(sql, arg, transformer)","<p>Record the offset at which the argument is used in the SQL query, and any transforming block.\n"],["use_transactions","Sequel::Migration","Sequel/Migration.html#method-c-use_transactions","()","<p>Don&#39;t allow transaction overriding in old migrations.\n"],["valid?","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-valid-3F","(opts = OPTS)","<p>Validates the object and returns true if no errors are reported.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">artist</span>.<span class=\"ruby-identifier\">set</span>(<span class=\"ruby-value\">name:</span> <span class=\"ruby-string\">&#39;Valid&#39;</span>).<span class=\"ruby-identifier\">valid?</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["valid_connection?","Sequel::Database","Sequel/Database.html#method-i-valid_connection-3F","(conn)","<p>Check whether the given connection is currently valid, by running a query against it.  If the query fails, …\n"],["validate","Sequel::Model::InstanceMethods","Sequel/Model/InstanceMethods.html#method-i-validate","()","<p>Validates the object.  If the object is invalid, errors should be added to the errors attribute.  By …\n"],["value_list","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-value_list","(arg)","<p>Return a <code>SQL::ValueList</code> created from the given array.  Used if the array contains all two element arrays …\n"],["version","Sequel","Sequel.html#method-c-version","()","<p>The version of Sequel you are using, as a string (e.g. “2.11.0”)\n"],["virtual_row","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-virtual_row","(&block)","<p>If the supplied block takes a single argument, yield an <code>SQL::VirtualRow</code> instance to the block argument. …\n"],["virtual_row","Sequel::SequelMethods","Sequel/SequelMethods.html#method-i-virtual_row","(&block)","<p>If the supplied block takes a single argument, yield an <code>SQL::VirtualRow</code> instance to the block argument. …\n"],["where","Sequel::Dataset","Sequel/Dataset.html#method-i-where","(*cond, &block)","<p>Returns a copy of the dataset with the given WHERE conditions imposed upon it.\n<p>Accepts the following argument …\n"],["where_all","Sequel::Dataset","Sequel/Dataset.html#method-i-where_all","(cond, &block)","<p>Return an array of all rows matching the given filter condition, also yielding each row to the given …\n"],["where_each","Sequel::Dataset","Sequel/Dataset.html#method-i-where_each","(cond, &block)","<p>Iterate over all rows matching the given filter condition,  yielding each row to the given block.  Basically …\n"],["where_single_value","Sequel::Dataset","Sequel/Dataset.html#method-i-where_single_value","(cond)","<p>Filter the datasets using the given filter condition, then return a single value. This assumes that the …\n"],["window","Sequel::Dataset","Sequel/Dataset.html#method-i-window","(name, opts)","<p>Return a clone of the dataset with an addition named window that can be referenced in window functions. …\n"],["window_sql_append","Sequel::Dataset","Sequel/Dataset.html#method-i-window_sql_append","(sql, opts)","<p>Append literalization of windows (for window functions) to SQL string.\n"],["with","Sequel::Dataset","Sequel/Dataset.html#method-i-with","(name, dataset, opts=OPTS)","<p>Add a common table expression (CTE) with the given name and a dataset that defines the CTE. A common …\n"],["with_dataset","Sequel::Dataset::PlaceholderLiteralizer","Sequel/Dataset/PlaceholderLiteralizer.html#method-i-with_dataset","()","<p>Return a new PlaceholderLiteralizer with a modified dataset.  This yields the receiver&#39;s dataset …\n"],["with_extend","Sequel::Dataset","Sequel/Dataset.html#method-i-with_extend","(*mods, &block)","<p>Return a clone of the dataset extended with the given modules. Note that like Object#extend, when multiple …\n"],["with_merged_expression","Sequel::SQL::CaseExpression","Sequel/SQL/CaseExpression.html#method-i-with_merged_expression","()","<p>Merge the CASE expression into the conditions, useful for databases that don&#39;t support CASE expressions. …\n"],["with_ordinality","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-with_ordinality","()","<p>Return a new function that will use WITH ORDINALITY to also return a row number for every row the function …\n"],["with_parens","Sequel::SQL::PlaceholderLiteralString","Sequel/SQL/PlaceholderLiteralString.html#method-i-with_parens","()","<p>Return a copy of the that will be surrounded by parantheses.\n"],["with_pk","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-with_pk","(pk)","<p>Return the model instance with the primary key, or nil if there is no matching record.\n"],["with_pk","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-with_pk","(pk)","<p>Given a primary key value, return the first record in the dataset with that primary key value.  If no …\n"],["with_pk!","Sequel::Model::ClassMethods","Sequel/Model/ClassMethods.html#method-i-with_pk-21","(pk)","<p>Return the model instance with the primary key, or raise NoMatchingRow if there is no matching record. …\n"],["with_pk!","Sequel::Model::DatasetMethods","Sequel/Model/DatasetMethods.html#method-i-with_pk-21","(pk)","<p>Same as with_pk, but raises NoMatchingRow instead of returning nil if no row matches.\n"],["with_quote_identifiers","Sequel::Dataset","Sequel/Dataset.html#method-i-with_quote_identifiers","(v)","<p>Return a modified dataset with quote_identifiers set.\n"],["with_recursive","Sequel::Dataset","Sequel/Dataset.html#method-i-with_recursive","(name, nonrecursive, recursive, opts=OPTS)","<p>Add a recursive common table expression (CTE) with the given name, a dataset that defines the nonrecursive …\n"],["with_row_proc","Sequel::Dataset","Sequel/Dataset.html#method-i-with_row_proc","(callable)","<p>Returns a cloned dataset with the given row_proc.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ds</span> = <span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>]\n<span class=\"ruby-identifier\">ds</span>.<span class=\"ruby-identifier\">all</span> <span class=\"ruby-comment\"># =&gt; [{:id=&gt;2}]</span>\n<span class=\"ruby-identifier\">ds</span>.<span class=\"ruby-identifier\">with_row_proc</span>(<span class=\"ruby-value\">:invert</span>.<span class=\"ruby-identifier\">to_proc</span>).<span class=\"ruby-identifier\">all</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["with_sql","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql","(sql, *args)","<p>Returns a copy of the dataset with the static SQL used.  This is useful if you want to keep the same …\n"],["with_sql_all","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_all","(sql, &block)","<p>Run the given SQL and return an array of all rows.  If a block is given, each row is yielded to the block …\n"],["with_sql_delete","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_delete","(sql)","<p>Execute the given SQL and return the number of rows deleted.  This exists solely as an optimization, …\n"],["with_sql_each","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_each","(sql)","<p>Run the given SQL and yield each returned row to the block.\n"],["with_sql_first","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_first","(sql)","<p>Run the given SQL and return the first row, or nil if no rows were returned. See with_sql_each.\n"],["with_sql_insert","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_insert","(sql)","<p>Execute the given SQL and (on most databases) return the primary key of the inserted row.\n"],["with_sql_single_value","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_single_value","(sql)","<p>Run the given SQL and return the first value in the first row, or nil if no rows were returned.  For …\n"],["with_sql_update","Sequel::Dataset","Sequel/Dataset.html#method-i-with_sql_update","(sql)",""],["within_group","Sequel::SQL::Function","Sequel/SQL/Function.html#method-i-within_group","(*expressions)","<p>Return a new function that uses WITHIN GROUP ordered by the given expression, useful for ordered-set …\n"],["|","Sequel::SQL::BooleanExpression","Sequel/SQL/BooleanExpression.html#method-i-7C","(ce)","<p>Always use an OR operator for | on BooleanExpressions\n"],["|","Sequel::SQL::Subscript","Sequel/SQL/Subscript.html#method-i-7C","(sub)","<p>Create a new <code>Subscript</code> appending the given subscript(s) to the current array of subscripts.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>].<span class=\"ruby-identifier\">sql_subscript</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["~","Sequel::SQL::BitwiseMethods","Sequel/SQL/BitwiseMethods.html#method-i-~","()","<p>Do the bitwise compliment of the self\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">~</span>(<span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>].<span class=\"ruby-identifier\">sql_number</span>) <span class=\"ruby-comment\"># ~&quot;a&quot;</span>\n</pre>\n"],["~","Sequel::SQL::BooleanMethods","Sequel/SQL/BooleanMethods.html#method-i-~","()","<p>Create a new BooleanExpression with NOT, representing the inversion of whatever self represents.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">~</span><span class=\"ruby-constant\">Sequel</span>[<span class=\"ruby-value\">:a</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["~","Sequel::SQL::OperatorBuilders","Sequel/SQL/OperatorBuilders.html#method-i-~","(arg)","<p>Invert the given expression.  Returns a <code>Sequel::SQL::BooleanExpression</code> created from this argument, not …\n"],["CHANGELOG","","CHANGELOG.html","","<p>master\n<p>Support creation of STRICT tables on SQLite 3.37.0+ via create_table :strict option (jeremyevans) …\n"],["MIT-LICENSE","","MIT-LICENSE.html","","<p>Copyright © 2007-2008 Sharon Rosner Copyright © 2008-2022 Jeremy Evans\n<p>Permission is hereby granted, …\n"],["README","","README_rdoc.html","","<p>Sequel: The Database Toolkit for Ruby\n<p>Sequel is a simple, flexible, and powerful SQL database access toolkit …\n"],["CHANGELOG.old","","doc/CHANGELOG_old.html","","<p>4.49.0 (2017-08-01)\n<p>Make dataset_associations plugin automatically alias tables when using many_through_many …\n"],["advanced_associations","","doc/advanced_associations_rdoc.html","","<p>Advanced Associations\n<p>Sequel::Model&#39;s association support is powerful and flexible, but it can be …\n"],["association_basics","","doc/association_basics_rdoc.html","","<p>Association Basics\n<p>This guide is based on guides.rubyonrails.org/association_basics.html\n<p>Why Associations …\n"],["bin_sequel","","doc/bin_sequel_rdoc.html","","<p>bin/sequel\n<p>bin/sequel is the name used to refer to the “sequel” command line tool that ships …\n"],["cheat_sheet","","doc/cheat_sheet_rdoc.html","","<p>Cheat Sheet   \n<p>Open a database\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;sequel&#39;</span>\n\n<span class=\"ruby-constant\">DB</span> = <span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">sqlite</span>(<span class=\"ruby-string\">&#39;my_blog.db&#39;</span>)\n<span class=\"ruby-constant\">DB</span> = <span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">connect</span>(<span class=\"ruby-string\">&#39;postgres://user:password@localhost/my_db&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["code_order","","doc/code_order_rdoc.html","","<p>Code Order\n<p>In Sequel, the order in which code is executed during initialization is important.  This guide …\n"],["core_extensions","","doc/core_extensions_rdoc.html","","<p>Sequel&#39;s Core Extensions\n<p>Background\n<p>Historically, Sequel added methods to many of the core classes, …\n"],["dataset_basics","","doc/dataset_basics_rdoc.html","","<p>Dataset Basics \n<p>Introduction\n<p>Datasets are the primary way Sequel uses to access the database. While most …\n"],["dataset_filtering","","doc/dataset_filtering_rdoc.html","","<p>Dataset Filtering\n<p>Sequel is very flexible when it comes to filtering records. You can specify your conditions …\n"],["extensions","","doc/extensions_rdoc.html","","<p>Sequel Extensions\n<p>Sequel has an official extension system, for adding global, Database, and Dataset extensions. …\n"],["fork_safety","","doc/fork_safety_rdoc.html","","<p>Fork Safety\n<p>If you are forking or using a library that forks after you have created a Sequel::Database …\n"],["mass_assignment","","doc/mass_assignment_rdoc.html","","<p>Sequel::Model Mass Assignment\n<p>Most Model methods that take a hash of attribute keys and values, including …\n"],["migration","","doc/migration_rdoc.html","","<p>Migrations\n<p>This guide is based on guides.rubyonrails.org/migrations.html\n<p>Overview\n"],["model_dataset_method_design","","doc/model_dataset_method_design_rdoc.html","","<p>Model Dataset Method Design Guide\n<p>How you design your model dataset methods can significantly affect the …\n"],["model_hooks","","doc/model_hooks_rdoc.html","","<p>Model Hooks\n<p>This guide is based on guides.rubyonrails.org/activerecord_validations_callbacks.html\n<p>Overview …\n"],["model_plugins","","doc/model_plugins_rdoc.html","","<p>Model Plugins\n<p>Sequel::Model (and Sequel in general) is designed around the idea of a small core, to which …\n"],["mssql_stored_procedures","","doc/mssql_stored_procedures_rdoc.html","","<p>Stored Procedures in MSSQL\n<p>This guide documents the workaround implemented to allow executing stored procedures …\n"],["object_model","","doc/object_model_rdoc.html","","<p>The Sequel Object Model\n<p>Sequel&#39;s dataset layer is mostly structured as an DSL, so it often obscures …\n"],["opening_databases","","doc/opening_databases_rdoc.html","","<p>Connecting to a database\n<p>All Sequel activity begins with connecting to a database, which creates a Sequel::Database …\n"],["postgresql","","doc/postgresql_rdoc.html","","<p>PostgreSQL-specific Support in Sequel\n<p>Sequel&#39;s core database and dataset functions are designed to …\n"],["prepared_statements","","doc/prepared_statements_rdoc.html","","<p>Prepared Statements and Bound Variables\n<p>Sequel has support for prepared statements and bound variables. …\n"],["querying","","doc/querying_rdoc.html","","<p>Querying in Sequel\n<p>This guide is based on guides.rubyonrails.org/active_record_querying.html\n<p>Purpose of …\n"],["reflection","","doc/reflection_rdoc.html","","<p>Reflection\n<p>Sequel supports reflection information in multiple ways.\n<p>Adapter in Use\n"],["1.0","","doc/release_notes/1_0_txt.html","","<p>New code organization\n<p>Sequel is now divided into two parts: sequel_core and sequel_model. These two parts …\n"],["1.1","","doc/release_notes/1_1_txt.html","","<p>DRY Sequel models\n<p>With the new Sequel release you no longer need to explicitly specify the table name …\n"],["1.3","","doc/release_notes/1_3_txt.html","","<p>Better model associations\n<p>The latest release of sequel_model includes a new associations functionality …\n"],["1.4.0","","doc/release_notes/1_4_0_txt.html","","<p>Eager loading for all types of associations:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">eager</span>(<span class=\"ruby-value\">:albums</span>).<span class=\"ruby-identifier\">all</span>\n<span class=\"ruby-constant\">Album</span>.<span class=\"ruby-identifier\">eager</span>(<span class=\"ruby-value\">:artist</span>, <span class=\"ruby-value\">:genre</span>, <span class=\"ruby-value\">:tracks</span>).<span class=\"ruby-identifier\">all</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["1.5.0","","doc/release_notes/1_5_0_txt.html","","<p>You can now graph a dataset and have the result split into component tables:\n\n<pre>DB[:artists].graph(:albums, ...</pre>\n"],["2.0.0","","doc/release_notes/2_0_0_txt.html","","<p>Blockless Filter Expressions\n<p>Before 2.0.0, in order to specify complex SQL expressions, you either had …\n"],["2.1.0","","doc/release_notes/2_1_0_txt.html","","<p>Model Improvements\n<p>one_to_many/many_to_many associations now support a :limit option, adding a limit/offset …\n"],["2.10.0","","doc/release_notes/2_10_0_txt.html","","<p>New Supported Adapters and Databases\n<p>A DataObjects adapter was added that supports PostgreSQL, MySQL, …\n"],["2.11.0","","doc/release_notes/2_11_0_txt.html","","<p>Optimizations\n<p>Model.[] was optimized to use static SQL in cases where doing so should result in the same …\n"],["2.12.0","","doc/release_notes/2_12_0_txt.html","","<p>Overview\n<p>Sequel 2.12 is really just a stepping stone to Sequel 3.0, which will be released next month. …\n"],["2.2.0","","doc/release_notes/2_2_0_txt.html","","<p>The Most Powerful and Flexible Associations of Any Ruby ORM\n<p>Sequel can now support any association type …\n"],["2.3.0","","doc/release_notes/2_3_0_txt.html","","<p>JRuby and Ruby 1.9 Officially Supported\n<p>Sequel now officially supports JRuby 1.1.3 and Ruby 1.9 (svn revision …\n"],["2.4.0","","doc/release_notes/2_4_0_txt.html","","<p>Prepared Statements/Bound Variables\n<p>\n<p>Sequel now supports prepared statements and bound variables.  No matter …\n"],["2.5.0","","doc/release_notes/2_5_0_txt.html","","<p>New Features\n<p>The values that are used to insert/update records can now be scoped similar to how filter …\n"],["2.6.0","","doc/release_notes/2_6_0_txt.html","","<p>New Features\n<p>Schema parsing was refactored, resulting in a huge speedup when using MySQL.  MySQL now uses …\n"],["2.7.0","","doc/release_notes/2_7_0_txt.html","","<p>Performance Optimizations\n<p>Fetching a large number of records with the PostgreSQL adapter is significantly …\n"],["2.8.0","","doc/release_notes/2_8_0_txt.html","","<p>New Features\n<p>Sequel now supports database stored procedures similar to its support for prepared statements. …\n"],["2.9.0","","doc/release_notes/2_9_0_txt.html","","<p>New Features\n<p>Compound SQL statement (i.e. UNION, EXCEPT, and INTERSECT) support is much improved.  Chaining …\n"],["3.0.0","","doc/release_notes/3_0_0_txt.html","","<p>Deprecated Methods/Features Removed\n<p>Methods and features that were deprecated in 2.12.0 have been removed …\n"],["3.1.0","","doc/release_notes/3_1_0_txt.html","","<p>New Plugins\n<p>3 new plugins were added that implement features supported by DataMapper: identity_map, tactical_eager_loading …\n"],["3.10.0","","doc/release_notes/3_10_0_txt.html","","<p>New Features\n<p>A real one_to_one association was added to Sequel, replacing the previous :one_to_one option …\n"],["3.11.0","","doc/release_notes/3_11_0_txt.html","","<p>New Features\n<p>A few new features were added to query logging.  Sequel now includes execution time when …\n"],["3.12.0","","doc/release_notes/3_12_0_txt.html","","<p>Migration Changes\n<p>A TimestampMigrator has been added to Sequel, and is automatically used if any migration …\n"],["3.13.0","","doc/release_notes/3_13_0_txt.html","","<p>New Plugins\n<p>A json_serializer plugin was added that allows you to serialize model instances or datasets …\n"],["3.14.0","","doc/release_notes/3_14_0_txt.html","","<p>New Features\n<p>Dataset#grep now accepts :all_patterns, :all_columns, and :case_insensitive options.  Previously …\n"],["3.15.0","","doc/release_notes/3_15_0_txt.html","","<p>Performance Enhancements\n<p>A mysql2 adapter was added to Sequel.  It offers a large (2-6x) performance increase …\n"],["3.16.0","","doc/release_notes/3_16_0_txt.html","","<p>New Adapter\n<p>A swift adapter was added to Sequel.  Swift is a relatively new ruby database library, built …\n"],["3.17.0","","doc/release_notes/3_17_0_txt.html","","<p>New Features\n<p>You can now change the level at which Sequel logs SQL statements, by calling Database#sql_log_level= …\n"],["3.18.0","","doc/release_notes/3_18_0_txt.html","","<p>New Features\n<p>Reversible migration support has been added:\n\n<pre>Sequel.migration do\n  change do\n    create_table(:artists) ...</pre>\n"],["3.19.0","","doc/release_notes/3_19_0_txt.html","","<p>New Features\n<p>The add_* association methods now accept a primary key, and associates the receiver to the …\n"],["3.2.0","","doc/release_notes/3_2_0_txt.html","","<p>New Features\n<p>Common table expressions (CTEs) are now supported.  CTEs use the SQL WITH clause, and specify …\n"],["3.20.0","","doc/release_notes/3_20_0_txt.html","","<p>New Features\n<p>The swift adapter now supports an SQLite subadapter.  Use the :db_type =&gt; &#39;sqlite&#39; …\n"],["3.21.0","","doc/release_notes/3_21_0_txt.html","","<p>New Features\n<p>A tinytds adapter was added, enabling Sequel users on a C-based ruby running on *nix easy …\n"],["3.22.0","","doc/release_notes/3_22_0_txt.html","","<p>New Features\n<p>Support COLLATE in column definitions.  At least MySQL and Microsoft SQL Server support them, …\n"],["3.23.0","","doc/release_notes/3_23_0_txt.html","","<p>New Features\n<p>Sequel now allows dynamic customization for eager loading. Previously, the parameters for …\n"],["3.24.0","","doc/release_notes/3_24_0_txt.html","","<p>Prepared Statement Plugins\n<p>The prepared_statements plugin makes Sequel::Model classes use prepared statements …\n"],["3.25.0","","doc/release_notes/3_25_0_txt.html","","<p>New Features\n<p>drop_table, drop_view, drop_column, and drop_constraint all now support a :cascade option …\n"],["3.26.0","","doc/release_notes/3_26_0_txt.html","","<p>Performance Enhancements\n<p>The internal implementation of eager_graph has been made 75% to 225% faster than …\n"],["3.27.0","","doc/release_notes/3_27_0_txt.html","","<p>New Features\n<p>Model.dataset_module has been added for easily adding methods to a model&#39;s dataset:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Album</span>.<span class=\"ruby-identifier\">dataset_module</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["3.28.0","","doc/release_notes/3_28_0_txt.html","","<p>New Adapter Support\n<p>Sequel now has much better support for the DB2 database.\n<p>An ibmdb adapter has been …\n"],["3.29.0","","doc/release_notes/3_29_0_txt.html","","<p>New Adapter Support\n<p>Sequel now has much better support for Oracle, both in the ruby-oci8-based oracle …\n"],["3.3.0","","doc/release_notes/3_3_0_txt.html","","<p>New Features\n<p>An association_proxies plugin has been added.  This is not a full-blown proxy implementation, …\n"],["3.30.0","","doc/release_notes/3_30_0_txt.html","","<p>Dataset Literalization Refactoring\n<p>As warned about in the 3.29.0 release notes, dataset literalization …\n"],["3.31.0","","doc/release_notes/3_31_0_txt.html","","<p>New Features\n<p>The serialization plugin can now support custom serialization formats, by supplying a serializer/deserializer …\n"],["3.32.0","","doc/release_notes/3_32_0_txt.html","","<p>New Features\n<p>Prepared statements now support :map and :to_hash prepared statement types.  The main reason …\n"],["3.33.0","","doc/release_notes/3_33_0_txt.html","","<p>New Features\n<p>A server_block extension has been added that makes Sequel&#39;s sharding support easier to …\n"],["3.34.0","","doc/release_notes/3_34_0_txt.html","","<p>New PostgreSQL Extensions\n<p>A pg_array extension has been added, supporting PostgreSQL&#39;s numeric and …\n"],["3.35.0","","doc/release_notes/3_35_0_txt.html","","<p>New Features\n<p>A dirty plugin has been added, which saves the initial value of the column when the column …\n"],["3.36.0","","doc/release_notes/3_36_0_txt.html","","<p>New Features\n<p>An eager_each plugin has been added, which automatically makes eagerly loaded datasets do …\n"],["3.37.0","","doc/release_notes/3_37_0_txt.html","","<p>New Features\n<p>Database#extension and Dataset#extension have been added and make it much easier to use extensions …\n"],["3.38.0","","doc/release_notes/3_38_0_txt.html","","<p>New Features\n<p>A pg_row extension has been added that supports PostgreSQL&#39;s row-valued/composite types. …\n"],["3.39.0","","doc/release_notes/3_39_0_txt.html","","<p>New Features\n<p>A constraint_validations extension and plugin have been added, which allow you to define …\n"],["3.4.0","","doc/release_notes/3_4_0_txt.html","","<p>New Plugins\n<p>A nested_attributes plugin was added allowing you to modify associated objects directly through …\n"],["3.40.0","","doc/release_notes/3_40_0_txt.html","","<p>New Features\n<p>Sequel now has vastly improved support for Microsoft Access.\n<p>Sequel now supports the CUBRID …\n"],["3.41.0","","doc/release_notes/3_41_0_txt.html","","<p>New Features\n<p>A connection_validator extension has been added, which automatically determines if connections …\n"],["3.42.0","","doc/release_notes/3_42_0_txt.html","","<p>New Features\n<p>Dataset#avg, #interval, #min, #max, #range, and #sum now accept virtual row blocks, allowing …\n"],["3.43.0","","doc/release_notes/3_43_0_txt.html","","<p>New Features\n<p>A core_refinements extension has been added, which offers refinement versions of Sequel&#39;s …\n"],["3.44.0","","doc/release_notes/3_44_0_txt.html","","<p>New Features\n<p>Dataset#paged_each has been added, for processing entire datasets without keeping all rows …\n"],["3.45.0","","doc/release_notes/3_45_0_txt.html","","<p>New Features\n<p>Database#transaction now recognizes a :retry_on option, which should contain an exception …\n"],["3.46.0","","doc/release_notes/3_46_0_txt.html","","<p>New Features\n<p>Dataset#first! has been added.  This is identical to #first, except where #first would return …\n"],["3.47.0","","doc/release_notes/3_47_0_txt.html","","<p>New Plugins\n<p>An auto_validations plugin has been added, which automatically adds not null, type, and unique …\n"],["3.48.0","","doc/release_notes/3_48_0_txt.html","","<p>Deprecation Warnings\n<p>The main change in Sequel 3.48.0 is the deprecation of Sequel features that will …\n"],["3.5.0","","doc/release_notes/3_5_0_txt.html","","<p>New Plugins\n<p>A class_table_inheritance plugin has been added, supporting model inheritance in the database …\n"],["3.6.0","","doc/release_notes/3_6_0_txt.html","","<p>New Features\n<p>Dataset#filter and related methods now accept a string with named placeholders, and a hash …\n"],["3.7.0","","doc/release_notes/3_7_0_txt.html","","<p>New Features\n<p>Sequel now has support for deleting and updating joined datasets on MySQL and PostgreSQL …\n"],["3.8.0","","doc/release_notes/3_8_0_txt.html","","<p>New Features\n<p>Dataset#each_server was added, allowing you to run the same query (most likely insert/update/delete …\n"],["3.9.0","","doc/release_notes/3_9_0_txt.html","","<p>New Features\n<p>The ConnectionPool classes were refactored from 2 separate classes to a 5 class hierarchy, …\n"],["4.0.0","","doc/release_notes/4_0_0_txt.html","","<p>Backwards Compatibility\n<p>All behavior resulting in deprecation messages in 3.48.0 has been removed or modified. …\n"],["4.1.0","","doc/release_notes/4_1_0_txt.html","","<p>New Features\n<p>Database#run and #<< now accept SQL::PlaceholderLiteralString objects, allowing you to more …\n"],["4.10.0","","doc/release_notes/4_10_0_txt.html","","<p>Performance Enhancements\n<p>Dataset literalization for simple datasets is now faster by creating a per-adapter …\n"],["4.11.0","","doc/release_notes/4_11_0_txt.html","","<p>New SQL Function Features\n<p>SQL::Function now supports an options hash for functions. Unfortunately, since …\n"],["4.12.0","","doc/release_notes/4_12_0_txt.html","","<p>New Features\n<p>Database#schema now includes :max_length entries for string columns, specifying the size …\n"],["4.13.0","","doc/release_notes/4_13_0_txt.html","","<p>New Features\n<p>A modification_detection plugin has been added, for automatic detection of in-place column …\n"],["4.14.0","","doc/release_notes/4_14_0_txt.html","","<p>New Features\n<p>Delayed evaluation blocks can now accept the dataset literalizing the delayed evaluation …\n"],["4.15.0","","doc/release_notes/4_15_0_txt.html","","<p>New Features\n<p>fdbsql and jdbc/fdbsql adapters have been added, for connecting to FoundationDB SQL Layer …\n"],["4.16.0","","doc/release_notes/4_16_0_txt.html","","<p>New Features\n<p>Model#qualified_pk_hash has been added, which is similar to Model#pk_hash, but uses qualified …\n"],["4.17.0","","doc/release_notes/4_17_0_txt.html","","<p>New Features\n<p>A :preconnect Database option has been added, for automatically creating the maximum number …\n"],["4.18.0","","doc/release_notes/4_18_0_txt.html","","<p>New Features\n<p>An :auto_increment key has been added to the schema information for primary key columns on …\n"],["4.19.0","","doc/release_notes/4_19_0_txt.html","","<p>New Features\n<p>Model#get_column_value and #set_column_value have been added for getting/setting column values. …\n"],["4.2.0","","doc/release_notes/4_2_0_txt.html","","<p>New Features\n<p>LATERAL subqueries are now supported on PostgreSQL 9.3+, HSQLDB, and DB2 via Dataset#lateral …\n"],["4.20.0","","doc/release_notes/4_20_0_txt.html","","<p>New Features\n<p>A :before_retry option has been added to Database#transaction, which specifies a proc to …\n"],["4.21.0","","doc/release_notes/4_21_0_txt.html","","<p>New Features\n<p>SQL::GenericExpression#=~ has been added as an alternative method of specifying equality/inclusion/identity. …\n"],["4.22.0","","doc/release_notes/4_22_0_txt.html","","<p>New Features\n<p>A csv_serializer plugin has been added, for serializing model objects and datasets to CSV …\n"],["4.23.0","","doc/release_notes/4_23_0_txt.html","","<p>New Features\n<p>An update_refresh plugin has been added, for refreshing a model instance when updating.  …\n"],["4.24.0","","doc/release_notes/4_24_0_txt.html","","<p>New Features\n<p>A pg_inet_ops extension has been added, for DSL support for calling PostgreSQL inet functions …\n"],["4.25.0","","doc/release_notes/4_25_0_txt.html","","<p>New Features\n<p>The =~ and !~ methods are now defined on ComplexExpressions in addition to GenericExpressions …\n"],["4.26.0","","doc/release_notes/4_26_0_txt.html","","<p>New Features\n<p>Add Dataset#grouping_sets to support GROUP BY GROUPING SETS on PostgreSQL 9.5+, MSSQL 2008+, …\n"],["4.27.0","","doc/release_notes/4_27_0_txt.html","","<p>New Features\n<p>A before_after_save plugin has been added, which for newly created objects refreshes the …\n"],["4.28.0","","doc/release_notes/4_28_0_txt.html","","<p>New Features\n<p>A subset_conditions plugin has been added, which adds a method for each subset that returns …\n"],["4.29.0","","doc/release_notes/4_29_0_txt.html","","<p>New Features\n<p>A uuid plugin has now been added.  This plugin will automatically create a uuid for newly …\n"],["4.3.0","","doc/release_notes/4_3_0_txt.html","","<p>New Features\n<p>The tree and rcte_tree plugins now support composite keys.\n<p>An error_sql Database extension …\n"],["4.30.0","","doc/release_notes/4_30_0_txt.html","","<p>New Features\n<p>Overriding the :limit and :eager_limit_strategy association options can now be done on a …\n"],["4.31.0","","doc/release_notes/4_31_0_txt.html","","<p>Improvements\n<p>Sequel now works with ruby 2.3&#39;s –enable-frozen-string-literal, and all of the library …\n"],["4.32.0","","doc/release_notes/4_32_0_txt.html","","<p>New Features\n<p>A no_auto_literal_strings extension has been added, which removes the automatic usage of …\n"],["4.33.0","","doc/release_notes/4_33_0_txt.html","","<p>New Features\n<p>A Sequel::Model.require_valid_table accessor has been added. This setting is false for backwards …\n"],["4.34.0","","doc/release_notes/4_34_0_txt.html","","<p>New Features\n<p>A duplicate_columns_handler extension has been added, for printing a warning or raising an …\n"],["4.35.0","","doc/release_notes/4_35_0_txt.html","","<p>Forwards Compatibility\n<p>Ruby 2.4 will unify the Fixnum and Bignum classes into the Integer class, making …\n"],["4.36.0","","doc/release_notes/4_36_0_txt.html","","<p>New Features\n<p>Sequel::Model::Model() has been added, which allows for Sequel::Model() like behavior where …\n"],["4.37.0","","doc/release_notes/4_37_0_txt.html","","<p>New Features\n<p>Database#values has been added on SQLite#3.8.3+, operating similarly to the support on PostgreSQL: …\n"],["4.38.0","","doc/release_notes/4_38_0_txt.html","","<p>New Features\n<p>Sequel::SQL::NumericMethods#coerce has been added, which adds support for ruby&#39;s coercion …\n"],["4.39.0","","doc/release_notes/4_39_0_txt.html","","<p>New Features\n<p>Sequel.[] has been added as an alias to Sequel.expr. This makes it a little easier to get …\n"],["4.4.0","","doc/release_notes/4_4_0_txt.html","","<p>New Features\n<p>Sequel now supports Sybase SQLAnywhere, via the sqlanywhere and jdbc/sqlanywhere adapters. …\n"],["4.40.0","","doc/release_notes/4_40_0_txt.html","","<p>New Features\n<p>A Sequel.split_symbols setting has been added.  This setting is true by default, so there …\n"],["4.41.0","","doc/release_notes/4_41_0_txt.html","","<p>New Features\n<p>Dataset#with_* methods have been added as equivalents for a few Dataset#*= methods, but instead …\n"],["4.42.0","","doc/release_notes/4_42_0_txt.html","","<p>New Features\n<p>There have been numerous improvements this release related to frozen datasets.  Frozen datasets …\n"],["4.43.0","","doc/release_notes/4_43_0_txt.html","","<p>New Features\n<p>Database#freeze has now been implemented.  It is now recommended to use it in production …\n\n"],["4.44.0","","doc/release_notes/4_44_0_txt.html","","<p>New Features\n<p>Model.freeze is now supported and recommended in production and during testing.  It freezes …\n"],["4.45.0","","doc/release_notes/4_45_0_txt.html","","<p>Deprecated Features\n<p>Dataset mutation is now deprecated.  Users should switch to using the non-mutating …\n"],["4.46.0","","doc/release_notes/4_46_0_txt.html","","<p>Deprecated Features\n<p>Symbol splitting is now deprecated by default.  Sequel has split symbols since the …\n"],["4.47.0","","doc/release_notes/4_47_0_txt.html","","<p>Deprecated Features\n<p>Setting an invalid dataset for a model is now deprecated. Historically, Sequel has …\n"],["4.48.0","","doc/release_notes/4_48_0_txt.html","","<p>Deprecated Features\n<p>The identifier_columns plugin is now deprecated.  There is no reason to use it when …\n"],["4.49.0","","doc/release_notes/4_49_0_txt.html","","<p>Forward Compatibility\n<p>Sequel 4.49.0 will be the last minor release of Sequel 4. While the vast majority …\n"],["4.5.0","","doc/release_notes/4_5_0_txt.html","","<p>New Features\n<p>An mssql_optimistic_locking plugin has been added.  This is similar to the regular optimistic_locking …\n"],["4.6.0","","doc/release_notes/4_6_0_txt.html","","<p>New Features\n<p>Database#call_mssql_sproc is now available for calling stored procedures on Microsoft SQL …\n"],["4.7.0","","doc/release_notes/4_7_0_txt.html","","<p>New Features\n<p>Alternatives for the more complex virtual row method calls have been added:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Window Functions ...</span>\n</pre>\n"],["4.8.0","","doc/release_notes/4_8_0_txt.html","","<p>New Features\n<p>A one_through_one association type has been added.  This is similar to the many_to_many association …\n"],["4.9.0","","doc/release_notes/4_9_0_txt.html","","<p>Performance Enhancements\n<p>Dataset::PlaceholderLiteralizer has been added as an optimization framework. …\n"],["5.0.0","","doc/release_notes/5_0_0_txt.html","","<p>Major Changes\n<p>Datasets are now frozen by default.  Since Sequel&#39;s inception, datasets have used a …\n"],["5.1.0","","doc/release_notes/5_1_0_txt.html","","<p>Improvements\n<p>Database#copy_into in the jdbc/postgresql adapter now works correctly when using multibyte …\n"],["5.10.0","","doc/release_notes/5_10_0_txt.html","","<p>New Features\n<p>Ruby 2.6+ endless ranges are now supported as condition specifier values, using a &gt;= operator …\n"],["5.11.0","","doc/release_notes/5_11_0_txt.html","","<p>New Features\n<p>Sequel now supports more window frame specification types when using window functions.   …\n"],["5.12.0","","doc/release_notes/5_12_0_txt.html","","<p>New Features\n<p>An eager_graph_eager plugin has been added, which allows you to chain eager loads using separate …\n"],["5.13.0","","doc/release_notes/5_13_0_txt.html","","<p>New Features\n<p>A constant_sql_override Database extension has been added, allowing for overriding the SQL …\n"],["5.14.0","","doc/release_notes/5_14_0_txt.html","","<p>New Features\n<p>The :nulls option when creating ordered expressions is now supported on all databases that …\n"],["5.15.0","","doc/release_notes/5_15_0_txt.html","","<p>New Features\n<p>A :qualify_tables option has been added to the class_table_inheritance plugin, which will …\n"],["5.16.0","","doc/release_notes/5_16_0_txt.html","","<p>New Features\n<p>Database#rollback_on_exit has been added, which allows you to rollback transactions instead …\n"],["5.17.0","","doc/release_notes/5_17_0_txt.html","","<p>New Features\n<p>An instance-level skip_auto_validations method has been added to the auto_validations plugin, …\n"],["5.18.0","","doc/release_notes/5_18_0_txt.html","","<p>New Features\n<p>A throw_failures plugin has been added for throwing ValidationFailed and HookFailed exceptions …\n"],["5.19.0","","doc/release_notes/5_19_0_txt.html","","<p>New Features\n<p>A Database#rename_enum_value method has been added to the pg_enum extension. It is supported …\n"],["5.2.0","","doc/release_notes/5_2_0_txt.html","","<p>New Features\n<p>A pg_extended_date_support extension has been added.  This extension adds support for infinite …\n"],["5.20.0","","doc/release_notes/5_20_0_txt.html","","<p>New Features\n<p>Database#after_commit and #after_rollback transaction hook methods now support a :savepoint …\n"],["5.21.0","","doc/release_notes/5_21_0_txt.html","","<p>New Features\n<p>The pg_json extension now adds a Database#wrap_json_primitives accessor.  When set to true, …\n"],["5.22.0","","doc/release_notes/5_22_0_txt.html","","<p>New Features\n<p>Sequel now supports Ruby 2.7+ startless ranges in filters:\n\n<pre>DB[:table].where(:column=&gt;(..10)) ...</pre>\n"],["5.23.0","","doc/release_notes/5_23_0_txt.html","","<p>New Features\n<p>An insert_conflict plugin has been added for automatically handling constraint conflicts …\n"],["5.24.0","","doc/release_notes/5_24_0_txt.html","","<p>New Features\n<p>A :cache_file plugin option has been added to the pg_auto_constraint_validations plugin. …\n"],["5.25.0","","doc/release_notes/5_25_0_txt.html","","<p>New Features\n<p>An association_multi_add_remove plugin has been added.  This plugin adds a shortcut for adding …\n"],["5.26.0","","doc/release_notes/5_26_0_txt.html","","<p>New Features\n<p>Support for SQL/JSON path expressions has been added to the pg_json_ops extension. These …\n"],["5.27.0","","doc/release_notes/5_27_0_txt.html","","<p>New Features\n<p>Sequel::DEFAULT has been added a constant for the DEFAULT expression, useful in inserts and …\n"],["5.28.0","","doc/release_notes/5_28_0_txt.html","","<p>New Features\n<p>An any_not_empty extension has been added, for making Dataset#any? without a block be the …\n"],["5.29.0","","doc/release_notes/5_29_0_txt.html","","<p>New Features\n<p>An empty_failure_backtraces plugin has been added for using empty backtraces for ValidationFailed …\n"],["5.3.0","","doc/release_notes/5_3_0_txt.html","","<p>New Features\n<p>An :extensions Database option is now supported, which will load the named extensions into …\n"],["5.30.0","","doc/release_notes/5_30_0_txt.html","","<p>New Features\n<p>Sequel now supports generated columns on SQLite 3.31+ using the :generated_always_as and …\n"],["5.31.0","","doc/release_notes/5_31_0_txt.html","","<p>New Features\n<p>A forbid_lazy_load plugin has been added to forbid the lazy loading of model associations …\n"],["5.32.0","","doc/release_notes/5_32_0_txt.html","","<p>New Features\n<p>A fiber_concurrency extension has been added, for using Fiber.current instead of Thread.current …\n"],["5.33.0","","doc/release_notes/5_33_0_txt.html","","<p>New Features\n<p>Custom join types are now supported on a per-association basis when using eager_graph/association_join. …\n"],["5.34.0","","doc/release_notes/5_34_0_txt.html","","<p>New Features\n<p>The association_pks plugin now creates *_pks_dataset methods for each association.  These …\n"],["5.35.0","","doc/release_notes/5_35_0_txt.html","","<p>New Features\n<p>An instance_specific_default plugin has been added for setting the default for the :instance_specific …\n\n"],["5.36.0","","doc/release_notes/5_36_0_txt.html","","<p>New Features\n<p>Dataset#with_ties has been added on PostgreSQL 13+ and Microsoft SQL Server, which will have …\n"],["5.37.0","","doc/release_notes/5_37_0_txt.html","","<p>New Features\n<p>Model#column_previously_was and #column_previously_changed? have been added to the dirty …\n"],["5.38.0","","doc/release_notes/5_38_0_txt.html","","<p>New Features\n<p>The jdbc/mysql adapter now supports the newer com.mysql.cj.jdbc.Driver driver.  The adapter …\n\n"],["5.39.0","","doc/release_notes/5_39_0_txt.html","","<p>New Features\n<p>On Microsoft SQL Server, the :clustered option is now supported for primary key and unique …\n\n"],["5.4.0","","doc/release_notes/5_4_0_txt.html","","<p>New Features\n<p>An index_caching extension has been added, which makes Database#indexes use a cache similar …\n"],["5.40.0","","doc/release_notes/5_40_0_txt.html","","<p>New Features\n<p>On SQLite 3.33.0+, the UPDATE FROM syntax is now supported. This allows you to update one …\n"],["5.41.0","","doc/release_notes/5_41_0_txt.html","","<p>New Features\n<p>The validation methods added by the validation_helpers plugin now support the :skip_invalid …\n"],["5.42.0","","doc/release_notes/5_42_0_txt.html","","<p>New Features\n<p>An async_thread_pool Database extension has been added, which executes queries and processes …\n"],["5.43.0","","doc/release_notes/5_43_0_txt.html","","<p>New Features\n<p>A column_encryption plugin has been added to support encrypting the content of individual …\n"],["5.44.0","","doc/release_notes/5_44_0_txt.html","","<p>New Features\n<p>A concurrent_eager_loading plugin has been added.  This plugin builds on top of the async_thread_pool …\n"],["5.45.0","","doc/release_notes/5_45_0_txt.html","","<p>New Features\n<p>A auto_validations_constraint_validations_presence_message plugin has been added that provides …\n"],["5.46.0","","doc/release_notes/5_46_0_txt.html","","<p>New Features\n<p>An unused_associations plugin has been added, which allows you to determine which associations …\n"],["5.47.0","","doc/release_notes/5_47_0_txt.html","","<p>New Features\n<p>Sequel now supports using separate queries for each table for both lazy and eager loading …\n"],["5.48.0","","doc/release_notes/5_48_0_txt.html","","<p>New Features\n<p>A Sequel::Database#like_without_collate accessor has been added on Microsoft SQL Server, …\n"],["5.49.0","","doc/release_notes/5_49_0_txt.html","","<p>New Features\n<p>Model#validates_no_null_byte has been added to the validation_helpers.  It checks that the …\n"],["5.5.0","","doc/release_notes/5_5_0_txt.html","","<p>New Features\n<p>The defaults_setter plugin now supports a :cache option, which will cache default values …\n"],["5.50.0","","doc/release_notes/5_50_0_txt.html","","<p>New Features\n<p>A pg_multirange extension has been added with support for PostgreSQL 14+ multirange types. …\n"],["5.51.0","","doc/release_notes/5_51_0_txt.html","","<p>New Features\n<p>On PostgreSQL 14+, Dataset#with_recursive now supports :search and :cycle options for result …\n"],["5.52.0","","doc/release_notes/5_52_0_txt.html","","<p>New Features\n<p>When the sql_comments Database extension is used, Database#with_comments is now added, which …\n"],["5.53.0","","doc/release_notes/5_53_0_txt.html","","<p>Improvements\n<p>The jdbc/h2 subadapter now supports H2 version 2.0.  It continues to support H2 versions …\n"],["5.54.0","","doc/release_notes/5_54_0_txt.html","","<p>New Feature\n<p>An enum plugin has been added.  This plugin allows you to create model-level enums, giving …\n"],["5.55.0","","doc/release_notes/5_55_0_txt.html","","<p>New Features\n<p>An auto_restrict_eager_graph plugin has been added for automatically disallowing the use …\n"],["5.6.0","","doc/release_notes/5_6_0_txt.html","","<p>Improvements\n<p>Running migrations using one of the included migrators on separate Database objects in separate …\n"],["5.7.0","","doc/release_notes/5_7_0_txt.html","","<p>New Features\n<p>An integer64 extension has been added, which treats the Integer class as a generic 64-bit …\n"],["5.8.0","","doc/release_notes/5_8_0_txt.html","","<p>New Features\n<p>A pg_auto_constraint_validations plugin has been added, which automatically converts many …\n"],["5.9.0","","doc/release_notes/5_9_0_txt.html","","<p>New Features\n<p>An escaped_like extension has been added, for the creation of LIKE/ILIKE expressions with …\n"],["schema_modification","","doc/schema_modification_rdoc.html","","<p>Schema modification methods\n<p>Here&#39;s a brief description of the most common schema modification methods: …\n"],["security","","doc/security_rdoc.html","","<p>Security Considerations with Sequel\n<p>When using Sequel, there are some security areas you should be aware …\n"],["sharding","","doc/sharding_rdoc.html","","<p>Primary/Replica Configurations and Database Sharding\n<p>Sequel has support for primary/replica configurations …\n"],["sql","","doc/sql_rdoc.html","","<p>Sequel for SQL Users\n<p>One of the main benefits of Sequel is that it doesn&#39;t require the user to know …\n"],["testing","","doc/testing_rdoc.html","","<p>Testing with Sequel\n<p>Whether or not you use Sequel in your application, you are usually going to want to …\n"],["thread_safety","","doc/thread_safety_rdoc.html","","<p>Thread Safety\n<p>Most Sequel usage (and all common Sequel usage) is thread safe by default.  Specifically …\n"],["transactions","","doc/transactions_rdoc.html","","<p>Database Transactions \n<p>Sequel uses autocommit mode by default for all of its database adapters, so in …\n"],["validations","","doc/validations_rdoc.html","","<p>Model Validations\n<p>This guide is based on guides.rubyonrails.org/active_record_validations.html\n<p>Overview …\n"],["virtual_rows","","doc/virtual_rows_rdoc.html","","<p>Virtual Row Blocks\n<p>Dataset methods where, order, and select all take blocks that are referred to as virtual …\n"]]}}