var search_data = {"index":{"searchIndex":["array","database","asyncthreadpool","runtransactionhooks","sqlcomments","datasetsqlcomments","falseclass","hash","nilclass","numeric","object","range","sequel","anynotempty","arbitraryservers","callerlogging","columnsintrospection","connectionexpiration","retry","connectionvalidator","retry","constantsqloverride","databasemethods","datasetmethods","constraintvalidations","altertablegeneratormethods","createtablegeneratormethods","generator","corerefinements","currentdatetimetimestamp","datasetmethods","datetime","time","baseproxy","databasemethods","datasetmethods","preemptableproxy","proxy","databaseerror","databasequery","dataset","autoliteralstrings","datasetsourcealias","implicitsubquery","nulldataset","nullifiable","pagination","query","roundtimestamps","splitarraynil","synchronizesql","datasetpagination","datasetprinter","datasetquery","dateparseinputhandler","datetimeparsetotime","duplicatecolumnerror","duplicatecolumnshandler","emptyarrayconsidernulls","errorsql","evalinspect","excludeornull","fiberconcurrency","grapheach","identifiermangling","databasemethods","datasetmethods","indexcaching","integer64","integermigrator","literalstring","loosertypecasting","mssql","emulatelateralwithapply","migration","migrationaltertablereverser","migrationdsl","migrationreverser","migrator","error","notcurrenterror","model","associations","namedtimezones","databasemethods","plugins","accessedcolumns","instancemethods","activemodel","classmethods","errors","instancemethods","afterinitialize","classmethods","instancemethods","associationdependencies","classmethods","instancemethods","associationlazyeageroption","instancemethods","associationmultiaddremove","classmethods","associationpks","classmethods","instancemethods","associationproxies","associationproxy","classmethods","asyncthreadpool","classmethods","datasetmethods","autorestricteagergraph","classmethods","autovalidations","classmethods","instancemethods","autovalidationsconstraintvalidationspresencemessage","classmethods","beforeaftersave","blacklistsecurity","classmethods","exceptionlist","instancemethods","booleanreaders","classmethods","booleansubsets","classmethods","caching","classmethods","instancemethods","classtableinheritance","classmethods","instancemethods","columnconflicts","classmethods","instancemethods","columnencryption","classmethods","datasetmethods","instancemethods","columnselect","classmethods","columnsupdated","instancemethods","composition","classmethods","instancemethods","concurrenteagerloading","classmethods","datasetmethods","constraintvalidations","classmethods","databasemethods","instancemethods","csvserializer","classmethods","datasetmethods","instancemethods","datasetassociations","classmethods","datasetmethods","defdatasetmethod","classmethods","defaultssetter","classmethods","instancemethods","delayaddassociation","instancemethods","dirty","instancemethods","eagereach","datasetmethods","eagergrapheager","datasetmethods","emptyfailurebacktraces","instancemethods","enum","classmethods","errorsplitter","instancemethods","finder","classmethods","forbidlazyload","classmethods","datasetmethods","error","instancemethods","forceencoding","classmethods","instancemethods","hookclassmethods","classmethods","instancemethods","inputtransformer","classmethods","instancemethods","insertconflict","instancemethods","insertreturningselect","classmethods","instancemethods","instancefilters","instancemethods","instancehooks","instancemethods","instancespecificdefault","classmethods","invertedsubsets","datasetmodulemethods","jsonserializer","classmethods","datasetmethods","instancemethods","literal","lazyattributes","classmethods","instancemethods","list","classmethods","instancemethods","manythroughmany","classmethods","datasetmethods","manythroughmanyassociationreflection","onethroughmanyassociationreflection","modificationdetection","classmethods","instancemethods","mssqloptimisticlocking","classmethods","instancemethods","nestedattributes","classmethods","instancemethods","optimisticlocking","classmethods","instancemethods","pgarrayassociations","classmethods","datasetmethods","manytopgarrayassociationreflection","pgarraytomanyassociationreflection","pgautoconstraintvalidations","classmethods","instancemethods","pgrow","classmethods","databasemethods","instancemethods","preparedstatements","classmethods","instancemethods","preparedstatementssafe","classmethods","instancemethods","rctetree","serialization","classmethods","instancemethods","serializationmodificationdetection","instancemethods","sharding","classmethods","datasetmethods","instancemethods","singletableinheritance","classmethods","instancemethods","singulartablenames","classmethods","skipcreaterefresh","instancemethods","skipsavingcolumns","classmethods","instancemethods","splitvalues","classmethods","instancemethods","sqlcomments","classmethods","datasetmethods","instancemethods","staticcache","classmethods","instancemethods","staticcachecache","classmethods","stringstripper","classmethods","subclasses","classmethods","subsetconditions","datasetmodulemethods","tableselect","classmethods","tacticaleagerloading","datasetmethods","instancemethods","throwfailures","instancemethods","timestamps","classmethods","instancemethods","touch","classmethods","instancemethods","tree","classmethods","datasetmethods","instancemethods","singleroot","classmethods","instancemethods","treemultiplerooterror","typecastonload","classmethods","instancemethods","unlimitedupdate","instancemethods","unusedassociations","classmethods","updateorcreate","classmethods","updateprimarykey","instancemethods","updaterefresh","classmethods","instancemethods","uuid","classmethods","instancemethods","validateassociated","instancemethods","validationclassmethods","classmethods","generator","instancemethods","validationcontexts","instancemethods","validationhelpers","instancemethods","whitelistsecurity","classmethods","instancemethods","xmlserializer","classmethods","datasetmethods","instancemethods","postgres","arrayop","arrayopmethods","enumdatabasemethods","extendeddatesupport","datasetmethods","hstore","databasemethods","parser","hstoreop","hstoreopmethods","hstoresubscriptop","inetdatabasemethods","inetdatasetmethods","inetop","inetopmethods","intervaldatabasemethods","parser","intervaldatasetmethods","jsonarray","jsonbarray","jsonbhash","jsonbobject","jsonbop","jsonbsubscriptop","jsonbaseop","jsondatabasemethods","jsonhash","jsonobject","jsonop","jsonopmethods","loosecount","pgarray","creator","databasemethods","parser","pgmultirange","creator","databasemethods","parser","pgrange","databasemethods","datasetmethods","parser","pgrow","arrayrow","databasemethods","hashrow","parser","splitter","pgrowop","expressionmethods","rangeop","rangeopmethods","staticcacheupdater","timestamptz","prettytable","s","sql","builders","caseexpression","complexexpression","constant","dateadd","datasetmethods","escapedlikeexpression","expression","function","genericexpression","joinonclause","joinusingclause","orderedexpression","stringagg","datasetmethods","stringmethods","virtualrow","sqlcomments","sqllognormalizer","sqlite","jsonop","jsonopmethods","schema","createtablegenerator","schemacaching","schemadumper","selectremove","sequel4datasetmethods","serverblock","serverlogging","simplemigration","symbolaref","symbolas","threadlocaltimezones","threadedserverblock","timestampmigrator","todot","datasetmethods","unthreadedserverblock","string","inflections","symbol","trueclass","&()","&()","*()","*()","-()","-()","-()","==()","==()","===()","===()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","__value()","_dump()","_import()","_load()","_to_partial_path()","accessed_columns()","add_association_dependencies()","add_enum_value()","add_input_transformer()","add_named_conversion_proc()","add_typecast_on_load_columns()","after_create()","after_destroy()","after_destroy()","after_destroy()","after_destroy()","after_destroy()","after_destroy()","after_initialize()","after_save()","after_save()","after_save()","after_save()","after_save()","after_update()","after_update()","after_update()","after_update()","after_update()","after_update()","after_validation()","akeys()","all()","all()","all()","allow_lazy_load()","allow_lazy_load_for_static_cache_associations()","allow_manual_timestamp_update?()","alter_table_generator()","always_eager_load_concurrently?()","ancestors()","and()","any()","any?()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","apply()","array_elements()","array_elements_text()","array_from_csv()","array_from_json()","array_from_xml()","array_length()","array_length()","array_type()","array_type()","as()","as_hash()","associate()","associate()","associate()","associated()","associated_object_keys()","associated_object_keys()","association_reflection()","async()","at_position()","auto_validate_presence?()","auto_validate_types?()","avals()","before_create()","before_destroy()","before_destroy()","before_destroy()","before_destroy()","before_destroy()","before_save()","before_save()","before_save()","before_update()","before_update()","before_update()","before_update()","before_validation()","before_validation()","before_validation()","before_validation()","before_validation()","before_validation()","before_validation()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","bound_variable_arg()","cache_default_values?()","cache_delete_pk()","cache_get_pk()","cache_get_pk()","cache_key()","cache_key()","cache_key_prefix()","calculate_values_hashes()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","camelcase()","camelize()","can_have_associated_objects?()","can_have_associated_objects?()","cardinality()","case()","case()","case()","change()","changed_columns()","changed_columns()","check_column_conflicts()","check_columns!()","check_current()","classify()","clear()","cloneable?()","column_change()","column_changed?()","column_changes()","column_previously_changed?()","column_previously_was()","column_schema_to_ruby_type()","columns()","columns()","columns()","columns!()","comment()","complex_expression_sql_append()","composition()","compositions()","concat()","concat()","concat()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","configure()","connect()","constant_sql_append()","constantize()","constraint()","contain_all()","contain_all()","contain_any()","contain_any()","contained_by()","contained_by()","contained_by()","contains()","contains()","contains()","convert_infinite_timestamps=()","core_extensions?()","count()","cover?()","cover?()","create()","create_constraint_validations_table()","create_enum()","create_static_cache_update_function()","create_static_cache_update_trigger()","create_table_generator()","create_timestamp_overwrite?()","create_using_server()","cti_table_name()","current()","current_datetime()","current_page()","current_page_record_count()","current_page_record_range()","dasherize()","dataset_need_primary_key?()","date_add()","date_add_sql_append()","date_parse_input_handler()","date_sub()","db_parse_json()","db_parse_jsonb()","db_type()","db_type()","def_dataset_method()","def_sql_commend_method()","default_associated_key_alias()","default_key()","default_key()","default_static_cache_update_name()","define_async_args_or_block_method()","define_async_block_method()","define_async_method()","define_composition_accessor()","defined()","delete()","delete()","delete()","delete()","delete_path()","delete_unused_associations_files()","demodulize()","descendants()","descendants()","descendants()","descendents()","deserialized_values()","dims()","disconnect_connection()","distinct()","down()","down()","drop()","drop_constraint_validations_for()","drop_constraint_validations_table()","drop_enum()","drop_table()","dump_columns()","dump_constraints()","dump_foreign_key_migration()","dump_index_cache()","dump_index_cache?()","dump_indexes()","dump_indexes_migration()","dump_pg_auto_constraint_validations_cache()","dump_schema_cache()","dump_schema_cache?()","dump_schema_migration()","dump_static_cache_cache()","dump_table_schema()","each()","each()","each()","each()","each()","each()","each()","each()","each_page()","each_text()","eager_graph_build_associations()","eager_graph_eager()","eager_graph_limit_strategy()","eager_graph_limit_strategy()","eager_limit_strategy()","eager_limit_strategy()","eager_load_concurrently()","eager_load_results()","eager_load_serially()","empty()","empty?()","empty_array_value()","enum()","eql?()","eql?()","escaped_ilike()","escaped_like()","eval_inspect()","exclude_begin?()","exclude_end?()","exclude_or_null()","exclude_or_null_having()","exclude_where()","exist?()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extract()","extract()","extract_text()","fetch()","fetch_rows()","filter_by_associations_conditions_expression()","filter_by_associations_limit_strategy()","filter_by_associations_limit_strategy()","filter_expr()","finalize_associations()","finalize_settings()","finalize_settings()","finalize_settings()","find_or_new()","finder()","first()","first_page?()","forbid_lazy_load()","foreign_key()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze_descendants()","freeze_descendents()","from()","from()","from_csv()","from_csv()","from_json()","from_json()","from_json_node()","from_range()","from_xml()","from_xml()","from_xml_node()","from_xml_node()","get()","get()","get_column_conflict!()","get_column_value()","get_json()","get_text()","handle_silent_modification_failure?()","handle_silent_modification_failure?()","has_hooks?()","has_key?()","has_key?()","has_validations?()","hash()","hook_blocks()","hook_methods_for()","hstore()","hstore()","hstore()","hstore()","hstore()","hstore()","hstore_op()","humanize()","identifier()","identifier()","identifier_input_method()","identifier_input_method=()","identifier_output_method()","identifier_output_method=()","implicit_table_name()","include?()","include?()","indexes()","inflections()","inherited()","initial_value()","initial_values()","initialize_copy()","input_transformer_order()","insert()","insert()","insert()","insert_conflict()","inspect()","inspect()","instance_filter()","interval()","irregular()","is_current?()","is_current?()","is_current?()","is_distinct?()","join()","join_table()","join_table()","join_table_alias()","json()","json_primitive_wrapper()","json_serializer_opts()","json_serializer_opts()","json_wrapper()","jsonb_primitive_wrapper()","jsonb_wrapper()","key?()","keys()","keys()","last_page?()","last_position()","lazy_attributes()","length()","list_dataset()","listen_for_static_cache_updates()","lit()","lit()","literal_datetime()","literal_duration()","literal_sqltime()","literal_time()","load_cache()","load_index_cache()","load_index_cache?()","load_schema_cache()","load_schema_cache?()","load_typecast()","log_connection_yield()","log_connection_yield()","log_connection_yield()","log_exception()","loose_count()","lower()","many_through_many()","many_to_pg_array()","map()","marshallable!()","member?()","merge()","merge()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","migration()","migrator_class()","minify()","model_name()","move_down()","move_to()","move_to_bottom()","move_to_top()","move_up()","needing_reencryption()","nested_attributes()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_entry()","new_using_server()","next()","next_page()","no_transaction()","normalize_logged_sql()","nullify()","object_to_json_data()","on_duplicate_columns()","one_through_many()","op()","op()","op()","op()","op()","op()","op()","op()","op()","op()","operator()","order()","output()","output()","overlaps()","page_count()","page_range()","page_size()","paginate()","pagination_record_count()","parse()","parse()","parse()","parse()","parse()","parse_json()","patch()","path_exists()","path_exists!()","path_exists_tz!()","path_match()","path_match!()","path_match_tz!()","path_query()","path_query_array()","path_query_array_tz()","path_query_first()","path_query_first_tz()","path_query_tz()","persisted?()","pg_array()","pg_array()","pg_array()","pg_array()","pg_array()","pg_array_op()","pg_array_to_many()","pg_auto_constraint_validation_override()","pg_inet()","pg_inet()","pg_inet_op()","pg_json()","pg_json()","pg_json()","pg_json()","pg_json()","pg_json()","pg_json_op()","pg_json_wrap()","pg_jsonb()","pg_jsonb()","pg_jsonb()","pg_jsonb()","pg_jsonb()","pg_jsonb()","pg_jsonb_op()","pg_jsonb_wrap()","pg_multirange()","pg_range()","pg_range()","pg_range()","pg_range()","pg_range()","pg_range_op()","pg_row()","pg_row()","pg_row()","pg_row()","pg_row_op()","pk_hash()","plural()","pluralize()","populate()","populate()","populate_set()","position_value()","predicate_key()","predicate_key()","prepared_finder()","pretty()","prev()","prev_page()","primary_key()","primary_key()","primary_key_method()","print()","print()","probable_columns()","process()","process_csv_serializer_opts()","push()","query()","query()","quote_identifiers=()","quote_identifiers?()","quote_identifiers?()","range()","reciprocal()","record_set()","reencrypt()","refresh()","register_array_type()","register_format()","register_multirange_type()","register_range_type()","register_row_type()","register_row_type()","remove()","remove()","remove_before_destroy?()","rename_enum()","rename_enum_value()","replace()","replace()","reset_column()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","reverse()","reverse()","root()","root()","root?()","roots()","roots_dataset()","row_proc()","row_type()","row_type()","run()","run()","run()","run_after_commit_hooks()","run_after_rollback_hooks()","save_changes()","select_remove()","self_and_siblings()","separate_query_per_table?()","sequel_ast_transform()","sequel_ast_transform()","serialize_attributes()","set()","set()","set_all()","set_allowed_columns()","set_cache_ttl()","set_column_conflict!()","set_column_value()","set_constant_sql()","set_except()","set_lax()","set_masklen()","set_nested_attributes()","set_only()","set_restricted_columns()","set_server?()","set_update_timestamp_on_create?()","siblings()","single_record!()","singular()","singularize()","skeys()","skip_auto_validations()","skip_auto_validations()","skip_input_transformer()","skip_input_transformer?()","skip_saving_columns=()","skip_string_stripping()","skip_string_stripping?()","skip_superclass_validations()","skip_superclass_validations?()","slice()","splat()","split_noncolumn_values()","sql()","sql_comments_class_methods()","sql_comments_dataset_methods()","sql_comments_instance_methods()","sql_expr()","sql_expr()","sql_expr()","sql_expr()","sql_function()","sql_function()","sql_literal_append()","sql_literal_append()","sql_literal_append()","sql_literal_append()","sql_literal_append()","sql_literal_append()","sql_literal_append()","sql_literal_append()","sql_negate()","sql_negate()","sql_negate()","sql_or()","sql_or()","sql_or()","sql_string_join()","sql_string_join()","sql_value_list()","sql_value_list()","sqlite_json_op()","sqlite_json_op()","static_cache_allow_modifications?()","sti_class_from_key()","sti_class_from_sti_key()","sti_load()","sti_subclass_added()","string()","string_agg()","string_agg_sql_append()","string_to_date()","string_to_datetime()","string_to_time()","strip_nulls()","subclass()","subclass()","subset()","supports_lateral_subqueries?()","svals()","sync()","table_name()","tableize()","timezone=()","titlecase()","titleize()","to_application_timestamp()","to_array()","to_csv()","to_csv()","to_date()","to_datetime()","to_dot()","to_hash()","to_hash_groups()","to_json()","to_json()","to_json()","to_json_data()","to_key()","to_matrix()","to_model()","to_param()","to_partial_path()","to_range()","to_record()","to_recordset()","to_s_append()","to_s_append()","to_s_append()","to_sequel_blob()","to_sequel_blob()","to_sequel_time()","to_string()","to_time()","to_xml()","to_xml()","touch()","touch_associations()","transaction()","tree()","truncate()","type()","typecast()","typeof()","typeof()","unbounded_begin?()","unbounded_end?()","uncountable()","underscore()","unique()","unnest()","unquoted_literal()","unquoted_literal()","unquoted_literal()","unshift()","unused_association_options()","unused_associations()","up()","up()","update()","update_all()","update_associations_coverage()","update_except()","update_only()","update_or_create()","update_sql()","update_unused_associations_data()","use_transactions()","used_association_reflections()","uuid_overwrite?()","valid()","valid?()","valid_ruby_range?()","validate()","validate()","validate()","validate()","validate()","validates()","validates_acceptance_of()","validates_confirmation_of()","validates_each()","validates_exact_length()","validates_format()","validates_format_of()","validates_includes()","validates_inclusion_of()","validates_integer()","validates_length_of()","validates_length_range()","validates_max_length()","validates_min_length()","validates_no_null_byte()","validates_not_null()","validates_numeric()","validates_numericality_of()","validates_operator()","validates_presence()","validates_presence_of()","validates_schema_type()","validates_schema_types()","validates_type()","validates_unique()","validates_uniqueness_of()","validation()","values()","where()","where()","will_change_column()","with_comments()","with_encrypted_value()","with_identifier_input_method()","with_identifier_output_method()","with_server()","with_server()","with_server()","with_sql_each()","with_sql_each()","with_sql_first()","wrap()","xml_builder()","xml_deserialize_name_proc()","xml_serialize_name_proc()","|()","|()","~()","~()","~()","~()","core_extensions"],"longSearchIndex":["array","database","database::asyncthreadpool","database::runtransactionhooks","database::sqlcomments","database::sqlcomments::datasetsqlcomments","falseclass","hash","nilclass","numeric","object","range","sequel","sequel::anynotempty","sequel::arbitraryservers","sequel::callerlogging","sequel::columnsintrospection","sequel::connectionexpiration","sequel::connectionexpiration::retry","sequel::connectionvalidator","sequel::connectionvalidator::retry","sequel::constantsqloverride","sequel::constantsqloverride::databasemethods","sequel::constantsqloverride::datasetmethods","sequel::constraintvalidations","sequel::constraintvalidations::altertablegeneratormethods","sequel::constraintvalidations::createtablegeneratormethods","sequel::constraintvalidations::generator","sequel::corerefinements","sequel::currentdatetimetimestamp","sequel::currentdatetimetimestamp::datasetmethods","sequel::currentdatetimetimestamp::datetime","sequel::currentdatetimetimestamp::time","sequel::database::asyncthreadpool::baseproxy","sequel::database::asyncthreadpool::databasemethods","sequel::database::asyncthreadpool::datasetmethods","sequel::database::asyncthreadpool::preemptableproxy","sequel::database::asyncthreadpool::proxy","sequel::databaseerror","sequel::databasequery","sequel::dataset","sequel::dataset::autoliteralstrings","sequel::dataset::datasetsourcealias","sequel::dataset::implicitsubquery","sequel::dataset::nulldataset","sequel::dataset::nullifiable","sequel::dataset::pagination","sequel::dataset::query","sequel::dataset::roundtimestamps","sequel::dataset::splitarraynil","sequel::dataset::synchronizesql","sequel::datasetpagination","sequel::datasetprinter","sequel::datasetquery","sequel::dateparseinputhandler","sequel::datetimeparsetotime","sequel::duplicatecolumnerror","sequel::duplicatecolumnshandler","sequel::emptyarrayconsidernulls","sequel::errorsql","sequel::evalinspect","sequel::excludeornull","sequel::fiberconcurrency","sequel::grapheach","sequel::identifiermangling","sequel::identifiermangling::databasemethods","sequel::identifiermangling::datasetmethods","sequel::indexcaching","sequel::integer64","sequel::integermigrator","sequel::literalstring","sequel::loosertypecasting","sequel::mssql","sequel::mssql::emulatelateralwithapply","sequel::migration","sequel::migrationaltertablereverser","sequel::migrationdsl","sequel::migrationreverser","sequel::migrator","sequel::migrator::error","sequel::migrator::notcurrenterror","sequel::model","sequel::model::associations","sequel::namedtimezones","sequel::namedtimezones::databasemethods","sequel::plugins","sequel::plugins::accessedcolumns","sequel::plugins::accessedcolumns::instancemethods","sequel::plugins::activemodel","sequel::plugins::activemodel::classmethods","sequel::plugins::activemodel::errors","sequel::plugins::activemodel::instancemethods","sequel::plugins::afterinitialize","sequel::plugins::afterinitialize::classmethods","sequel::plugins::afterinitialize::instancemethods","sequel::plugins::associationdependencies","sequel::plugins::associationdependencies::classmethods","sequel::plugins::associationdependencies::instancemethods","sequel::plugins::associationlazyeageroption","sequel::plugins::associationlazyeageroption::instancemethods","sequel::plugins::associationmultiaddremove","sequel::plugins::associationmultiaddremove::classmethods","sequel::plugins::associationpks","sequel::plugins::associationpks::classmethods","sequel::plugins::associationpks::instancemethods","sequel::plugins::associationproxies","sequel::plugins::associationproxies::associationproxy","sequel::plugins::associationproxies::classmethods","sequel::plugins::asyncthreadpool","sequel::plugins::asyncthreadpool::classmethods","sequel::plugins::asyncthreadpool::datasetmethods","sequel::plugins::autorestricteagergraph","sequel::plugins::autorestricteagergraph::classmethods","sequel::plugins::autovalidations","sequel::plugins::autovalidations::classmethods","sequel::plugins::autovalidations::instancemethods","sequel::plugins::autovalidationsconstraintvalidationspresencemessage","sequel::plugins::autovalidationsconstraintvalidationspresencemessage::classmethods","sequel::plugins::beforeaftersave","sequel::plugins::blacklistsecurity","sequel::plugins::blacklistsecurity::classmethods","sequel::plugins::blacklistsecurity::exceptionlist","sequel::plugins::blacklistsecurity::instancemethods","sequel::plugins::booleanreaders","sequel::plugins::booleanreaders::classmethods","sequel::plugins::booleansubsets","sequel::plugins::booleansubsets::classmethods","sequel::plugins::caching","sequel::plugins::caching::classmethods","sequel::plugins::caching::instancemethods","sequel::plugins::classtableinheritance","sequel::plugins::classtableinheritance::classmethods","sequel::plugins::classtableinheritance::instancemethods","sequel::plugins::columnconflicts","sequel::plugins::columnconflicts::classmethods","sequel::plugins::columnconflicts::instancemethods","sequel::plugins::columnencryption","sequel::plugins::columnencryption::classmethods","sequel::plugins::columnencryption::datasetmethods","sequel::plugins::columnencryption::instancemethods","sequel::plugins::columnselect","sequel::plugins::columnselect::classmethods","sequel::plugins::columnsupdated","sequel::plugins::columnsupdated::instancemethods","sequel::plugins::composition","sequel::plugins::composition::classmethods","sequel::plugins::composition::instancemethods","sequel::plugins::concurrenteagerloading","sequel::plugins::concurrenteagerloading::classmethods","sequel::plugins::concurrenteagerloading::datasetmethods","sequel::plugins::constraintvalidations","sequel::plugins::constraintvalidations::classmethods","sequel::plugins::constraintvalidations::databasemethods","sequel::plugins::constraintvalidations::instancemethods","sequel::plugins::csvserializer","sequel::plugins::csvserializer::classmethods","sequel::plugins::csvserializer::datasetmethods","sequel::plugins::csvserializer::instancemethods","sequel::plugins::datasetassociations","sequel::plugins::datasetassociations::classmethods","sequel::plugins::datasetassociations::datasetmethods","sequel::plugins::defdatasetmethod","sequel::plugins::defdatasetmethod::classmethods","sequel::plugins::defaultssetter","sequel::plugins::defaultssetter::classmethods","sequel::plugins::defaultssetter::instancemethods","sequel::plugins::delayaddassociation","sequel::plugins::delayaddassociation::instancemethods","sequel::plugins::dirty","sequel::plugins::dirty::instancemethods","sequel::plugins::eagereach","sequel::plugins::eagereach::datasetmethods","sequel::plugins::eagergrapheager","sequel::plugins::eagergrapheager::datasetmethods","sequel::plugins::emptyfailurebacktraces","sequel::plugins::emptyfailurebacktraces::instancemethods","sequel::plugins::enum","sequel::plugins::enum::classmethods","sequel::plugins::errorsplitter","sequel::plugins::errorsplitter::instancemethods","sequel::plugins::finder","sequel::plugins::finder::classmethods","sequel::plugins::forbidlazyload","sequel::plugins::forbidlazyload::classmethods","sequel::plugins::forbidlazyload::datasetmethods","sequel::plugins::forbidlazyload::error","sequel::plugins::forbidlazyload::instancemethods","sequel::plugins::forceencoding","sequel::plugins::forceencoding::classmethods","sequel::plugins::forceencoding::instancemethods","sequel::plugins::hookclassmethods","sequel::plugins::hookclassmethods::classmethods","sequel::plugins::hookclassmethods::instancemethods","sequel::plugins::inputtransformer","sequel::plugins::inputtransformer::classmethods","sequel::plugins::inputtransformer::instancemethods","sequel::plugins::insertconflict","sequel::plugins::insertconflict::instancemethods","sequel::plugins::insertreturningselect","sequel::plugins::insertreturningselect::classmethods","sequel::plugins::insertreturningselect::instancemethods","sequel::plugins::instancefilters","sequel::plugins::instancefilters::instancemethods","sequel::plugins::instancehooks","sequel::plugins::instancehooks::instancemethods","sequel::plugins::instancespecificdefault","sequel::plugins::instancespecificdefault::classmethods","sequel::plugins::invertedsubsets","sequel::plugins::invertedsubsets::datasetmodulemethods","sequel::plugins::jsonserializer","sequel::plugins::jsonserializer::classmethods","sequel::plugins::jsonserializer::datasetmethods","sequel::plugins::jsonserializer::instancemethods","sequel::plugins::jsonserializer::literal","sequel::plugins::lazyattributes","sequel::plugins::lazyattributes::classmethods","sequel::plugins::lazyattributes::instancemethods","sequel::plugins::list","sequel::plugins::list::classmethods","sequel::plugins::list::instancemethods","sequel::plugins::manythroughmany","sequel::plugins::manythroughmany::classmethods","sequel::plugins::manythroughmany::datasetmethods","sequel::plugins::manythroughmany::manythroughmanyassociationreflection","sequel::plugins::manythroughmany::onethroughmanyassociationreflection","sequel::plugins::modificationdetection","sequel::plugins::modificationdetection::classmethods","sequel::plugins::modificationdetection::instancemethods","sequel::plugins::mssqloptimisticlocking","sequel::plugins::mssqloptimisticlocking::classmethods","sequel::plugins::mssqloptimisticlocking::instancemethods","sequel::plugins::nestedattributes","sequel::plugins::nestedattributes::classmethods","sequel::plugins::nestedattributes::instancemethods","sequel::plugins::optimisticlocking","sequel::plugins::optimisticlocking::classmethods","sequel::plugins::optimisticlocking::instancemethods","sequel::plugins::pgarrayassociations","sequel::plugins::pgarrayassociations::classmethods","sequel::plugins::pgarrayassociations::datasetmethods","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection","sequel::plugins::pgautoconstraintvalidations","sequel::plugins::pgautoconstraintvalidations::classmethods","sequel::plugins::pgautoconstraintvalidations::instancemethods","sequel::plugins::pgrow","sequel::plugins::pgrow::classmethods","sequel::plugins::pgrow::databasemethods","sequel::plugins::pgrow::instancemethods","sequel::plugins::preparedstatements","sequel::plugins::preparedstatements::classmethods","sequel::plugins::preparedstatements::instancemethods","sequel::plugins::preparedstatementssafe","sequel::plugins::preparedstatementssafe::classmethods","sequel::plugins::preparedstatementssafe::instancemethods","sequel::plugins::rctetree","sequel::plugins::serialization","sequel::plugins::serialization::classmethods","sequel::plugins::serialization::instancemethods","sequel::plugins::serializationmodificationdetection","sequel::plugins::serializationmodificationdetection::instancemethods","sequel::plugins::sharding","sequel::plugins::sharding::classmethods","sequel::plugins::sharding::datasetmethods","sequel::plugins::sharding::instancemethods","sequel::plugins::singletableinheritance","sequel::plugins::singletableinheritance::classmethods","sequel::plugins::singletableinheritance::instancemethods","sequel::plugins::singulartablenames","sequel::plugins::singulartablenames::classmethods","sequel::plugins::skipcreaterefresh","sequel::plugins::skipcreaterefresh::instancemethods","sequel::plugins::skipsavingcolumns","sequel::plugins::skipsavingcolumns::classmethods","sequel::plugins::skipsavingcolumns::instancemethods","sequel::plugins::splitvalues","sequel::plugins::splitvalues::classmethods","sequel::plugins::splitvalues::instancemethods","sequel::plugins::sqlcomments","sequel::plugins::sqlcomments::classmethods","sequel::plugins::sqlcomments::datasetmethods","sequel::plugins::sqlcomments::instancemethods","sequel::plugins::staticcache","sequel::plugins::staticcache::classmethods","sequel::plugins::staticcache::instancemethods","sequel::plugins::staticcachecache","sequel::plugins::staticcachecache::classmethods","sequel::plugins::stringstripper","sequel::plugins::stringstripper::classmethods","sequel::plugins::subclasses","sequel::plugins::subclasses::classmethods","sequel::plugins::subsetconditions","sequel::plugins::subsetconditions::datasetmodulemethods","sequel::plugins::tableselect","sequel::plugins::tableselect::classmethods","sequel::plugins::tacticaleagerloading","sequel::plugins::tacticaleagerloading::datasetmethods","sequel::plugins::tacticaleagerloading::instancemethods","sequel::plugins::throwfailures","sequel::plugins::throwfailures::instancemethods","sequel::plugins::timestamps","sequel::plugins::timestamps::classmethods","sequel::plugins::timestamps::instancemethods","sequel::plugins::touch","sequel::plugins::touch::classmethods","sequel::plugins::touch::instancemethods","sequel::plugins::tree","sequel::plugins::tree::classmethods","sequel::plugins::tree::datasetmethods","sequel::plugins::tree::instancemethods","sequel::plugins::tree::singleroot","sequel::plugins::tree::singleroot::classmethods","sequel::plugins::tree::singleroot::instancemethods","sequel::plugins::tree::treemultiplerooterror","sequel::plugins::typecastonload","sequel::plugins::typecastonload::classmethods","sequel::plugins::typecastonload::instancemethods","sequel::plugins::unlimitedupdate","sequel::plugins::unlimitedupdate::instancemethods","sequel::plugins::unusedassociations","sequel::plugins::unusedassociations::classmethods","sequel::plugins::updateorcreate","sequel::plugins::updateorcreate::classmethods","sequel::plugins::updateprimarykey","sequel::plugins::updateprimarykey::instancemethods","sequel::plugins::updaterefresh","sequel::plugins::updaterefresh::classmethods","sequel::plugins::updaterefresh::instancemethods","sequel::plugins::uuid","sequel::plugins::uuid::classmethods","sequel::plugins::uuid::instancemethods","sequel::plugins::validateassociated","sequel::plugins::validateassociated::instancemethods","sequel::plugins::validationclassmethods","sequel::plugins::validationclassmethods::classmethods","sequel::plugins::validationclassmethods::classmethods::generator","sequel::plugins::validationclassmethods::instancemethods","sequel::plugins::validationcontexts","sequel::plugins::validationcontexts::instancemethods","sequel::plugins::validationhelpers","sequel::plugins::validationhelpers::instancemethods","sequel::plugins::whitelistsecurity","sequel::plugins::whitelistsecurity::classmethods","sequel::plugins::whitelistsecurity::instancemethods","sequel::plugins::xmlserializer","sequel::plugins::xmlserializer::classmethods","sequel::plugins::xmlserializer::datasetmethods","sequel::plugins::xmlserializer::instancemethods","sequel::postgres","sequel::postgres::arrayop","sequel::postgres::arrayopmethods","sequel::postgres::enumdatabasemethods","sequel::postgres::extendeddatesupport","sequel::postgres::extendeddatesupport::datasetmethods","sequel::postgres::hstore","sequel::postgres::hstore::databasemethods","sequel::postgres::hstore::parser","sequel::postgres::hstoreop","sequel::postgres::hstoreopmethods","sequel::postgres::hstoresubscriptop","sequel::postgres::inetdatabasemethods","sequel::postgres::inetdatasetmethods","sequel::postgres::inetop","sequel::postgres::inetopmethods","sequel::postgres::intervaldatabasemethods","sequel::postgres::intervaldatabasemethods::parser","sequel::postgres::intervaldatasetmethods","sequel::postgres::jsonarray","sequel::postgres::jsonbarray","sequel::postgres::jsonbhash","sequel::postgres::jsonbobject","sequel::postgres::jsonbop","sequel::postgres::jsonbsubscriptop","sequel::postgres::jsonbaseop","sequel::postgres::jsondatabasemethods","sequel::postgres::jsonhash","sequel::postgres::jsonobject","sequel::postgres::jsonop","sequel::postgres::jsonopmethods","sequel::postgres::loosecount","sequel::postgres::pgarray","sequel::postgres::pgarray::creator","sequel::postgres::pgarray::databasemethods","sequel::postgres::pgarray::parser","sequel::postgres::pgmultirange","sequel::postgres::pgmultirange::creator","sequel::postgres::pgmultirange::databasemethods","sequel::postgres::pgmultirange::parser","sequel::postgres::pgrange","sequel::postgres::pgrange::databasemethods","sequel::postgres::pgrange::datasetmethods","sequel::postgres::pgrange::parser","sequel::postgres::pgrow","sequel::postgres::pgrow::arrayrow","sequel::postgres::pgrow::databasemethods","sequel::postgres::pgrow::hashrow","sequel::postgres::pgrow::parser","sequel::postgres::pgrow::splitter","sequel::postgres::pgrowop","sequel::postgres::pgrowop::expressionmethods","sequel::postgres::rangeop","sequel::postgres::rangeopmethods","sequel::postgres::staticcacheupdater","sequel::postgres::timestamptz","sequel::prettytable","sequel::s","sequel::sql","sequel::sql::builders","sequel::sql::caseexpression","sequel::sql::complexexpression","sequel::sql::constant","sequel::sql::dateadd","sequel::sql::dateadd::datasetmethods","sequel::sql::escapedlikeexpression","sequel::sql::expression","sequel::sql::function","sequel::sql::genericexpression","sequel::sql::joinonclause","sequel::sql::joinusingclause","sequel::sql::orderedexpression","sequel::sql::stringagg","sequel::sql::stringagg::datasetmethods","sequel::sql::stringmethods","sequel::sql::virtualrow","sequel::sqlcomments","sequel::sqllognormalizer","sequel::sqlite","sequel::sqlite::jsonop","sequel::sqlite::jsonopmethods","sequel::schema","sequel::schema::createtablegenerator","sequel::schemacaching","sequel::schemadumper","sequel::selectremove","sequel::sequel4datasetmethods","sequel::serverblock","sequel::serverlogging","sequel::simplemigration","sequel::symbolaref","sequel::symbolas","sequel::threadlocaltimezones","sequel::threadedserverblock","sequel::timestampmigrator","sequel::todot","sequel::todot::datasetmethods","sequel::unthreadedserverblock","string","string::inflections","symbol","trueclass","hash#&()","sequel::corerefinements#&()","sequel::corerefinements#*()","sequel::postgres::pgrowop#*()","sequel::postgres::hstoreop#-()","sequel::postgres::inetop#-()","sequel::postgres::jsonbop#-()","sequel::postgres::pgmultirange#==()","sequel::postgres::pgrange#==()","sequel::postgres::pgmultirange#===()","sequel::postgres::pgrange#===()","sequel::plugins::accessedcolumns::instancemethods#[]()","sequel::plugins::activemodel::errors#[]()","sequel::plugins::defaultssetter::instancemethods#[]()","sequel::plugins::splitvalues::instancemethods#[]()","sequel::postgres::arrayop#[]()","sequel::postgres::hstoreop#[]()","sequel::postgres::jsonbop#[]()","sequel::postgres::jsonbaseop#[]()","sequel::postgres::pgrowop#[]()","sequel::sqlite::jsonop#[]()","sequel::symbolaref#[]()","symbol#[]()","sequel::plugins::inputtransformer::instancemethods#[]=()","sequel::database::asyncthreadpool::baseproxy#__value()","sequel::postgres::hstore#_dump()","sequel::dataset::nulldataset#_import()","sequel::postgres::hstore::_load()","sequel::plugins::activemodel::classmethods#_to_partial_path()","sequel::plugins::accessedcolumns::instancemethods#accessed_columns()","sequel::plugins::associationdependencies::classmethods#add_association_dependencies()","sequel::postgres::enumdatabasemethods#add_enum_value()","sequel::plugins::inputtransformer::classmethods#add_input_transformer()","sequel::postgres::pgarray::databasemethods#add_named_conversion_proc()","sequel::plugins::typecastonload::classmethods#add_typecast_on_load_columns()","sequel::plugins::touch::instancemethods#after_create()","sequel::plugins::activemodel::instancemethods#after_destroy()","sequel::plugins::associationdependencies::instancemethods#after_destroy()","sequel::plugins::instancefilters::instancemethods#after_destroy()","sequel::plugins::instancehooks::instancemethods#after_destroy()","sequel::plugins::list::instancemethods#after_destroy()","sequel::plugins::touch::instancemethods#after_destroy()","sequel::plugins::afterinitialize::instancemethods#after_initialize()","sequel::plugins::accessedcolumns::instancemethods#after_save()","sequel::plugins::associationpks::instancemethods#after_save()","sequel::plugins::dirty::instancemethods#after_save()","sequel::plugins::instancehooks::instancemethods#after_save()","sequel::plugins::serializationmodificationdetection::instancemethods#after_save()","sequel::plugins::dirty::instancemethods#after_update()","sequel::plugins::instancefilters::instancemethods#after_update()","sequel::plugins::modificationdetection::instancemethods#after_update()","sequel::plugins::touch::instancemethods#after_update()","sequel::plugins::updateprimarykey::instancemethods#after_update()","sequel::plugins::updaterefresh::instancemethods#after_update()","sequel::plugins::instancehooks::instancemethods#after_validation()","sequel::postgres::hstoreop#akeys()","sequel::plugins::eagereach::datasetmethods#all()","sequel::plugins::staticcache::classmethods#all()","sequel::postgres::arrayop#all()","sequel::plugins::forbidlazyload::instancemethods#allow_lazy_load()","sequel::plugins::forbidlazyload::classmethods#allow_lazy_load_for_static_cache_associations()","sequel::plugins::timestamps::classmethods#allow_manual_timestamp_update?()","sequel::constraintvalidations#alter_table_generator()","sequel::plugins::concurrenteagerloading::classmethods#always_eager_load_concurrently?()","sequel::plugins::tree::instancemethods#ancestors()","sequel::sequel4datasetmethods#and()","sequel::postgres::arrayop#any()","sequel::anynotempty#any?()","sequel::migration::apply()","sequel::migrator::apply()","sequel::plugins::associationdependencies::apply()","sequel::plugins::autovalidations::apply()","sequel::plugins::autovalidationsconstraintvalidationspresencemessage::apply()","sequel::plugins::classtableinheritance::apply()","sequel::plugins::columnconflicts::apply()","sequel::plugins::columnencryption::apply()","sequel::plugins::composition::apply()","sequel::plugins::constraintvalidations::apply()","sequel::plugins::delayaddassociation::apply()","sequel::plugins::finder::apply()","sequel::plugins::hookclassmethods::apply()","sequel::plugins::inputtransformer::apply()","sequel::plugins::invertedsubsets::apply()","sequel::plugins::lazyattributes::apply()","sequel::plugins::mssqloptimisticlocking::apply()","sequel::plugins::nestedattributes::apply()","sequel::plugins::optimisticlocking::apply()","sequel::plugins::pgarrayassociations::apply()","sequel::plugins::preparedstatements::apply()","sequel::plugins::preparedstatementssafe::apply()","sequel::plugins::rctetree::apply()","sequel::plugins::serialization::apply()","sequel::plugins::serializationmodificationdetection::apply()","sequel::plugins::stringstripper::apply()","sequel::plugins::subclasses::apply()","sequel::plugins::subsetconditions::apply()","sequel::plugins::touch::apply()","sequel::plugins::tree::apply()","sequel::plugins::unusedassociations::apply()","sequel::plugins::validateassociated::apply()","sequel::plugins::validationclassmethods::apply()","sequel::simplemigration#apply()","sequel::postgres::jsonbaseop#array_elements()","sequel::postgres::jsonbaseop#array_elements_text()","sequel::plugins::csvserializer::classmethods#array_from_csv()","sequel::plugins::jsonserializer::classmethods#array_from_json()","sequel::plugins::xmlserializer::classmethods#array_from_xml()","sequel::postgres::jsonbaseop#array_length()","sequel::sqlite::jsonop#array_length()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#array_type()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#array_type()","sequel::symbolas#as()","sequel::plugins::staticcache::classmethods#as_hash()","sequel::plugins::autorestricteagergraph::classmethods#associate()","sequel::plugins::datasetassociations::classmethods#associate()","sequel::plugins::unusedassociations::classmethods#associate()","sequel::plugins::datasetassociations::datasetmethods#associated()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#associated_object_keys()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#associated_object_keys()","sequel::plugins::unusedassociations::classmethods#association_reflection()","sequel::database::asyncthreadpool::datasetmethods#async()","sequel::plugins::list::instancemethods#at_position()","sequel::plugins::autovalidations::classmethods#auto_validate_presence?()","sequel::plugins::autovalidations::classmethods#auto_validate_types?()","sequel::postgres::hstoreop#avals()","sequel::plugins::preparedstatementssafe::instancemethods#before_create()","sequel::plugins::associationdependencies::instancemethods#before_destroy()","sequel::plugins::instancehooks::instancemethods#before_destroy()","sequel::plugins::mssqloptimisticlocking::instancemethods#before_destroy()","sequel::plugins::optimisticlocking::instancemethods#before_destroy()","sequel::plugins::staticcache::instancemethods#before_destroy()","sequel::plugins::instancehooks::instancemethods#before_save()","sequel::plugins::staticcache::instancemethods#before_save()","sequel::plugins::tree::singleroot::instancemethods#before_save()","sequel::plugins::caching::instancemethods#before_update()","sequel::plugins::mssqloptimisticlocking::instancemethods#before_update()","sequel::plugins::optimisticlocking::instancemethods#before_update()","sequel::plugins::timestamps::instancemethods#before_update()","sequel::plugins::classtableinheritance::instancemethods#before_validation()","sequel::plugins::composition::instancemethods#before_validation()","sequel::plugins::list::instancemethods#before_validation()","sequel::plugins::serialization::instancemethods#before_validation()","sequel::plugins::singletableinheritance::instancemethods#before_validation()","sequel::plugins::timestamps::instancemethods#before_validation()","sequel::plugins::uuid::instancemethods#before_validation()","falseclass#blank?()","nilclass#blank?()","numeric#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","sequel::plugins::pgrow::databasemethods#bound_variable_arg()","sequel::postgres::hstore::databasemethods#bound_variable_arg()","sequel::postgres::inetdatabasemethods#bound_variable_arg()","sequel::postgres::intervaldatabasemethods#bound_variable_arg()","sequel::postgres::jsondatabasemethods#bound_variable_arg()","sequel::postgres::pgarray::databasemethods#bound_variable_arg()","sequel::postgres::pgmultirange::databasemethods#bound_variable_arg()","sequel::postgres::pgrange::databasemethods#bound_variable_arg()","sequel::postgres::pgrow::databasemethods#bound_variable_arg()","sequel::plugins::defaultssetter::classmethods#cache_default_values?()","sequel::plugins::caching::classmethods#cache_delete_pk()","sequel::plugins::caching::classmethods#cache_get_pk()","sequel::plugins::staticcache::classmethods#cache_get_pk()","sequel::plugins::caching::classmethods#cache_key()","sequel::plugins::caching::instancemethods#cache_key()","sequel::plugins::caching::classmethods#cache_key_prefix()","sequel::plugins::modificationdetection::instancemethods#calculate_values_hashes()","sequel::plugins::afterinitialize::classmethods#call()","sequel::plugins::forceencoding::classmethods#call()","sequel::plugins::modificationdetection::classmethods#call()","sequel::plugins::splitvalues::classmethods#call()","sequel::plugins::typecastonload::classmethods#call()","sequel::postgres::intervaldatabasemethods::parser#call()","sequel::postgres::pgarray::creator#call()","sequel::postgres::pgmultirange::creator#call()","sequel::postgres::pgrange::parser#call()","sequel::postgres::pgrow::parser#call()","string#camelcase()","string#camelize()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#can_have_associated_objects?()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#can_have_associated_objects?()","sequel::postgres::arrayop#cardinality()","array#case()","hash#case()","sequel::corerefinements#case()","sequel::migrationdsl#change()","sequel::plugins::modificationdetection::instancemethods#changed_columns()","sequel::plugins::serializationmodificationdetection::instancemethods#changed_columns()","sequel::plugins::columnconflicts::classmethods#check_column_conflicts()","sequel::postgres::pgrow::hashrow#check_columns!()","sequel::migrator::check_current()","string#classify()","string::inflections::clear()","sequel::plugins::manythroughmany::manythroughmanyassociationreflection#cloneable?()","sequel::plugins::dirty::instancemethods#column_change()","sequel::plugins::dirty::instancemethods#column_changed?()","sequel::plugins::dirty::instancemethods#column_changes()","sequel::plugins::dirty::instancemethods#column_previously_changed?()","sequel::plugins::dirty::instancemethods#column_previously_was()","sequel::schemadumper#column_schema_to_ruby_type()","sequel::columnsintrospection#columns()","sequel::dataset::nulldataset#columns()","sequel::postgres::pgrow::hashrow#columns()","sequel::plugins::eagereach::datasetmethods#columns!()","sequel::sqlcomments#comment()","sequel::dataset::splitarraynil#complex_expression_sql_append()","sequel::plugins::composition::classmethods#composition()","sequel::plugins::composition::instancemethods#compositions()","sequel::postgres::arrayop#concat()","sequel::postgres::hstoreop#concat()","sequel::postgres::jsonbop#concat()","sequel::plugins::associationdependencies::configure()","sequel::plugins::associationproxies::configure()","sequel::plugins::autovalidations::configure()","sequel::plugins::autovalidationsconstraintvalidationspresencemessage::configure()","sequel::plugins::booleanreaders::configure()","sequel::plugins::booleansubsets::configure()","sequel::plugins::caching::configure()","sequel::plugins::classtableinheritance::configure()","sequel::plugins::columnconflicts::configure()","sequel::plugins::columnencryption::configure()","sequel::plugins::columnselect::configure()","sequel::plugins::concurrenteagerloading::configure()","sequel::plugins::constraintvalidations::configure()","sequel::plugins::csvserializer::configure()","sequel::plugins::defaultssetter::configure()","sequel::plugins::forceencoding::configure()","sequel::plugins::inputtransformer::configure()","sequel::plugins::insertconflict::configure()","sequel::plugins::insertreturningselect::configure()","sequel::plugins::instancefilters::configure()","sequel::plugins::instancespecificdefault::configure()","sequel::plugins::jsonserializer::configure()","sequel::plugins::lazyattributes::configure()","sequel::plugins::list::configure()","sequel::plugins::mssqloptimisticlocking::configure()","sequel::plugins::optimisticlocking::configure()","sequel::plugins::pgautoconstraintvalidations::configure()","sequel::plugins::pgrow::configure()","sequel::plugins::preparedstatementssafe::configure()","sequel::plugins::serialization::configure()","sequel::plugins::singletableinheritance::configure()","sequel::plugins::skipsavingcolumns::configure()","sequel::plugins::sqlcomments::configure()","sequel::plugins::staticcache::configure()","sequel::plugins::staticcachecache::configure()","sequel::plugins::stringstripper::configure()","sequel::plugins::tableselect::configure()","sequel::plugins::timestamps::configure()","sequel::plugins::touch::configure()","sequel::plugins::typecastonload::configure()","sequel::plugins::unusedassociations::configure()","sequel::plugins::updaterefresh::configure()","sequel::plugins::uuid::configure()","sequel::serverlogging#connect()","sequel::constantsqloverride::datasetmethods#constant_sql_append()","string#constantize()","sequel::constraintvalidations::altertablegeneratormethods#constraint()","sequel::postgres::hstoreop#contain_all()","sequel::postgres::jsonbop#contain_all()","sequel::postgres::hstoreop#contain_any()","sequel::postgres::jsonbop#contain_any()","sequel::postgres::arrayop#contained_by()","sequel::postgres::hstoreop#contained_by()","sequel::postgres::jsonbop#contained_by()","sequel::postgres::arrayop#contains()","sequel::postgres::hstoreop#contains()","sequel::postgres::jsonbop#contains()","sequel::postgres::extendeddatesupport#convert_infinite_timestamps=()","sequel::core_extensions?()","sequel::plugins::staticcache::classmethods#count()","sequel::postgres::pgmultirange#cover?()","sequel::postgres::pgrange#cover?()","sequel::migrationdsl::create()","sequel::constraintvalidations#create_constraint_validations_table()","sequel::postgres::enumdatabasemethods#create_enum()","sequel::postgres::staticcacheupdater#create_static_cache_update_function()","sequel::postgres::staticcacheupdater#create_static_cache_update_trigger()","sequel::constraintvalidations#create_table_generator()","sequel::plugins::timestamps::classmethods#create_timestamp_overwrite?()","sequel::plugins::sharding::classmethods#create_using_server()","sequel::plugins::classtableinheritance::classmethods#cti_table_name()","sequel::fiberconcurrency#current()","sequel::currentdatetimetimestamp::datasetmethods#current_datetime()","sequel::dataset::pagination#current_page()","sequel::dataset::pagination#current_page_record_count()","sequel::dataset::pagination#current_page_record_range()","string#dasherize()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#dataset_need_primary_key?()","sequel::sql::builders#date_add()","sequel::sql::dateadd::datasetmethods#date_add_sql_append()","sequel::dateparseinputhandler#date_parse_input_handler()","sequel::sql::builders#date_sub()","sequel::postgres::jsondatabasemethods::db_parse_json()","sequel::postgres::jsondatabasemethods::db_parse_jsonb()","sequel::postgres::pgrow::arrayrow#db_type()","sequel::postgres::pgrow::hashrow#db_type()","sequel::plugins::defdatasetmethod::classmethods#def_dataset_method()","sequel::plugins::sqlcomments::def_sql_commend_method()","sequel::plugins::manythroughmany::manythroughmanyassociationreflection#default_associated_key_alias()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#default_key()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#default_key()","sequel::postgres::staticcacheupdater#default_static_cache_update_name()","sequel::database::asyncthreadpool::datasetmethods::define_async_args_or_block_method()","sequel::database::asyncthreadpool::datasetmethods::define_async_block_method()","sequel::database::asyncthreadpool::datasetmethods::define_async_method()","sequel::plugins::composition::classmethods#define_composition_accessor()","sequel::postgres::hstoreop#defined()","sequel::dataset::nulldataset#delete()","sequel::plugins::caching::instancemethods#delete()","sequel::plugins::classtableinheritance::instancemethods#delete()","sequel::postgres::hstoreop#delete()","sequel::postgres::jsonbop#delete_path()","sequel::plugins::unusedassociations::classmethods#delete_unused_associations_files()","string#demodulize()","sequel::migration::descendants()","sequel::plugins::subclasses::classmethods#descendants()","sequel::plugins::tree::instancemethods#descendants()","sequel::plugins::subclasses::classmethods#descendents()","sequel::plugins::serialization::instancemethods#deserialized_values()","sequel::postgres::arrayop#dims()","sequel::serverlogging#disconnect_connection()","sequel::sql::stringagg#distinct()","sequel::migration#down()","sequel::migrationdsl#down()","sequel::constraintvalidations::generator#drop()","sequel::constraintvalidations#drop_constraint_validations_for()","sequel::constraintvalidations#drop_constraint_validations_table()","sequel::postgres::enumdatabasemethods#drop_enum()","sequel::constraintvalidations#drop_table()","sequel::schema::createtablegenerator#dump_columns()","sequel::schema::createtablegenerator#dump_constraints()","sequel::schemadumper#dump_foreign_key_migration()","sequel::indexcaching#dump_index_cache()","sequel::indexcaching#dump_index_cache?()","sequel::schema::createtablegenerator#dump_indexes()","sequel::schemadumper#dump_indexes_migration()","sequel::plugins::pgautoconstraintvalidations::classmethods#dump_pg_auto_constraint_validations_cache()","sequel::schemacaching#dump_schema_cache()","sequel::schemacaching#dump_schema_cache?()","sequel::schemadumper#dump_schema_migration()","sequel::plugins::staticcachecache::classmethods#dump_static_cache_cache()","sequel::schemadumper#dump_table_schema()","sequel::dataset::nulldataset#each()","sequel::grapheach#each()","sequel::plugins::eagereach::datasetmethods#each()","sequel::plugins::forbidlazyload::datasetmethods#each()","sequel::plugins::staticcache::classmethods#each()","sequel::postgres::hstoreop#each()","sequel::postgres::jsonbaseop#each()","sequel::sqlite::jsonop#each()","sequel::datasetpagination#each_page()","sequel::postgres::jsonbaseop#each_text()","sequel::plugins::eagergrapheager::datasetmethods#eager_graph_build_associations()","sequel::plugins::eagergrapheager::datasetmethods#eager_graph_eager()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#eager_graph_limit_strategy()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#eager_graph_limit_strategy()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#eager_limit_strategy()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#eager_limit_strategy()","sequel::plugins::concurrenteagerloading::datasetmethods#eager_load_concurrently()","sequel::plugins::sharding::classmethods#eager_load_results()","sequel::plugins::concurrenteagerloading::datasetmethods#eager_load_serially()","sequel::postgres::pgrange::empty()","sequel::postgres::pgrange#empty?()","sequel::emptyarrayconsidernulls#empty_array_value()","sequel::plugins::enum::classmethods#enum()","sequel::postgres::pgmultirange#eql?()","sequel::postgres::pgrange#eql?()","sequel::sql::stringmethods#escaped_ilike()","sequel::sql::stringmethods#escaped_like()","sequel::evalinspect#eval_inspect()","sequel::postgres::pgrange#exclude_begin?()","sequel::postgres::pgrange#exclude_end?()","sequel::excludeornull#exclude_or_null()","sequel::excludeornull#exclude_or_null_having()","sequel::sequel4datasetmethods#exclude_where()","sequel::postgres::hstoreop#exist?()","database::sqlcomments::extended()","sequel::connectionexpiration::extended()","sequel::connectionvalidator::extended()","sequel::constantsqloverride::databasemethods::extended()","sequel::constraintvalidations::extended()","sequel::database::asyncthreadpool::databasemethods::extended()","sequel::databasequery::extended()","sequel::identifiermangling::databasemethods::extended()","sequel::indexcaching::extended()","sequel::postgres::enumdatabasemethods::extended()","sequel::postgres::extendeddatesupport::extended()","sequel::postgres::hstore::databasemethods::extended()","sequel::postgres::inetdatabasemethods::extended()","sequel::postgres::intervaldatabasemethods::extended()","sequel::postgres::jsondatabasemethods::extended()","sequel::postgres::pgarray::databasemethods::extended()","sequel::postgres::pgmultirange::databasemethods::extended()","sequel::postgres::pgrange::databasemethods::extended()","sequel::postgres::pgrow::databasemethods::extended()","sequel::sqllognormalizer::extended()","sequel::serverblock::extended()","sequel::serverlogging::extended()","sequel::postgres::jsonbaseop#extract()","sequel::sqlite::jsonop#extract()","sequel::postgres::jsonbaseop#extract_text()","sequel::postgres::hstore#fetch()","sequel::dataset::nulldataset#fetch_rows()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#filter_by_associations_conditions_expression()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#filter_by_associations_limit_strategy()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#filter_by_associations_limit_strategy()","sequel::dataset::autoliteralstrings#filter_expr()","sequel::plugins::forbidlazyload::classmethods#finalize_associations()","sequel::plugins::manythroughmany::manythroughmanyassociationreflection#finalize_settings()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#finalize_settings()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#finalize_settings()","sequel::plugins::updateorcreate::classmethods#find_or_new()","sequel::plugins::finder::classmethods#finder()","sequel::plugins::staticcache::classmethods#first()","sequel::dataset::pagination#first_page?()","sequel::plugins::forbidlazyload::instancemethods#forbid_lazy_load()","string#foreign_key()","sequel::constantsqloverride::databasemethods#freeze()","sequel::plugins::activemodel::classmethods#freeze()","sequel::plugins::associationdependencies::classmethods#freeze()","sequel::plugins::autovalidations::classmethods#freeze()","sequel::plugins::blacklistsecurity::classmethods#freeze()","sequel::plugins::classtableinheritance::classmethods#freeze()","sequel::plugins::columnconflicts::classmethods#freeze()","sequel::plugins::composition::classmethods#freeze()","sequel::plugins::composition::instancemethods#freeze()","sequel::plugins::constraintvalidations::classmethods#freeze()","sequel::plugins::csvserializer::classmethods#freeze()","sequel::plugins::defaultssetter::classmethods#freeze()","sequel::plugins::dirty::instancemethods#freeze()","sequel::plugins::finder::classmethods#freeze()","sequel::plugins::hookclassmethods::classmethods#freeze()","sequel::plugins::inputtransformer::classmethods#freeze()","sequel::plugins::instancefilters::instancemethods#freeze()","sequel::plugins::jsonserializer::classmethods#freeze()","sequel::plugins::lazyattributes::classmethods#freeze()","sequel::plugins::nestedattributes::classmethods#freeze()","sequel::plugins::preparedstatementssafe::classmethods#freeze()","sequel::plugins::serialization::classmethods#freeze()","sequel::plugins::serialization::instancemethods#freeze()","sequel::plugins::serializationmodificationdetection::instancemethods#freeze()","sequel::plugins::singletableinheritance::classmethods#freeze()","sequel::plugins::touch::classmethods#freeze()","sequel::plugins::tree::classmethods#freeze()","sequel::plugins::typecastonload::classmethods#freeze()","sequel::plugins::unusedassociations::classmethods#freeze()","sequel::plugins::updaterefresh::classmethods#freeze()","sequel::plugins::validationclassmethods::classmethods#freeze()","sequel::plugins::whitelistsecurity::classmethods#freeze()","sequel::postgres::pgarray::databasemethods#freeze()","sequel::postgres::pgmultirange::databasemethods#freeze()","sequel::postgres::pgrange::databasemethods#freeze()","sequel::postgres::pgrow::databasemethods#freeze()","sequel::plugins::subclasses::classmethods#freeze_descendants()","sequel::plugins::subclasses::classmethods#freeze_descendents()","sequel::dataset::datasetsourcealias#from()","sequel::mssql::emulatelateralwithapply#from()","sequel::plugins::csvserializer::classmethods#from_csv()","sequel::plugins::csvserializer::instancemethods#from_csv()","sequel::plugins::jsonserializer::classmethods#from_json()","sequel::plugins::jsonserializer::instancemethods#from_json()","sequel::plugins::jsonserializer::instancemethods#from_json_node()","sequel::postgres::pgrange::from_range()","sequel::plugins::xmlserializer::classmethods#from_xml()","sequel::plugins::xmlserializer::instancemethods#from_xml()","sequel::plugins::xmlserializer::classmethods#from_xml_node()","sequel::plugins::xmlserializer::instancemethods#from_xml_node()","sequel::postgres::jsonbaseop#get()","sequel::sqlite::jsonop#get()","sequel::plugins::columnconflicts::classmethods#get_column_conflict!()","sequel::plugins::columnconflicts::instancemethods#get_column_value()","sequel::sqlite::jsonop#get_json()","sequel::postgres::jsonbaseop#get_text()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#handle_silent_modification_failure?()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#handle_silent_modification_failure?()","sequel::plugins::hookclassmethods::classmethods#has_hooks?()","sequel::postgres::hstoreop#has_key?()","sequel::postgres::jsonbop#has_key?()","sequel::plugins::validationclassmethods::classmethods#has_validations?()","sequel::postgres::pgrange#hash()","sequel::plugins::hookclassmethods::classmethods#hook_blocks()","sequel::plugins::hookclassmethods::classmethods#hook_methods_for()","hash#hstore()","sequel::corerefinements#hstore()","sequel::postgres::arrayop#hstore()","sequel::postgres::hstoreop#hstore()","sequel::postgres::hstoreopmethods#hstore()","sequel::sql::builders#hstore()","sequel::sql::builders#hstore_op()","string#humanize()","sequel::corerefinements#identifier()","symbol#identifier()","sequel::identifiermangling::datasetmethods#identifier_input_method()","sequel::identifiermangling::databasemethods#identifier_input_method=()","sequel::identifiermangling::datasetmethods#identifier_output_method()","sequel::identifiermangling::databasemethods#identifier_output_method=()","sequel::plugins::singulartablenames::classmethods#implicit_table_name()","sequel::postgres::hstoreop#include?()","sequel::postgres::jsonbop#include?()","sequel::indexcaching#indexes()","string::inflections()","sequel::migration::inherited()","sequel::plugins::dirty::instancemethods#initial_value()","sequel::plugins::dirty::instancemethods#initial_values()","sequel::plugins::accessedcolumns::instancemethods#initialize_copy()","sequel::plugins::inputtransformer::classmethods#input_transformer_order()","sequel::dataset::nulldataset#insert()","sequel::postgres::jsonbop#insert()","sequel::sqlite::jsonop#insert()","sequel::plugins::insertconflict::instancemethods#insert_conflict()","sequel::sql::constant#inspect()","sequel::sql::expression#inspect()","sequel::plugins::instancefilters::instancemethods#instance_filter()","sequel::sequel4datasetmethods#interval()","string::inflections::irregular()","sequel::integermigrator#is_current?()","sequel::migrator::is_current?()","sequel::timestampmigrator#is_current?()","sequel::sql::stringagg#is_distinct?()","sequel::postgres::arrayop#join()","sequel::dataset::datasetsourcealias#join_table()","sequel::mssql::emulatelateralwithapply#join_table()","sequel::plugins::manythroughmany::manythroughmanyassociationreflection#join_table_alias()","sequel::sqlite::jsonop#json()","sequel::postgres::jsondatabasemethods::json_primitive_wrapper()","sequel::plugins::jsonserializer::datasetmethods#json_serializer_opts()","sequel::plugins::jsonserializer::instancemethods#json_serializer_opts()","sequel::postgres::jsondatabasemethods::json_wrapper()","sequel::postgres::jsondatabasemethods::jsonb_primitive_wrapper()","sequel::postgres::jsondatabasemethods::jsonb_wrapper()","sequel::postgres::hstoreop#key?()","sequel::postgres::hstoreop#keys()","sequel::postgres::jsonbaseop#keys()","sequel::dataset::pagination#last_page?()","sequel::plugins::list::instancemethods#last_position()","sequel::plugins::lazyattributes::classmethods#lazy_attributes()","sequel::postgres::arrayop#length()","sequel::plugins::list::instancemethods#list_dataset()","sequel::postgres::staticcacheupdater#listen_for_static_cache_updates()","sequel::corerefinements#lit()","string#lit()","sequel::dataset::roundtimestamps#literal_datetime()","sequel::postgres::intervaldatabasemethods::literal_duration()","sequel::dataset::roundtimestamps#literal_sqltime()","sequel::dataset::roundtimestamps#literal_time()","sequel::plugins::staticcache::classmethods#load_cache()","sequel::indexcaching#load_index_cache()","sequel::indexcaching#load_index_cache?()","sequel::schemacaching#load_schema_cache()","sequel::schemacaching#load_schema_cache?()","sequel::plugins::typecastonload::instancemethods#load_typecast()","sequel::callerlogging#log_connection_yield()","sequel::errorsql#log_connection_yield()","sequel::sqllognormalizer#log_connection_yield()","sequel::errorsql#log_exception()","sequel::postgres::loosecount#loose_count()","sequel::postgres::arrayop#lower()","sequel::plugins::manythroughmany::classmethods#many_through_many()","sequel::plugins::pgarrayassociations::classmethods#many_to_pg_array()","sequel::plugins::staticcache::classmethods#map()","sequel::plugins::tacticaleagerloading::instancemethods#marshallable!()","sequel::postgres::hstoreop#member?()","sequel::postgres::hstore#merge()","sequel::postgres::hstoreop#merge()","sequel::database::asyncthreadpool::baseproxy#method_missing()","sequel::dataset::query#method_missing()","sequel::migration#method_missing()","sequel::plugins::associationproxies::associationproxy#method_missing()","sequel::plugins::validationclassmethods::classmethods::generator#method_missing()","sequel::migration()","sequel::migrator::migrator_class()","sequel::sqlite::jsonop#minify()","sequel::plugins::activemodel::instancemethods#model_name()","sequel::plugins::list::instancemethods#move_down()","sequel::plugins::list::instancemethods#move_to()","sequel::plugins::list::instancemethods#move_to_bottom()","sequel::plugins::list::instancemethods#move_to_top()","sequel::plugins::list::instancemethods#move_up()","sequel::plugins::columnencryption::datasetmethods#needing_reencryption()","sequel::plugins::nestedattributes::classmethods#nested_attributes()","sequel::constraintvalidations::generator::new()","sequel::database::asyncthreadpool::baseproxy::new()","sequel::database::asyncthreadpool::preemptableproxy::new()","sequel::database::asyncthreadpool::proxy::new()","sequel::dataset::query::new()","sequel::integermigrator::new()","sequel::migration::new()","sequel::migrationaltertablereverser::new()","sequel::migrationdsl::new()","sequel::migrationreverser::new()","sequel::migrator::new()","sequel::plugins::afterinitialize::instancemethods::new()","sequel::plugins::associationproxies::associationproxy::new()","sequel::plugins::jsonserializer::literal::new()","sequel::plugins::validationclassmethods::classmethods::generator::new()","sequel::postgres::hstoresubscriptop::new()","sequel::postgres::inetop::new()","sequel::postgres::jsonbsubscriptop::new()","sequel::postgres::pgarray::new()","sequel::postgres::pgarray::creator::new()","sequel::postgres::pgarray::parser::new()","sequel::postgres::pgmultirange::new()","sequel::postgres::pgmultirange::creator::new()","sequel::postgres::pgmultirange::parser::new()","sequel::postgres::pgrange::new()","sequel::postgres::pgrange::parser::new()","sequel::postgres::pgrow::parser::new()","sequel::sql::dateadd::new()","sequel::sql::escapedlikeexpression::new()","sequel::sql::stringagg::new()","sequel::simplemigration::new()","sequel::timestampmigrator::new()","sequel::todot::new()","sequel::postgres::pgarray::parser#new_entry()","sequel::plugins::sharding::classmethods#new_using_server()","sequel::plugins::list::instancemethods#next()","sequel::dataset::pagination#next_page()","sequel::migrationdsl#no_transaction()","sequel::sqllognormalizer#normalize_logged_sql()","sequel::dataset::nullifiable#nullify()","sequel::plugins::jsonserializer::object_to_json_data()","sequel::duplicatecolumnshandler#on_duplicate_columns()","sequel::plugins::manythroughmany::classmethods#one_through_many()","sequel::postgres::hstore#op()","sequel::postgres::jsonarray#op()","sequel::postgres::jsonbarray#op()","sequel::postgres::jsonbhash#op()","sequel::postgres::jsonhash#op()","sequel::postgres::pgarray#op()","sequel::postgres::pgmultirange#op()","sequel::postgres::pgrange#op()","sequel::postgres::pgrow::arrayrow#op()","sequel::postgres::pgrow::hashrow#op()","sequel::constraintvalidations::generator#operator()","sequel::sql::stringagg#order()","sequel::todot#output()","sequel::todot::output()","sequel::postgres::arrayop#overlaps()","sequel::dataset::pagination#page_count()","sequel::dataset::pagination#page_range()","sequel::dataset::pagination#page_size()","sequel::datasetpagination#paginate()","sequel::dataset::pagination#pagination_record_count()","sequel::postgres::hstore::parse()","sequel::postgres::hstore::parser#parse()","sequel::postgres::pgarray::parser#parse()","sequel::postgres::pgmultirange::parser#parse()","sequel::postgres::pgrow::splitter#parse()","sequel::postgres::jsondatabasemethods::parse_json()","sequel::sqlite::jsonop#patch()","sequel::postgres::jsonbop#path_exists()","sequel::postgres::jsonbop#path_exists!()","sequel::postgres::jsonbop#path_exists_tz!()","sequel::postgres::jsonbop#path_match()","sequel::postgres::jsonbop#path_match!()","sequel::postgres::jsonbop#path_match_tz!()","sequel::postgres::jsonbop#path_query()","sequel::postgres::jsonbop#path_query_array()","sequel::postgres::jsonbop#path_query_array_tz()","sequel::postgres::jsonbop#path_query_first()","sequel::postgres::jsonbop#path_query_first_tz()","sequel::postgres::jsonbop#path_query_tz()","sequel::plugins::activemodel::instancemethods#persisted?()","array#pg_array()","sequel::corerefinements#pg_array()","sequel::postgres::arrayop#pg_array()","sequel::postgres::arrayopmethods#pg_array()","sequel::sql::builders#pg_array()","sequel::sql::builders#pg_array_op()","sequel::plugins::pgarrayassociations::classmethods#pg_array_to_many()","sequel::plugins::pgautoconstraintvalidations::classmethods#pg_auto_constraint_validation_override()","sequel::postgres::inetop#pg_inet()","sequel::postgres::inetopmethods#pg_inet()","sequel::sql::builders#pg_inet_op()","array#pg_json()","hash#pg_json()","sequel::corerefinements#pg_json()","sequel::postgres::jsonop#pg_json()","sequel::postgres::jsonopmethods#pg_json()","sequel::sql::builders#pg_json()","sequel::sql::builders#pg_json_op()","sequel::sql::builders#pg_json_wrap()","array#pg_jsonb()","hash#pg_jsonb()","sequel::corerefinements#pg_jsonb()","sequel::postgres::jsonbop#pg_jsonb()","sequel::postgres::jsonopmethods#pg_jsonb()","sequel::sql::builders#pg_jsonb()","sequel::sql::builders#pg_jsonb_op()","sequel::sql::builders#pg_jsonb_wrap()","sequel::sql::builders#pg_multirange()","range#pg_range()","sequel::corerefinements#pg_range()","sequel::postgres::rangeop#pg_range()","sequel::postgres::rangeopmethods#pg_range()","sequel::sql::builders#pg_range()","sequel::sql::builders#pg_range_op()","array#pg_row()","sequel::corerefinements#pg_row()","sequel::postgres::pgrowop::expressionmethods#pg_row()","sequel::sql::builders#pg_row()","sequel::sql::builders#pg_row_op()","sequel::plugins::updateprimarykey::instancemethods#pk_hash()","string::inflections::plural()","string#pluralize()","sequel::postgres::hstoreop#populate()","sequel::postgres::jsonbaseop#populate()","sequel::postgres::jsonbaseop#populate_set()","sequel::plugins::list::instancemethods#position_value()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#predicate_key()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#predicate_key()","sequel::plugins::finder::classmethods#prepared_finder()","sequel::postgres::jsonbop#pretty()","sequel::plugins::list::instancemethods#prev()","sequel::dataset::pagination#prev_page()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#primary_key()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#primary_key()","sequel::plugins::pgarrayassociations::pgarraytomanyassociationreflection#primary_key_method()","sequel::datasetprinter#print()","sequel::prettytable::print()","sequel::columnsintrospection#probable_columns()","sequel::constraintvalidations::generator#process()","sequel::plugins::csvserializer::classmethods#process_csv_serializer_opts()","sequel::postgres::arrayop#push()","sequel::databasequery#query()","sequel::datasetquery#query()","sequel::identifiermangling::databasemethods#quote_identifiers=()","sequel::identifiermangling::databasemethods#quote_identifiers?()","sequel::identifiermangling::datasetmethods#quote_identifiers?()","sequel::sequel4datasetmethods#range()","sequel::plugins::manythroughmany::manythroughmanyassociationreflection#reciprocal()","sequel::postgres::hstoreop#record_set()","sequel::plugins::columnencryption::instancemethods#reencrypt()","sequel::plugins::associationpks::instancemethods#refresh()","sequel::postgres::pgarray::databasemethods#register_array_type()","sequel::plugins::serialization::register_format()","sequel::postgres::pgmultirange::databasemethods#register_multirange_type()","sequel::postgres::pgrange::databasemethods#register_range_type()","sequel::plugins::pgrow::classmethods#register_row_type()","sequel::postgres::pgrow::databasemethods#register_row_type()","sequel::postgres::arrayop#remove()","sequel::sqlite::jsonop#remove()","sequel::plugins::pgarrayassociations::manytopgarrayassociationreflection#remove_before_destroy?()","sequel::postgres::enumdatabasemethods#rename_enum()","sequel::postgres::enumdatabasemethods#rename_enum_value()","sequel::postgres::arrayop#replace()","sequel::sqlite::jsonop#replace()","sequel::plugins::dirty::instancemethods#reset_column()","sequel::database::asyncthreadpool::baseproxy#respond_to_missing?()","sequel::migration#respond_to_missing?()","sequel::plugins::validationclassmethods::classmethods::generator#respond_to_missing?()","sequel::migrationaltertablereverser#reverse()","sequel::migrationreverser#reverse()","sequel::plugins::tree::instancemethods#root()","sequel::plugins::tree::singleroot::classmethods#root()","sequel::plugins::tree::instancemethods#root?()","sequel::plugins::tree::datasetmethods#roots()","sequel::plugins::tree::datasetmethods#roots_dataset()","sequel::plugins::sharding::datasetmethods#row_proc()","sequel::plugins::pgrow::databasemethods#row_type()","sequel::postgres::pgrow::databasemethods#row_type()","sequel::integermigrator#run()","sequel::migrator::run()","sequel::timestampmigrator#run()","database::runtransactionhooks#run_after_commit_hooks()","database::runtransactionhooks#run_after_rollback_hooks()","sequel::plugins::preparedstatementssafe::instancemethods#save_changes()","sequel::selectremove#select_remove()","sequel::plugins::tree::instancemethods#self_and_siblings()","sequel::plugins::manythroughmany::manythroughmanyassociationreflection#separate_query_per_table?()","sequel::postgres::hstoresubscriptop#sequel_ast_transform()","sequel::postgres::jsonbsubscriptop#sequel_ast_transform()","sequel::plugins::serialization::classmethods#serialize_attributes()","sequel::postgres::jsonbop#set()","sequel::sqlite::jsonop#set()","sequel::plugins::whitelistsecurity::instancemethods#set_all()","sequel::plugins::whitelistsecurity::classmethods#set_allowed_columns()","sequel::plugins::caching::classmethods#set_cache_ttl()","sequel::plugins::columnconflicts::classmethods#set_column_conflict!()","sequel::plugins::columnconflicts::instancemethods#set_column_value()","sequel::constantsqloverride::databasemethods#set_constant_sql()","sequel::plugins::blacklistsecurity::instancemethods#set_except()","sequel::postgres::jsonbop#set_lax()","sequel::postgres::inetop#set_masklen()","sequel::plugins::nestedattributes::instancemethods#set_nested_attributes()","sequel::plugins::whitelistsecurity::instancemethods#set_only()","sequel::plugins::blacklistsecurity::classmethods#set_restricted_columns()","sequel::plugins::sharding::instancemethods#set_server?()","sequel::plugins::timestamps::classmethods#set_update_timestamp_on_create?()","sequel::plugins::tree::instancemethods#siblings()","sequel::plugins::eagereach::datasetmethods#single_record!()","string::inflections::singular()","string#singularize()","sequel::postgres::hstoreop#skeys()","sequel::plugins::autovalidations::classmethods#skip_auto_validations()","sequel::plugins::autovalidations::instancemethods#skip_auto_validations()","sequel::plugins::inputtransformer::classmethods#skip_input_transformer()","sequel::plugins::inputtransformer::classmethods#skip_input_transformer?()","sequel::plugins::skipsavingcolumns::classmethods#skip_saving_columns=()","sequel::plugins::stringstripper::classmethods#skip_string_stripping()","sequel::plugins::stringstripper::classmethods#skip_string_stripping?()","sequel::plugins::validationclassmethods::classmethods#skip_superclass_validations()","sequel::plugins::validationclassmethods::classmethods#skip_superclass_validations?()","sequel::postgres::hstoreop#slice()","sequel::postgres::pgrowop#splat()","sequel::plugins::splitvalues::instancemethods#split_noncolumn_values()","sequel::databaseerror#sql()","sequel::plugins::sqlcomments::classmethods#sql_comments_class_methods()","sequel::plugins::sqlcomments::classmethods#sql_comments_dataset_methods()","sequel::plugins::sqlcomments::classmethods#sql_comments_instance_methods()","array#sql_expr()","hash#sql_expr()","object#sql_expr()","sequel::corerefinements#sql_expr()","sequel::corerefinements#sql_function()","symbol#sql_function()","sequel::plugins::pgrow::instancemethods#sql_literal_append()","sequel::postgres#sql_literal_append()","sequel::postgres::hstore#sql_literal_append()","sequel::postgres::pgarray#sql_literal_append()","sequel::postgres::pgmultirange#sql_literal_append()","sequel::postgres::pgrange#sql_literal_append()","sequel::postgres::pgrow::arrayrow#sql_literal_append()","sequel::postgres::pgrow::hashrow#sql_literal_append()","array#sql_negate()","hash#sql_negate()","sequel::corerefinements#sql_negate()","array#sql_or()","hash#sql_or()","sequel::corerefinements#sql_or()","array#sql_string_join()","sequel::corerefinements#sql_string_join()","array#sql_value_list()","sequel::corerefinements#sql_value_list()","sequel::sql::builders#sqlite_json_op()","sequel::sqlite::jsonopmethods#sqlite_json_op()","sequel::plugins::staticcache::classmethods#static_cache_allow_modifications?()","sequel::plugins::classtableinheritance::classmethods#sti_class_from_key()","sequel::plugins::singletableinheritance::classmethods#sti_class_from_sti_key()","sequel::plugins::singletableinheritance::classmethods#sti_load()","sequel::plugins::singletableinheritance::classmethods#sti_subclass_added()","sequel::prettytable::string()","sequel::sql::builders#string_agg()","sequel::sql::stringagg::datasetmethods#string_agg_sql_append()","sequel::dateparseinputhandler#string_to_date()","sequel::dateparseinputhandler#string_to_datetime()","sequel::dateparseinputhandler#string_to_time()","sequel::postgres::jsonbaseop#strip_nulls()","sequel::postgres::pgrow::arrayrow::subclass()","sequel::postgres::pgrow::hashrow::subclass()","sequel::plugins::defdatasetmethod::classmethods#subset()","sequel::mssql::emulatelateralwithapply#supports_lateral_subqueries?()","sequel::postgres::hstoreop#svals()","sequel::database::asyncthreadpool::datasetmethods#sync()","sequel::plugins::classtableinheritance::classmethods#table_name()","string#tableize()","sequel::namedtimezones::databasemethods#timezone=()","string#titlecase()","string#titleize()","sequel::postgres::extendeddatesupport#to_application_timestamp()","sequel::postgres::hstoreop#to_array()","sequel::plugins::csvserializer::datasetmethods#to_csv()","sequel::plugins::csvserializer::instancemethods#to_csv()","string#to_date()","string#to_datetime()","sequel::todot::datasetmethods#to_dot()","sequel::plugins::staticcache::classmethods#to_hash()","sequel::plugins::staticcache::classmethods#to_hash_groups()","sequel::plugins::jsonserializer::datasetmethods#to_json()","sequel::plugins::jsonserializer::instancemethods#to_json()","sequel::plugins::jsonserializer::literal#to_json()","sequel::plugins::jsonserializer::instancemethods#to_json_data()","sequel::plugins::activemodel::instancemethods#to_key()","sequel::postgres::hstoreop#to_matrix()","sequel::plugins::activemodel::instancemethods#to_model()","sequel::plugins::activemodel::instancemethods#to_param()","sequel::plugins::activemodel::instancemethods#to_partial_path()","sequel::postgres::pgrange#to_range()","sequel::postgres::jsonbaseop#to_record()","sequel::postgres::jsonbaseop#to_recordset()","sequel::postgres::hstoresubscriptop#to_s_append()","sequel::postgres::jsonbsubscriptop#to_s_append()","sequel::sql::escapedlikeexpression#to_s_append()","sequel::corerefinements#to_sequel_blob()","string#to_sequel_blob()","string#to_sequel_time()","sequel::postgres::arrayop#to_string()","string#to_time()","sequel::plugins::xmlserializer::datasetmethods#to_xml()","sequel::plugins::xmlserializer::instancemethods#to_xml()","sequel::plugins::touch::instancemethods#touch()","sequel::plugins::touch::classmethods#touch_associations()","sequel::migrationdsl#transaction()","sequel::sqlite::jsonop#tree()","sequel::dataset::nulldataset#truncate()","sequel::sqlite::jsonop#type()","sequel::postgres::pgrow::parser#typecast()","sequel::postgres::jsonbaseop#typeof()","sequel::sqlite::jsonop#typeof()","sequel::postgres::pgrange#unbounded_begin?()","sequel::postgres::pgrange#unbounded_end?()","string::inflections::uncountable()","string#underscore()","sequel::constraintvalidations::altertablegeneratormethods#unique()","sequel::postgres::arrayop#unnest()","sequel::postgres::hstore#unquoted_literal()","sequel::postgres::pgmultirange#unquoted_literal()","sequel::postgres::pgrange#unquoted_literal()","sequel::postgres::arrayop#unshift()","sequel::plugins::unusedassociations::classmethods#unused_association_options()","sequel::plugins::unusedassociations::classmethods#unused_associations()","sequel::migration#up()","sequel::migrationdsl#up()","sequel::dataset::nulldataset#update()","sequel::plugins::whitelistsecurity::instancemethods#update_all()","sequel::plugins::unusedassociations::classmethods#update_associations_coverage()","sequel::plugins::blacklistsecurity::instancemethods#update_except()","sequel::plugins::whitelistsecurity::instancemethods#update_only()","sequel::plugins::updateorcreate::classmethods#update_or_create()","sequel::dataset::autoliteralstrings#update_sql()","sequel::plugins::unusedassociations::classmethods#update_unused_associations_data()","sequel::migration::use_transactions()","sequel::plugins::unusedassociations::classmethods#used_association_reflections()","sequel::plugins::uuid::classmethods#uuid_overwrite?()","sequel::sqlite::jsonop#valid()","sequel::plugins::throwfailures::instancemethods#valid?()","sequel::postgres::pgrange#valid_ruby_range?()","sequel::constraintvalidations::createtablegeneratormethods#validate()","sequel::plugins::autovalidations::instancemethods#validate()","sequel::plugins::constraintvalidations::instancemethods#validate()","sequel::plugins::validationclassmethods::classmethods#validate()","sequel::plugins::validationclassmethods::instancemethods#validate()","sequel::plugins::validationclassmethods::classmethods#validates()","sequel::plugins::validationclassmethods::classmethods#validates_acceptance_of()","sequel::plugins::validationclassmethods::classmethods#validates_confirmation_of()","sequel::plugins::validationclassmethods::classmethods#validates_each()","sequel::plugins::validationhelpers::instancemethods#validates_exact_length()","sequel::plugins::validationhelpers::instancemethods#validates_format()","sequel::plugins::validationclassmethods::classmethods#validates_format_of()","sequel::plugins::validationhelpers::instancemethods#validates_includes()","sequel::plugins::validationclassmethods::classmethods#validates_inclusion_of()","sequel::plugins::validationhelpers::instancemethods#validates_integer()","sequel::plugins::validationclassmethods::classmethods#validates_length_of()","sequel::plugins::validationhelpers::instancemethods#validates_length_range()","sequel::plugins::validationhelpers::instancemethods#validates_max_length()","sequel::plugins::validationhelpers::instancemethods#validates_min_length()","sequel::plugins::validationhelpers::instancemethods#validates_no_null_byte()","sequel::plugins::validationhelpers::instancemethods#validates_not_null()","sequel::plugins::validationhelpers::instancemethods#validates_numeric()","sequel::plugins::validationclassmethods::classmethods#validates_numericality_of()","sequel::plugins::validationhelpers::instancemethods#validates_operator()","sequel::plugins::validationhelpers::instancemethods#validates_presence()","sequel::plugins::validationclassmethods::classmethods#validates_presence_of()","sequel::plugins::validationclassmethods::classmethods#validates_schema_type()","sequel::plugins::validationhelpers::instancemethods#validates_schema_types()","sequel::plugins::validationhelpers::instancemethods#validates_type()","sequel::plugins::validationhelpers::instancemethods#validates_unique()","sequel::plugins::validationclassmethods::classmethods#validates_uniqueness_of()","sequel::constraintvalidations::createtablegeneratormethods#validation()","sequel::postgres::hstoreop#values()","sequel::plugins::invertedsubsets::datasetmodulemethods#where()","sequel::plugins::subsetconditions::datasetmodulemethods#where()","sequel::plugins::dirty::instancemethods#will_change_column()","database::sqlcomments#with_comments()","sequel::plugins::columnencryption::datasetmethods#with_encrypted_value()","sequel::identifiermangling::datasetmethods#with_identifier_input_method()","sequel::identifiermangling::datasetmethods#with_identifier_output_method()","sequel::serverblock#with_server()","sequel::threadedserverblock#with_server()","sequel::unthreadedserverblock#with_server()","sequel::grapheach#with_sql_each()","sequel::plugins::forbidlazyload::datasetmethods#with_sql_each()","sequel::plugins::forbidlazyload::datasetmethods#with_sql_first()","sequel::postgres::pgrowop::wrap()","sequel::plugins::xmlserializer::classmethods#xml_builder()","sequel::plugins::xmlserializer::classmethods#xml_deserialize_name_proc()","sequel::plugins::xmlserializer::classmethods#xml_serialize_name_proc()","hash#|()","sequel::corerefinements#|()","array#~()","hash#~()","sequel::corerefinements#~()","sequel::postgres::inetop#~()",""],"info":[["Array","","Array.html","","<p>Sequel extends <code>Array</code> to add methods to implement the SQL DSL. Most of these methods require that the …\n"],["Database","","Database.html","",""],["Database::AsyncThreadPool","","Database/AsyncThreadPool.html","",""],["Database::RunTransactionHooks","","Database/RunTransactionHooks.html","",""],["Database::SQLComments","","Database/SQLComments.html","",""],["Database::SQLComments::DatasetSQLComments","","Database/SQLComments/DatasetSQLComments.html","",""],["FalseClass","","FalseClass.html","",""],["Hash","","Hash.html","","<p>Sequel extends <code>Hash</code> to add methods to implement the SQL DSL.\n"],["NilClass","","NilClass.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Range","","Range.html","",""],["Sequel","","Sequel.html","","<p>The date_parse_input_handler extension allows for configuring how input to date parsing methods should …\n"],["Sequel::AnyNotEmpty","","Sequel/AnyNotEmpty.html","",""],["Sequel::ArbitraryServers","","Sequel/ArbitraryServers.html","",""],["Sequel::CallerLogging","","Sequel/CallerLogging.html","",""],["Sequel::ColumnsIntrospection","","Sequel/ColumnsIntrospection.html","",""],["Sequel::ConnectionExpiration","","Sequel/ConnectionExpiration.html","",""],["Sequel::ConnectionExpiration::Retry","","Sequel/ConnectionExpiration/Retry.html","",""],["Sequel::ConnectionValidator","","Sequel/ConnectionValidator.html","",""],["Sequel::ConnectionValidator::Retry","","Sequel/ConnectionValidator/Retry.html","",""],["Sequel::ConstantSqlOverride","","Sequel/ConstantSqlOverride.html","",""],["Sequel::ConstantSqlOverride::DatabaseMethods","","Sequel/ConstantSqlOverride/DatabaseMethods.html","",""],["Sequel::ConstantSqlOverride::DatasetMethods","","Sequel/ConstantSqlOverride/DatasetMethods.html","",""],["Sequel::ConstraintValidations","","Sequel/ConstraintValidations.html","",""],["Sequel::ConstraintValidations::AlterTableGeneratorMethods","","Sequel/ConstraintValidations/AlterTableGeneratorMethods.html","","<p>Additional methods for the alter_table generator to support constraint validations, used to give it a …\n"],["Sequel::ConstraintValidations::CreateTableGeneratorMethods","","Sequel/ConstraintValidations/CreateTableGeneratorMethods.html","","<p>Additional methods for the create_table generator to support constraint validations.\n"],["Sequel::ConstraintValidations::Generator","","Sequel/ConstraintValidations/Generator.html","","<p>This is the DSL class used for the validate block inside create_table and alter_table.\n"],["Sequel::CoreRefinements","","Sequel/CoreRefinements.html","","<p>:nocov:\n"],["Sequel::CurrentDateTimeTimestamp","","Sequel/CurrentDateTimeTimestamp.html","",""],["Sequel::CurrentDateTimeTimestamp::DatasetMethods","","Sequel/CurrentDateTimeTimestamp/DatasetMethods.html","",""],["Sequel::CurrentDateTimeTimestamp::DateTime","","Sequel/CurrentDateTimeTimestamp/DateTime.html","","<p>DateTime subclass literalized as CURRENT_TIMESTAMP\n"],["Sequel::CurrentDateTimeTimestamp::Time","","Sequel/CurrentDateTimeTimestamp/Time.html","","<p>Time subclass literalized as CURRENT_TIMESTAMP\n"],["Sequel::Database::AsyncThreadPool::BaseProxy","","Sequel/Database/AsyncThreadPool/BaseProxy.html","","<p>Base proxy object class for jobs processed by async threads and the returned result.\n"],["Sequel::Database::AsyncThreadPool::DatabaseMethods","","Sequel/Database/AsyncThreadPool/DatabaseMethods.html","",""],["Sequel::Database::AsyncThreadPool::DatasetMethods","","Sequel/Database/AsyncThreadPool/DatasetMethods.html","",""],["Sequel::Database::AsyncThreadPool::PreemptableProxy","","Sequel/Database/AsyncThreadPool/PreemptableProxy.html","","<p>Object class for async job/proxy result when the :preempt_async_thread Database option is used.  Uses …\n"],["Sequel::Database::AsyncThreadPool::Proxy","","Sequel/Database/AsyncThreadPool/Proxy.html","","<p>Default object class for async job/proxy result.  This uses a queue for synchronization.  The JobProcessor …\n"],["Sequel::DatabaseError","","Sequel/DatabaseError.html","",""],["Sequel::DatabaseQuery","","Sequel/DatabaseQuery.html","",""],["Sequel::Dataset","","Sequel/Dataset.html","",""],["Sequel::Dataset::AutoLiteralStrings","","Sequel/Dataset/AutoLiteralStrings.html","",""],["Sequel::Dataset::DatasetSourceAlias","","Sequel/Dataset/DatasetSourceAlias.html","",""],["Sequel::Dataset::ImplicitSubquery","","Sequel/Dataset/ImplicitSubquery.html","",""],["Sequel::Dataset::NullDataset","","Sequel/Dataset/NullDataset.html","",""],["Sequel::Dataset::Nullifiable","","Sequel/Dataset/Nullifiable.html","",""],["Sequel::Dataset::Pagination","","Sequel/Dataset/Pagination.html","","<p>Holds methods that only relate to paginated datasets. Paginated dataset have pages starting at 1 (page …\n"],["Sequel::Dataset::Query","","Sequel/Dataset/Query.html","","<p>Proxy object used by Dataset#query.\n"],["Sequel::Dataset::RoundTimestamps","","Sequel/Dataset/RoundTimestamps.html","",""],["Sequel::Dataset::SplitArrayNil","","Sequel/Dataset/SplitArrayNil.html","",""],["Sequel::Dataset::SynchronizeSQL","","Sequel/Dataset/SynchronizeSQL.html","",""],["Sequel::DatasetPagination","","Sequel/DatasetPagination.html","",""],["Sequel::DatasetPrinter","","Sequel/DatasetPrinter.html","",""],["Sequel::DatasetQuery","","Sequel/DatasetQuery.html","",""],["Sequel::DateParseInputHandler","","Sequel/DateParseInputHandler.html","",""],["Sequel::DateTimeParseToTime","","Sequel/DateTimeParseToTime.html","",""],["Sequel::DuplicateColumnError","","Sequel/DuplicateColumnError.html","","<p>Error which is raised when duplicate columns are present in a dataset which is configured to :raise  …\n"],["Sequel::DuplicateColumnsHandler","","Sequel/DuplicateColumnsHandler.html","",""],["Sequel::EmptyArrayConsiderNulls","","Sequel/EmptyArrayConsiderNulls.html","",""],["Sequel::ErrorSQL","","Sequel/ErrorSQL.html","",""],["Sequel::EvalInspect","","Sequel/EvalInspect.html","",""],["Sequel::ExcludeOrNull","","Sequel/ExcludeOrNull.html","",""],["Sequel::FiberConcurrency","","Sequel/FiberConcurrency.html","",""],["Sequel::GraphEach","","Sequel/GraphEach.html","",""],["Sequel::IdentifierMangling","","Sequel/IdentifierMangling.html","",""],["Sequel::IdentifierMangling::DatabaseMethods","","Sequel/IdentifierMangling/DatabaseMethods.html","",""],["Sequel::IdentifierMangling::DatasetMethods","","Sequel/IdentifierMangling/DatasetMethods.html","",""],["Sequel::IndexCaching","","Sequel/IndexCaching.html","",""],["Sequel::Integer64","","Sequel/Integer64.html","",""],["Sequel::IntegerMigrator","","Sequel/IntegerMigrator.html","","<p>The default migrator, recommended in most cases.  Uses a simple incrementing version number starting …\n"],["Sequel::LiteralString","","Sequel/LiteralString.html","",""],["Sequel::LooserTypecasting","","Sequel/LooserTypecasting.html","",""],["Sequel::MSSQL","","Sequel/MSSQL.html","",""],["Sequel::MSSQL::EmulateLateralWithApply","","Sequel/MSSQL/EmulateLateralWithApply.html","",""],["Sequel::Migration","","Sequel/Migration.html","","<p>Sequel&#39;s older migration class, available for backward compatibility. Uses subclasses with up and …\n"],["Sequel::MigrationAlterTableReverser","","Sequel/MigrationAlterTableReverser.html","","<p>Handles reversing an alter_table block in a reversible migration.\n"],["Sequel::MigrationDSL","","Sequel/MigrationDSL.html","","<p>Internal class used by the Sequel.migration DSL, part of the <code>migration</code> extension.\n"],["Sequel::MigrationReverser","","Sequel/MigrationReverser.html","","<p>Handles the reversing of reversible migrations.  Basically records supported methods calls, translates …\n"],["Sequel::Migrator","","Sequel/Migrator.html","","<p>The <code>Migrator</code> class performs migrations based on migration files in a  specified directory. The migration …\n"],["Sequel::Migrator::Error","","Sequel/Migrator/Error.html","","<p>Exception class raised when there is an error with the migrator&#39;s file structure, database, or arguments. …\n"],["Sequel::Migrator::NotCurrentError","","Sequel/Migrator/NotCurrentError.html","","<p>Exception class raised when Migrator.check_current signals that it is not current.\n"],["Sequel::Model","","Sequel/Model.html","",""],["Sequel::Model::Associations","","Sequel/Model/Associations.html","",""],["Sequel::NamedTimezones","","Sequel/NamedTimezones.html","",""],["Sequel::NamedTimezones::DatabaseMethods","","Sequel/NamedTimezones/DatabaseMethods.html","",""],["Sequel::Plugins","","Sequel/Plugins.html","",""],["Sequel::Plugins::AccessedColumns","","Sequel/Plugins/AccessedColumns.html","","<p>The accessed_columns plugin records which columns have been accessed for a model instance.  This is useful …\n"],["Sequel::Plugins::AccessedColumns::InstanceMethods","","Sequel/Plugins/AccessedColumns/InstanceMethods.html","",""],["Sequel::Plugins::ActiveModel","","Sequel/Plugins/ActiveModel.html","","<p>The active_model plugin makes Sequel::Model objects pass the ActiveModel::Lint tests, which should hopefully …\n"],["Sequel::Plugins::ActiveModel::ClassMethods","","Sequel/Plugins/ActiveModel/ClassMethods.html","",""],["Sequel::Plugins::ActiveModel::Errors","","Sequel/Plugins/ActiveModel/Errors.html","","<p>ActiveModel compliant error class\n"],["Sequel::Plugins::ActiveModel::InstanceMethods","","Sequel/Plugins/ActiveModel/InstanceMethods.html","",""],["Sequel::Plugins::AfterInitialize","","Sequel/Plugins/AfterInitialize.html","","<p>Adds an after_initialize hook to models, called after initializing both new objects and ones loaded from …\n"],["Sequel::Plugins::AfterInitialize::ClassMethods","","Sequel/Plugins/AfterInitialize/ClassMethods.html","",""],["Sequel::Plugins::AfterInitialize::InstanceMethods","","Sequel/Plugins/AfterInitialize/InstanceMethods.html","",""],["Sequel::Plugins::AssociationDependencies","","Sequel/Plugins/AssociationDependencies.html","","<p>The association_dependencies plugin allows you do easily set up before and/or after destroy hooks for …\n"],["Sequel::Plugins::AssociationDependencies::ClassMethods","","Sequel/Plugins/AssociationDependencies/ClassMethods.html","",""],["Sequel::Plugins::AssociationDependencies::InstanceMethods","","Sequel/Plugins/AssociationDependencies/InstanceMethods.html","",""],["Sequel::Plugins::AssociationLazyEagerOption","","Sequel/Plugins/AssociationLazyEagerOption.html","","<p>The association_lazy_eager_option plugin supports passing an <code>:eager</code> option to an association method. …\n"],["Sequel::Plugins::AssociationLazyEagerOption::InstanceMethods","","Sequel/Plugins/AssociationLazyEagerOption/InstanceMethods.html","",""],["Sequel::Plugins::AssociationMultiAddRemove","","Sequel/Plugins/AssociationMultiAddRemove.html","","<p>The association_multi_add_remove plugin allows adding, removing and setting multiple associated objects …\n"],["Sequel::Plugins::AssociationMultiAddRemove::ClassMethods","","Sequel/Plugins/AssociationMultiAddRemove/ClassMethods.html","",""],["Sequel::Plugins::AssociationPks","","Sequel/Plugins/AssociationPks.html","","<p>The association_pks plugin adds association_pks, association_pks=, and association_pks_dataset instance …\n"],["Sequel::Plugins::AssociationPks::ClassMethods","","Sequel/Plugins/AssociationPks/ClassMethods.html","",""],["Sequel::Plugins::AssociationPks::InstanceMethods","","Sequel/Plugins/AssociationPks/InstanceMethods.html","",""],["Sequel::Plugins::AssociationProxies","","Sequel/Plugins/AssociationProxies.html","","<p>Sequel by default does not use proxies for associations.  The association method for *_to_many associations …\n"],["Sequel::Plugins::AssociationProxies::AssociationProxy","","Sequel/Plugins/AssociationProxies/AssociationProxy.html","","<p>A proxy for the association.  Calling an array method will load the associated objects and call the method …\n"],["Sequel::Plugins::AssociationProxies::ClassMethods","","Sequel/Plugins/AssociationProxies/ClassMethods.html","",""],["Sequel::Plugins::AsyncThreadPool","","Sequel/Plugins/AsyncThreadPool.html","","<p>The async_thread_pool plugin makes it slightly easier to use the async_thread_pool Database extension …\n"],["Sequel::Plugins::AsyncThreadPool::ClassMethods","","Sequel/Plugins/AsyncThreadPool/ClassMethods.html","",""],["Sequel::Plugins::AsyncThreadPool::DatasetMethods","","Sequel/Plugins/AsyncThreadPool/DatasetMethods.html","",""],["Sequel::Plugins::AutoRestrictEagerGraph","","Sequel/Plugins/AutoRestrictEagerGraph.html","","<p>The auto_restrict_eager_graph plugin will automatically disallow the use of eager_graph for associations …\n"],["Sequel::Plugins::AutoRestrictEagerGraph::ClassMethods","","Sequel/Plugins/AutoRestrictEagerGraph/ClassMethods.html","",""],["Sequel::Plugins::AutoValidations","","Sequel/Plugins/AutoValidations.html","","<p>The auto_validations plugin automatically sets up the following types of validations for your model columns: …\n"],["Sequel::Plugins::AutoValidations::ClassMethods","","Sequel/Plugins/AutoValidations/ClassMethods.html","",""],["Sequel::Plugins::AutoValidations::InstanceMethods","","Sequel/Plugins/AutoValidations/InstanceMethods.html","",""],["Sequel::Plugins::AutoValidationsConstraintValidationsPresenceMessage","","Sequel/Plugins/AutoValidationsConstraintValidationsPresenceMessage.html","","<p>The auto_validations_constraint_validations_presence_message plugin provides integration for the auto_validations …\n"],["Sequel::Plugins::AutoValidationsConstraintValidationsPresenceMessage::ClassMethods","","Sequel/Plugins/AutoValidationsConstraintValidationsPresenceMessage/ClassMethods.html","",""],["Sequel::Plugins::BeforeAfterSave","","Sequel/Plugins/BeforeAfterSave.html","",""],["Sequel::Plugins::BlacklistSecurity","","Sequel/Plugins/BlacklistSecurity.html","","<p>The blacklist_security plugin contains blacklist-based support for mass assignment, specifying which …\n"],["Sequel::Plugins::BlacklistSecurity::ClassMethods","","Sequel/Plugins/BlacklistSecurity/ClassMethods.html","",""],["Sequel::Plugins::BlacklistSecurity::ExceptionList","","Sequel/Plugins/BlacklistSecurity/ExceptionList.html","","<p>Special array subclass used for marking methods to be removed.\n"],["Sequel::Plugins::BlacklistSecurity::InstanceMethods","","Sequel/Plugins/BlacklistSecurity/InstanceMethods.html","",""],["Sequel::Plugins::BooleanReaders","","Sequel/Plugins/BooleanReaders.html","","<p>The boolean_readers plugin allows for the creation of attribute? methods for boolean columns, which provides …\n"],["Sequel::Plugins::BooleanReaders::ClassMethods","","Sequel/Plugins/BooleanReaders/ClassMethods.html","",""],["Sequel::Plugins::BooleanSubsets","","Sequel/Plugins/BooleanSubsets.html","","<p>The boolean_subsets plugin allows for the automatic creation of subsets for for boolean columns, which …\n"],["Sequel::Plugins::BooleanSubsets::ClassMethods","","Sequel/Plugins/BooleanSubsets/ClassMethods.html","",""],["Sequel::Plugins::Caching","","Sequel/Plugins/Caching.html","","<p>Sequel&#39;s built-in caching plugin supports caching to any object that implements the Ruby-Memcache …\n"],["Sequel::Plugins::Caching::ClassMethods","","Sequel/Plugins/Caching/ClassMethods.html","",""],["Sequel::Plugins::Caching::InstanceMethods","","Sequel/Plugins/Caching/InstanceMethods.html","",""],["Sequel::Plugins::ClassTableInheritance","","Sequel/Plugins/ClassTableInheritance.html","","<p>Overview\n<p>The class_table_inheritance plugin uses the single_table_inheritance plugin, so it supports all …\n"],["Sequel::Plugins::ClassTableInheritance::ClassMethods","","Sequel/Plugins/ClassTableInheritance/ClassMethods.html","",""],["Sequel::Plugins::ClassTableInheritance::InstanceMethods","","Sequel/Plugins/ClassTableInheritance/InstanceMethods.html","",""],["Sequel::Plugins::ColumnConflicts","","Sequel/Plugins/ColumnConflicts.html","","<p>The column_conflicts plugin overrides Model#get_column_value and #set_column_value to automatically handle …\n"],["Sequel::Plugins::ColumnConflicts::ClassMethods","","Sequel/Plugins/ColumnConflicts/ClassMethods.html","",""],["Sequel::Plugins::ColumnConflicts::InstanceMethods","","Sequel/Plugins/ColumnConflicts/InstanceMethods.html","",""],["Sequel::Plugins::ColumnEncryption","","Sequel/Plugins/ColumnEncryption.html","","<p>The column_encryption plugin adds support for encrypting the content of individual columns in a table. …\n"],["Sequel::Plugins::ColumnEncryption::ClassMethods","","Sequel/Plugins/ColumnEncryption/ClassMethods.html","",""],["Sequel::Plugins::ColumnEncryption::DatasetMethods","","Sequel/Plugins/ColumnEncryption/DatasetMethods.html","",""],["Sequel::Plugins::ColumnEncryption::InstanceMethods","","Sequel/Plugins/ColumnEncryption/InstanceMethods.html","",""],["Sequel::Plugins::ColumnSelect","","Sequel/Plugins/ColumnSelect.html","","<p>The column_select plugin changes the default selection for a model dataset to explicit select all columns …\n"],["Sequel::Plugins::ColumnSelect::ClassMethods","","Sequel/Plugins/ColumnSelect/ClassMethods.html","",""],["Sequel::Plugins::ColumnsUpdated","","Sequel/Plugins/ColumnsUpdated.html","","<p>The columns_updated plugin stores the columns hash used in the UPDATE query when saving the instance, …\n"],["Sequel::Plugins::ColumnsUpdated::InstanceMethods","","Sequel/Plugins/ColumnsUpdated/InstanceMethods.html","",""],["Sequel::Plugins::Composition","","Sequel/Plugins/Composition.html","","<p>The composition plugin allows you to easily define a virtual attribute where the backing data is composed …\n"],["Sequel::Plugins::Composition::ClassMethods","","Sequel/Plugins/Composition/ClassMethods.html","",""],["Sequel::Plugins::Composition::InstanceMethods","","Sequel/Plugins/Composition/InstanceMethods.html","",""],["Sequel::Plugins::ConcurrentEagerLoading","","Sequel/Plugins/ConcurrentEagerLoading.html","","<p>The concurrent_eager_loading plugin allows for eager loading multiple associations concurrently in separate …\n"],["Sequel::Plugins::ConcurrentEagerLoading::ClassMethods","","Sequel/Plugins/ConcurrentEagerLoading/ClassMethods.html","",""],["Sequel::Plugins::ConcurrentEagerLoading::DatasetMethods","","Sequel/Plugins/ConcurrentEagerLoading/DatasetMethods.html","",""],["Sequel::Plugins::ConstraintValidations","","Sequel/Plugins/ConstraintValidations.html","","<p>The constraint_validations plugin is designed to be used with databases that used the constraint_validations …\n"],["Sequel::Plugins::ConstraintValidations::ClassMethods","","Sequel/Plugins/ConstraintValidations/ClassMethods.html","",""],["Sequel::Plugins::ConstraintValidations::DatabaseMethods","","Sequel/Plugins/ConstraintValidations/DatabaseMethods.html","",""],["Sequel::Plugins::ConstraintValidations::InstanceMethods","","Sequel/Plugins/ConstraintValidations/InstanceMethods.html","",""],["Sequel::Plugins::CsvSerializer","","Sequel/Plugins/CsvSerializer.html","","<p>csv_serializer handles serializing entire Sequel::Model objects to CSV, as well as support for deserializing …\n"],["Sequel::Plugins::CsvSerializer::ClassMethods","","Sequel/Plugins/CsvSerializer/ClassMethods.html","",""],["Sequel::Plugins::CsvSerializer::DatasetMethods","","Sequel/Plugins/CsvSerializer/DatasetMethods.html","",""],["Sequel::Plugins::CsvSerializer::InstanceMethods","","Sequel/Plugins/CsvSerializer/InstanceMethods.html","",""],["Sequel::Plugins::DatasetAssociations","","Sequel/Plugins/DatasetAssociations.html","","<p>DatasetAssociations allows you to easily use your model associations via datasets.  For each association …\n"],["Sequel::Plugins::DatasetAssociations::ClassMethods","","Sequel/Plugins/DatasetAssociations/ClassMethods.html","",""],["Sequel::Plugins::DatasetAssociations::DatasetMethods","","Sequel/Plugins/DatasetAssociations/DatasetMethods.html","",""],["Sequel::Plugins::DefDatasetMethod","","Sequel/Plugins/DefDatasetMethod.html","","<p>The def_dataset_method plugin adds Model.def_dataset_method for defining dataset methods:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Album</span>.<span class=\"ruby-identifier\">def_dataset_method</span>(<span class=\"ruby-value\">:by_name</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Sequel::Plugins::DefDatasetMethod::ClassMethods","","Sequel/Plugins/DefDatasetMethod/ClassMethods.html","",""],["Sequel::Plugins::DefaultsSetter","","Sequel/Plugins/DefaultsSetter.html","","<p>The defaults_setter plugin makes the column getter methods return the default values for new objects, …\n"],["Sequel::Plugins::DefaultsSetter::ClassMethods","","Sequel/Plugins/DefaultsSetter/ClassMethods.html","",""],["Sequel::Plugins::DefaultsSetter::InstanceMethods","","Sequel/Plugins/DefaultsSetter/InstanceMethods.html","",""],["Sequel::Plugins::DelayAddAssociation","","Sequel/Plugins/DelayAddAssociation.html","","<p>The delay_add_association plugin delays the adding of associated objects to a new (unsaved) object until …\n"],["Sequel::Plugins::DelayAddAssociation::InstanceMethods","","Sequel/Plugins/DelayAddAssociation/InstanceMethods.html","",""],["Sequel::Plugins::Dirty","","Sequel/Plugins/Dirty.html","","<p>The dirty plugin makes Sequel save the initial value of a column when setting a new value for the column. …\n"],["Sequel::Plugins::Dirty::InstanceMethods","","Sequel/Plugins/Dirty/InstanceMethods.html","",""],["Sequel::Plugins::EagerEach","","Sequel/Plugins/EagerEach.html","","<p>The eager_each plugin makes calling each on an eager loaded dataset do eager loading. By default, each …\n"],["Sequel::Plugins::EagerEach::DatasetMethods","","Sequel/Plugins/EagerEach/DatasetMethods.html","",""],["Sequel::Plugins::EagerGraphEager","","Sequel/Plugins/EagerGraphEager.html","","<p>The eager_graph_eager plugin allows for chaining eager loads after eager_graph loads.  Given the following …\n"],["Sequel::Plugins::EagerGraphEager::DatasetMethods","","Sequel/Plugins/EagerGraphEager/DatasetMethods.html","",""],["Sequel::Plugins::EmptyFailureBacktraces","","Sequel/Plugins/EmptyFailureBacktraces.html","","<p>The empty_failure_backtraces plugin uses empty backtraces when raising HookFailed and ValidationFailed …\n"],["Sequel::Plugins::EmptyFailureBacktraces::InstanceMethods","","Sequel/Plugins/EmptyFailureBacktraces/InstanceMethods.html","",""],["Sequel::Plugins::Enum","","Sequel/Plugins/Enum.html","","<p>The enum plugin allows for easily adding methods to modify the value of a column.  It allows treating …\n"],["Sequel::Plugins::Enum::ClassMethods","","Sequel/Plugins/Enum/ClassMethods.html","",""],["Sequel::Plugins::ErrorSplitter","","Sequel/Plugins/ErrorSplitter.html","","<p>The error_splitter plugin automatically splits errors entries related to multiple columns to have separate …\n"],["Sequel::Plugins::ErrorSplitter::InstanceMethods","","Sequel/Plugins/ErrorSplitter/InstanceMethods.html","",""],["Sequel::Plugins::Finder","","Sequel/Plugins/Finder.html","","<p>The finder plugin adds Model.finder for defining optimized finder methods. There are two ways to use …\n"],["Sequel::Plugins::Finder::ClassMethods","","Sequel/Plugins/Finder/ClassMethods.html","",""],["Sequel::Plugins::ForbidLazyLoad","","Sequel/Plugins/ForbidLazyLoad.html","","<p>The forbid_lazy_load plugin forbids lazy loading of associations for objects in cases where the object …\n"],["Sequel::Plugins::ForbidLazyLoad::ClassMethods","","Sequel/Plugins/ForbidLazyLoad/ClassMethods.html","",""],["Sequel::Plugins::ForbidLazyLoad::DatasetMethods","","Sequel/Plugins/ForbidLazyLoad/DatasetMethods.html","",""],["Sequel::Plugins::ForbidLazyLoad::Error","","Sequel/Plugins/ForbidLazyLoad/Error.html","","<p>Error raised when attempting to lazy load an association when lazy loading has been forbidden.\n"],["Sequel::Plugins::ForbidLazyLoad::InstanceMethods","","Sequel/Plugins/ForbidLazyLoad/InstanceMethods.html","",""],["Sequel::Plugins::ForceEncoding","","Sequel/Plugins/ForceEncoding.html","","<p>The force_encoding plugin allows you force specific encodings for all strings that are used by the model. …\n"],["Sequel::Plugins::ForceEncoding::ClassMethods","","Sequel/Plugins/ForceEncoding/ClassMethods.html","",""],["Sequel::Plugins::ForceEncoding::InstanceMethods","","Sequel/Plugins/ForceEncoding/InstanceMethods.html","",""],["Sequel::Plugins::HookClassMethods","","Sequel/Plugins/HookClassMethods.html","","<p>Sequel&#39;s built-in hook_class_methods plugin is designed for backwards compatibility.  Its use is …\n"],["Sequel::Plugins::HookClassMethods::ClassMethods","","Sequel/Plugins/HookClassMethods/ClassMethods.html","",""],["Sequel::Plugins::HookClassMethods::InstanceMethods","","Sequel/Plugins/HookClassMethods/InstanceMethods.html","",""],["Sequel::Plugins::InputTransformer","","Sequel/Plugins/InputTransformer.html","","<p>InputTransformer is a plugin that allows generic transformations of input values in model column setters. …\n"],["Sequel::Plugins::InputTransformer::ClassMethods","","Sequel/Plugins/InputTransformer/ClassMethods.html","",""],["Sequel::Plugins::InputTransformer::InstanceMethods","","Sequel/Plugins/InputTransformer/InstanceMethods.html","",""],["Sequel::Plugins::InsertConflict","","Sequel/Plugins/InsertConflict.html","","<p>The insert_conflict plugin allows handling conflicts due to unique constraints when saving new model …\n"],["Sequel::Plugins::InsertConflict::InstanceMethods","","Sequel/Plugins/InsertConflict/InstanceMethods.html","",""],["Sequel::Plugins::InsertReturningSelect","","Sequel/Plugins/InsertReturningSelect.html","","<p>If the model&#39;s dataset selects explicit columns and the database supports it, the insert_returning_select …\n"],["Sequel::Plugins::InsertReturningSelect::ClassMethods","","Sequel/Plugins/InsertReturningSelect/ClassMethods.html","",""],["Sequel::Plugins::InsertReturningSelect::InstanceMethods","","Sequel/Plugins/InsertReturningSelect/InstanceMethods.html","",""],["Sequel::Plugins::InstanceFilters","","Sequel/Plugins/InstanceFilters.html","","<p>This plugin allows you to add filters on a per object basis that restrict updating or deleting the object. …\n"],["Sequel::Plugins::InstanceFilters::InstanceMethods","","Sequel/Plugins/InstanceFilters/InstanceMethods.html","",""],["Sequel::Plugins::InstanceHooks","","Sequel/Plugins/InstanceHooks.html","","<p>The instance_hooks plugin allows you to add hooks to specific instances, by passing a block to a _hook …\n"],["Sequel::Plugins::InstanceHooks::InstanceMethods","","Sequel/Plugins/InstanceHooks/InstanceMethods.html","",""],["Sequel::Plugins::InstanceSpecificDefault","","Sequel/Plugins/InstanceSpecificDefault.html","","<p>The instance_specific_default plugin exists to make it easier to use a global :instance_specific association …\n"],["Sequel::Plugins::InstanceSpecificDefault::ClassMethods","","Sequel/Plugins/InstanceSpecificDefault/ClassMethods.html","",""],["Sequel::Plugins::InvertedSubsets","","Sequel/Plugins/InvertedSubsets.html","","<p>The inverted_subsets plugin adds another method for each defined subset, which inverts the condition …\n"],["Sequel::Plugins::InvertedSubsets::DatasetModuleMethods","","Sequel/Plugins/InvertedSubsets/DatasetModuleMethods.html","",""],["Sequel::Plugins::JsonSerializer","","Sequel/Plugins/JsonSerializer.html","","<p>The json_serializer plugin handles serializing entire Sequel::Model objects to JSON, as well as support …\n"],["Sequel::Plugins::JsonSerializer::ClassMethods","","Sequel/Plugins/JsonSerializer/ClassMethods.html","",""],["Sequel::Plugins::JsonSerializer::DatasetMethods","","Sequel/Plugins/JsonSerializer/DatasetMethods.html","",""],["Sequel::Plugins::JsonSerializer::InstanceMethods","","Sequel/Plugins/JsonSerializer/InstanceMethods.html","",""],["Sequel::Plugins::JsonSerializer::Literal","","Sequel/Plugins/JsonSerializer/Literal.html","","<p>SEQUEL6: Remove :nocov:\n"],["Sequel::Plugins::LazyAttributes","","Sequel/Plugins/LazyAttributes.html","","<p>The lazy_attributes plugin allows users to easily set that some attributes should not be loaded by default …\n"],["Sequel::Plugins::LazyAttributes::ClassMethods","","Sequel/Plugins/LazyAttributes/ClassMethods.html","",""],["Sequel::Plugins::LazyAttributes::InstanceMethods","","Sequel/Plugins/LazyAttributes/InstanceMethods.html","",""],["Sequel::Plugins::List","","Sequel/Plugins/List.html","","<p>The list plugin allows for model instances to be part of an ordered list, based on a position field in …\n"],["Sequel::Plugins::List::ClassMethods","","Sequel/Plugins/List/ClassMethods.html","",""],["Sequel::Plugins::List::InstanceMethods","","Sequel/Plugins/List/InstanceMethods.html","",""],["Sequel::Plugins::ManyThroughMany","","Sequel/Plugins/ManyThroughMany.html","","<p>The many_through_many plugin allow you to create an association using multiple join tables. For example, …\n"],["Sequel::Plugins::ManyThroughMany::ClassMethods","","Sequel/Plugins/ManyThroughMany/ClassMethods.html","",""],["Sequel::Plugins::ManyThroughMany::DatasetMethods","","Sequel/Plugins/ManyThroughMany/DatasetMethods.html","",""],["Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html","","<p>The AssociationReflection subclass for many_through_many associations.\n"],["Sequel::Plugins::ManyThroughMany::OneThroughManyAssociationReflection","","Sequel/Plugins/ManyThroughMany/OneThroughManyAssociationReflection.html","",""],["Sequel::Plugins::ModificationDetection","","Sequel/Plugins/ModificationDetection.html","","<p>This plugin automatically detects in-place modifications to columns as well as direct modifications of …\n"],["Sequel::Plugins::ModificationDetection::ClassMethods","","Sequel/Plugins/ModificationDetection/ClassMethods.html","",""],["Sequel::Plugins::ModificationDetection::InstanceMethods","","Sequel/Plugins/ModificationDetection/InstanceMethods.html","",""],["Sequel::Plugins::MssqlOptimisticLocking","","Sequel/Plugins/MssqlOptimisticLocking.html","","<p>This plugin implements optimistic locking mechanism on Microsoft SQL Server using a timestamp/rowversion …\n"],["Sequel::Plugins::MssqlOptimisticLocking::ClassMethods","","Sequel/Plugins/MssqlOptimisticLocking/ClassMethods.html","",""],["Sequel::Plugins::MssqlOptimisticLocking::InstanceMethods","","Sequel/Plugins/MssqlOptimisticLocking/InstanceMethods.html","",""],["Sequel::Plugins::NestedAttributes","","Sequel/Plugins/NestedAttributes.html","","<p>The nested_attributes plugin allows you to create, update, and delete associated objects directly by …\n"],["Sequel::Plugins::NestedAttributes::ClassMethods","","Sequel/Plugins/NestedAttributes/ClassMethods.html","",""],["Sequel::Plugins::NestedAttributes::InstanceMethods","","Sequel/Plugins/NestedAttributes/InstanceMethods.html","",""],["Sequel::Plugins::OptimisticLocking","","Sequel/Plugins/OptimisticLocking.html","","<p>This plugin implements a simple database-independent locking mechanism to ensure that concurrent updates …\n"],["Sequel::Plugins::OptimisticLocking::ClassMethods","","Sequel/Plugins/OptimisticLocking/ClassMethods.html","",""],["Sequel::Plugins::OptimisticLocking::InstanceMethods","","Sequel/Plugins/OptimisticLocking/InstanceMethods.html","",""],["Sequel::Plugins::PgArrayAssociations","","Sequel/Plugins/PgArrayAssociations.html","","<p>This plugin allows you to create associations where the foreign keys are stored in a PostgreSQL array …\n"],["Sequel::Plugins::PgArrayAssociations::ClassMethods","","Sequel/Plugins/PgArrayAssociations/ClassMethods.html","",""],["Sequel::Plugins::PgArrayAssociations::DatasetMethods","","Sequel/Plugins/PgArrayAssociations/DatasetMethods.html","",""],["Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html","","<p>The AssociationReflection subclass for many_to_pg_array associations.\n"],["Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html","","<p>The AssociationReflection subclass for pg_array_to_many associations.\n"],["Sequel::Plugins::PgAutoConstraintValidations","","Sequel/Plugins/PgAutoConstraintValidations.html","","<p>The pg_auto_constraint_validations plugin automatically converts some constraint violation exceptions …\n"],["Sequel::Plugins::PgAutoConstraintValidations::ClassMethods","","Sequel/Plugins/PgAutoConstraintValidations/ClassMethods.html","",""],["Sequel::Plugins::PgAutoConstraintValidations::InstanceMethods","","Sequel/Plugins/PgAutoConstraintValidations/InstanceMethods.html","",""],["Sequel::Plugins::PgRow","","Sequel/Plugins/PgRow.html","","<p>The pg_row plugin allows you to use Sequel::Model classes as composite type classes, via the pg_row extension. …\n"],["Sequel::Plugins::PgRow::ClassMethods","","Sequel/Plugins/PgRow/ClassMethods.html","",""],["Sequel::Plugins::PgRow::DatabaseMethods","","Sequel/Plugins/PgRow/DatabaseMethods.html","",""],["Sequel::Plugins::PgRow::InstanceMethods","","Sequel/Plugins/PgRow/InstanceMethods.html","",""],["Sequel::Plugins::PreparedStatements","","Sequel/Plugins/PreparedStatements.html","","<p>The prepared_statements plugin modifies the model to use prepared statements for instance level inserts …\n"],["Sequel::Plugins::PreparedStatements::ClassMethods","","Sequel/Plugins/PreparedStatements/ClassMethods.html","",""],["Sequel::Plugins::PreparedStatements::InstanceMethods","","Sequel/Plugins/PreparedStatements/InstanceMethods.html","",""],["Sequel::Plugins::PreparedStatementsSafe","","Sequel/Plugins/PreparedStatementsSafe.html","","<p>The prepared_statements_safe plugin modifies the model to reduce the number of prepared statements that …\n"],["Sequel::Plugins::PreparedStatementsSafe::ClassMethods","","Sequel/Plugins/PreparedStatementsSafe/ClassMethods.html","",""],["Sequel::Plugins::PreparedStatementsSafe::InstanceMethods","","Sequel/Plugins/PreparedStatementsSafe/InstanceMethods.html","",""],["Sequel::Plugins::RcteTree","","Sequel/Plugins/RcteTree.html","","<p>Overview\n<p>The rcte_tree plugin deals with tree structured data stored in the database using the adjacency …\n"],["Sequel::Plugins::Serialization","","Sequel/Plugins/Serialization.html","","<p>The serialization plugin allows you to keep serialized ruby objects in the database, while giving you …\n"],["Sequel::Plugins::Serialization::ClassMethods","","Sequel/Plugins/Serialization/ClassMethods.html","",""],["Sequel::Plugins::Serialization::InstanceMethods","","Sequel/Plugins/Serialization/InstanceMethods.html","",""],["Sequel::Plugins::SerializationModificationDetection","","Sequel/Plugins/SerializationModificationDetection.html","","<p>This plugin extends the serialization plugin and enables it to detect changes in serialized values by …\n"],["Sequel::Plugins::SerializationModificationDetection::InstanceMethods","","Sequel/Plugins/SerializationModificationDetection/InstanceMethods.html","",""],["Sequel::Plugins::Sharding","","Sequel/Plugins/Sharding.html","","<p>The sharding plugin augments Sequel&#39;s default model sharding support in the following ways:\n<p>It automatically …\n"],["Sequel::Plugins::Sharding::ClassMethods","","Sequel/Plugins/Sharding/ClassMethods.html","",""],["Sequel::Plugins::Sharding::DatasetMethods","","Sequel/Plugins/Sharding/DatasetMethods.html","",""],["Sequel::Plugins::Sharding::InstanceMethods","","Sequel/Plugins/Sharding/InstanceMethods.html","",""],["Sequel::Plugins::SingleTableInheritance","","Sequel/Plugins/SingleTableInheritance.html","","<p>The single_table_inheritance plugin allows storing all objects in the same class hierarchy in the same …\n"],["Sequel::Plugins::SingleTableInheritance::ClassMethods","","Sequel/Plugins/SingleTableInheritance/ClassMethods.html","",""],["Sequel::Plugins::SingleTableInheritance::InstanceMethods","","Sequel/Plugins/SingleTableInheritance/InstanceMethods.html","",""],["Sequel::Plugins::SingularTableNames","","Sequel/Plugins/SingularTableNames.html","","<p>The singular_table_names plugin changes the default table names for subclasses to not assume a plural …\n"],["Sequel::Plugins::SingularTableNames::ClassMethods","","Sequel/Plugins/SingularTableNames/ClassMethods.html","",""],["Sequel::Plugins::SkipCreateRefresh","","Sequel/Plugins/SkipCreateRefresh.html","","<p>The skip_create_refresh plugin skips the refresh after saving a new model object.  Sequel does the refresh …\n"],["Sequel::Plugins::SkipCreateRefresh::InstanceMethods","","Sequel/Plugins/SkipCreateRefresh/InstanceMethods.html","",""],["Sequel::Plugins::SkipSavingColumns","","Sequel/Plugins/SkipSavingColumns.html","","<p>The skip_saving_columms plugin allows skipping specific columns when saving.  By default, it skips columns …\n"],["Sequel::Plugins::SkipSavingColumns::ClassMethods","","Sequel/Plugins/SkipSavingColumns/ClassMethods.html","",""],["Sequel::Plugins::SkipSavingColumns::InstanceMethods","","Sequel/Plugins/SkipSavingColumns/InstanceMethods.html","",""],["Sequel::Plugins::SplitValues","","Sequel/Plugins/SplitValues.html","","<p>The split_values plugin splits the values hash retreived from the database, and moves keys from the values …\n"],["Sequel::Plugins::SplitValues::ClassMethods","","Sequel/Plugins/SplitValues/ClassMethods.html","",""],["Sequel::Plugins::SplitValues::InstanceMethods","","Sequel/Plugins/SplitValues/InstanceMethods.html","",""],["Sequel::Plugins::SqlComments","","Sequel/Plugins/SqlComments.html","","<p>The sql_comments plugin will automatically use SQL comments on queries for the model it is loaded into. …\n"],["Sequel::Plugins::SqlComments::ClassMethods","","Sequel/Plugins/SqlComments/ClassMethods.html","",""],["Sequel::Plugins::SqlComments::DatasetMethods","","Sequel/Plugins/SqlComments/DatasetMethods.html","",""],["Sequel::Plugins::SqlComments::InstanceMethods","","Sequel/Plugins/SqlComments/InstanceMethods.html","",""],["Sequel::Plugins::StaticCache","","Sequel/Plugins/StaticCache.html","","<p>The static_cache plugin is designed for models that are not modified at all in production use cases, …\n"],["Sequel::Plugins::StaticCache::ClassMethods","","Sequel/Plugins/StaticCache/ClassMethods.html","",""],["Sequel::Plugins::StaticCache::InstanceMethods","","Sequel/Plugins/StaticCache/InstanceMethods.html","",""],["Sequel::Plugins::StaticCacheCache","","Sequel/Plugins/StaticCacheCache.html","","<p>The static_cache_cache plugin allows for caching the row content for subclasses that use the static cache …\n"],["Sequel::Plugins::StaticCacheCache::ClassMethods","","Sequel/Plugins/StaticCacheCache/ClassMethods.html","",""],["Sequel::Plugins::StringStripper","","Sequel/Plugins/StringStripper.html","","<p>StringStripper is a plugin that strips all input strings when assigning to the model&#39;s values. Example: …\n"],["Sequel::Plugins::StringStripper::ClassMethods","","Sequel/Plugins/StringStripper/ClassMethods.html","",""],["Sequel::Plugins::Subclasses","","Sequel/Plugins/Subclasses.html","","<p>The subclasses plugin keeps track of all subclasses of the current model class.  Direct subclasses are …\n"],["Sequel::Plugins::Subclasses::ClassMethods","","Sequel/Plugins/Subclasses/ClassMethods.html","",""],["Sequel::Plugins::SubsetConditions","","Sequel/Plugins/SubsetConditions.html","","<p>The subset_conditions plugin creates an additional *_conditions method for every subset created, which …\n"],["Sequel::Plugins::SubsetConditions::DatasetModuleMethods","","Sequel/Plugins/SubsetConditions/DatasetModuleMethods.html","",""],["Sequel::Plugins::TableSelect","","Sequel/Plugins/TableSelect.html","","<p>The table_select plugin changes the default selection for a model dataset from <code>*</code> to <code>table.*</code>. This makes …\n"],["Sequel::Plugins::TableSelect::ClassMethods","","Sequel/Plugins/TableSelect/ClassMethods.html","",""],["Sequel::Plugins::TacticalEagerLoading","","Sequel/Plugins/TacticalEagerLoading.html","","<p>The tactical_eager_loading plugin allows you to eagerly load an association for all objects retrieved …\n"],["Sequel::Plugins::TacticalEagerLoading::DatasetMethods","","Sequel/Plugins/TacticalEagerLoading/DatasetMethods.html","",""],["Sequel::Plugins::TacticalEagerLoading::InstanceMethods","","Sequel/Plugins/TacticalEagerLoading/InstanceMethods.html","",""],["Sequel::Plugins::ThrowFailures","","Sequel/Plugins/ThrowFailures.html","","<p>The throw_failures plugin throws HookFailed and ValidationFailed exceptions instead of raising them. …\n"],["Sequel::Plugins::ThrowFailures::InstanceMethods","","Sequel/Plugins/ThrowFailures/InstanceMethods.html","",""],["Sequel::Plugins::Timestamps","","Sequel/Plugins/Timestamps.html","","<p>The timestamps plugin creates hooks that automatically set create and update timestamp fields.  Both …\n"],["Sequel::Plugins::Timestamps::ClassMethods","","Sequel/Plugins/Timestamps/ClassMethods.html","",""],["Sequel::Plugins::Timestamps::InstanceMethods","","Sequel/Plugins/Timestamps/InstanceMethods.html","",""],["Sequel::Plugins::Touch","","Sequel/Plugins/Touch.html","","<p>The touch plugin adds a touch method to model instances, which saves the object with a modified timestamp. …\n"],["Sequel::Plugins::Touch::ClassMethods","","Sequel/Plugins/Touch/ClassMethods.html","",""],["Sequel::Plugins::Touch::InstanceMethods","","Sequel/Plugins/Touch/InstanceMethods.html","",""],["Sequel::Plugins::Tree","","Sequel/Plugins/Tree.html","","<p>The tree plugin adds additional associations and methods that allow you to  treat a Model as a tree. …\n"],["Sequel::Plugins::Tree::ClassMethods","","Sequel/Plugins/Tree/ClassMethods.html","",""],["Sequel::Plugins::Tree::DatasetMethods","","Sequel/Plugins/Tree/DatasetMethods.html","",""],["Sequel::Plugins::Tree::InstanceMethods","","Sequel/Plugins/Tree/InstanceMethods.html","",""],["Sequel::Plugins::Tree::SingleRoot","","Sequel/Plugins/Tree/SingleRoot.html","","<p>Plugin included when :single_root option is passed.\n"],["Sequel::Plugins::Tree::SingleRoot::ClassMethods","","Sequel/Plugins/Tree/SingleRoot/ClassMethods.html","",""],["Sequel::Plugins::Tree::SingleRoot::InstanceMethods","","Sequel/Plugins/Tree/SingleRoot/InstanceMethods.html","",""],["Sequel::Plugins::Tree::TreeMultipleRootError","","Sequel/Plugins/Tree/TreeMultipleRootError.html","",""],["Sequel::Plugins::TypecastOnLoad","","Sequel/Plugins/TypecastOnLoad.html","","<p>The typecast_on_load plugin exists because most of Sequel&#39;s database adapters don&#39;t have complete …\n"],["Sequel::Plugins::TypecastOnLoad::ClassMethods","","Sequel/Plugins/TypecastOnLoad/ClassMethods.html","",""],["Sequel::Plugins::TypecastOnLoad::InstanceMethods","","Sequel/Plugins/TypecastOnLoad/InstanceMethods.html","",""],["Sequel::Plugins::UnlimitedUpdate","","Sequel/Plugins/UnlimitedUpdate.html","","<p>The unlimited_update plugin is designed to work around a MySQL warning in replicated environments, which …\n"],["Sequel::Plugins::UnlimitedUpdate::InstanceMethods","","Sequel/Plugins/UnlimitedUpdate/InstanceMethods.html","",""],["Sequel::Plugins::UnusedAssociations","","Sequel/Plugins/UnusedAssociations.html","","<p>The unused_associations plugin detects which model associations are not used and can be removed, and …\n"],["Sequel::Plugins::UnusedAssociations::ClassMethods","","Sequel/Plugins/UnusedAssociations/ClassMethods.html","",""],["Sequel::Plugins::UpdateOrCreate","","Sequel/Plugins/UpdateOrCreate.html","","<p>The update_or_create plugin adds methods that make it easier to deal with objects which may or may not …\n"],["Sequel::Plugins::UpdateOrCreate::ClassMethods","","Sequel/Plugins/UpdateOrCreate/ClassMethods.html","",""],["Sequel::Plugins::UpdatePrimaryKey","","Sequel/Plugins/UpdatePrimaryKey.html","","<p>The update_primary_key plugin allows you to modify an object&#39;s primary key and then save the record. …\n"],["Sequel::Plugins::UpdatePrimaryKey::InstanceMethods","","Sequel/Plugins/UpdatePrimaryKey/InstanceMethods.html","",""],["Sequel::Plugins::UpdateRefresh","","Sequel/Plugins/UpdateRefresh.html","","<p>The update_refresh plugin makes the model class refresh the object after updating.  By default, Sequel …\n"],["Sequel::Plugins::UpdateRefresh::ClassMethods","","Sequel/Plugins/UpdateRefresh/ClassMethods.html","",""],["Sequel::Plugins::UpdateRefresh::InstanceMethods","","Sequel/Plugins/UpdateRefresh/InstanceMethods.html","",""],["Sequel::Plugins::Uuid","","Sequel/Plugins/Uuid.html","","<p>The uuid plugin creates hooks that automatically create a uuid for every instance.\n<p>Usage:\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Uuid all model ...</span>\n</pre>\n"],["Sequel::Plugins::Uuid::ClassMethods","","Sequel/Plugins/Uuid/ClassMethods.html","",""],["Sequel::Plugins::Uuid::InstanceMethods","","Sequel/Plugins/Uuid/InstanceMethods.html","",""],["Sequel::Plugins::ValidateAssociated","","Sequel/Plugins/ValidateAssociated.html","","<p>The validates_associated plugin allows you to validate associated objects.  It also offers the ability …\n"],["Sequel::Plugins::ValidateAssociated::InstanceMethods","","Sequel/Plugins/ValidateAssociated/InstanceMethods.html","",""],["Sequel::Plugins::ValidationClassMethods","","Sequel/Plugins/ValidationClassMethods.html","","<p>Sequel&#39;s built-in validation_class_methods plugin adds backwards compatibility for the legacy class-level …\n"],["Sequel::Plugins::ValidationClassMethods::ClassMethods","","Sequel/Plugins/ValidationClassMethods/ClassMethods.html","",""],["Sequel::Plugins::ValidationClassMethods::ClassMethods::Generator","","Sequel/Plugins/ValidationClassMethods/ClassMethods/Generator.html","","<p>The Generator class is used to generate validation definitions using  the validates {} idiom.\n"],["Sequel::Plugins::ValidationClassMethods::InstanceMethods","","Sequel/Plugins/ValidationClassMethods/InstanceMethods.html","",""],["Sequel::Plugins::ValidationContexts","","Sequel/Plugins/ValidationContexts.html","","<p>The validation_contexts plugin adds support for a validation_context method inside a validate method. …\n"],["Sequel::Plugins::ValidationContexts::InstanceMethods","","Sequel/Plugins/ValidationContexts/InstanceMethods.html","",""],["Sequel::Plugins::ValidationHelpers","","Sequel/Plugins/ValidationHelpers.html","","<p>The validation_helpers plugin contains validate_* methods designed to be called inside Model#validate …\n"],["Sequel::Plugins::ValidationHelpers::InstanceMethods","","Sequel/Plugins/ValidationHelpers/InstanceMethods.html","",""],["Sequel::Plugins::WhitelistSecurity","","Sequel/Plugins/WhitelistSecurity.html","","<p>The whitelist_security plugin contains whitelist-based support for mass assignment, explicitly specifying …\n"],["Sequel::Plugins::WhitelistSecurity::ClassMethods","","Sequel/Plugins/WhitelistSecurity/ClassMethods.html","",""],["Sequel::Plugins::WhitelistSecurity::InstanceMethods","","Sequel/Plugins/WhitelistSecurity/InstanceMethods.html","",""],["Sequel::Plugins::XmlSerializer","","Sequel/Plugins/XmlSerializer.html","","<p>The xml_serializer plugin handles serializing entire Sequel::Model objects to XML, and deserializing …\n"],["Sequel::Plugins::XmlSerializer::ClassMethods","","Sequel/Plugins/XmlSerializer/ClassMethods.html","",""],["Sequel::Plugins::XmlSerializer::DatasetMethods","","Sequel/Plugins/XmlSerializer/DatasetMethods.html","",""],["Sequel::Plugins::XmlSerializer::InstanceMethods","","Sequel/Plugins/XmlSerializer/InstanceMethods.html","",""],["Sequel::Postgres","","Sequel/Postgres.html","",""],["Sequel::Postgres::ArrayOp","","Sequel/Postgres/ArrayOp.html","","<p>The ArrayOp class is a simple container for a single object that defines methods that yield Sequel expression …\n"],["Sequel::Postgres::ArrayOpMethods","","Sequel/Postgres/ArrayOpMethods.html","",""],["Sequel::Postgres::EnumDatabaseMethods","","Sequel/Postgres/EnumDatabaseMethods.html","","<p>Methods enabling Database object integration with enum types.\n"],["Sequel::Postgres::ExtendedDateSupport","","Sequel/Postgres/ExtendedDateSupport.html","",""],["Sequel::Postgres::ExtendedDateSupport::DatasetMethods","","Sequel/Postgres/ExtendedDateSupport/DatasetMethods.html","",""],["Sequel::Postgres::HStore","","Sequel/Postgres/HStore.html","","<p>:nocov:\n"],["Sequel::Postgres::HStore::DatabaseMethods","","Sequel/Postgres/HStore/DatabaseMethods.html","",""],["Sequel::Postgres::HStore::Parser","","Sequel/Postgres/HStore/Parser.html","","<p>Parser for PostgreSQL hstore output format.\n"],["Sequel::Postgres::HStoreOp","","Sequel/Postgres/HStoreOp.html","","<p>The HStoreOp class is a simple container for a single object that defines methods that yield Sequel expression …\n"],["Sequel::Postgres::HStoreOpMethods","","Sequel/Postgres/HStoreOpMethods.html","",""],["Sequel::Postgres::HStoreSubscriptOp","","Sequel/Postgres/HStoreSubscriptOp.html","","<p>Represents hstore subscripts. This is abstracted because the subscript support depends on the database …\n"],["Sequel::Postgres::InetDatabaseMethods","","Sequel/Postgres/InetDatabaseMethods.html","","<p>Methods enabling Database object integration with the inet/cidr types.\n"],["Sequel::Postgres::InetDatasetMethods","","Sequel/Postgres/InetDatasetMethods.html","",""],["Sequel::Postgres::InetOp","","Sequel/Postgres/InetOp.html","","<p>The InetOp class is a simple container for a single object that defines methods that yield Sequel expression …\n"],["Sequel::Postgres::InetOpMethods","","Sequel/Postgres/InetOpMethods.html","",""],["Sequel::Postgres::IntervalDatabaseMethods","","Sequel/Postgres/IntervalDatabaseMethods.html","",""],["Sequel::Postgres::IntervalDatabaseMethods::Parser","","Sequel/Postgres/IntervalDatabaseMethods/Parser.html","","<p>Creates callable objects that convert strings into ActiveSupport::Duration instances.\n"],["Sequel::Postgres::IntervalDatasetMethods","","Sequel/Postgres/IntervalDatasetMethods.html","",""],["Sequel::Postgres::JSONArray","","Sequel/Postgres/JSONArray.html","","<p>:nocov:\n"],["Sequel::Postgres::JSONBArray","","Sequel/Postgres/JSONBArray.html","",""],["Sequel::Postgres::JSONBHash","","Sequel/Postgres/JSONBHash.html","",""],["Sequel::Postgres::JSONBObject","","Sequel/Postgres/JSONBObject.html","","<p>A module included in all of the JSONB wrapper classes.\n"],["Sequel::Postgres::JSONBOp","","Sequel/Postgres/JSONBOp.html","","<p>JSONBaseOp subclass for the jsonb type.\n<p>In the method documentation examples, assume that:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span> = <span class=\"ruby-constant\">Sequel</span>.<span class=\"ruby-identifier\">pg_jsonb</span>(<span class=\"ruby-value\">:jsonb</span>)\n</pre>\n"],["Sequel::Postgres::JSONBSubscriptOp","","Sequel/Postgres/JSONBSubscriptOp.html","","<p>Represents JSONB subscripts. This is abstracted because the subscript support depends on the database …\n"],["Sequel::Postgres::JSONBaseOp","","Sequel/Postgres/JSONBaseOp.html","","<p>The JSONBaseOp class is a simple container for a single object that defines methods that yield Sequel …\n"],["Sequel::Postgres::JSONDatabaseMethods","","Sequel/Postgres/JSONDatabaseMethods.html","","<p>Methods enabling Database object integration with the json type.\n"],["Sequel::Postgres::JSONHash","","Sequel/Postgres/JSONHash.html","",""],["Sequel::Postgres::JSONObject","","Sequel/Postgres/JSONObject.html","","<p>A module included in all of the JSON wrapper classes.\n"],["Sequel::Postgres::JSONOp","","Sequel/Postgres/JSONOp.html","","<p>JSONBaseOp subclass for the json type\n"],["Sequel::Postgres::JSONOpMethods","","Sequel/Postgres/JSONOpMethods.html","",""],["Sequel::Postgres::LooseCount","","Sequel/Postgres/LooseCount.html","",""],["Sequel::Postgres::PGArray","","Sequel/Postgres/PGArray.html","","<p>Represents a PostgreSQL array column value.\n<p>:nocov:\n"],["Sequel::Postgres::PGArray::Creator","","Sequel/Postgres/PGArray/Creator.html","","<p>Callable object that takes the input string and parses it using Parser.\n"],["Sequel::Postgres::PGArray::DatabaseMethods","","Sequel/Postgres/PGArray/DatabaseMethods.html","",""],["Sequel::Postgres::PGArray::Parser","","Sequel/Postgres/PGArray/Parser.html","","<p>PostgreSQL array parser that handles PostgreSQL array output format. Note that does not handle all forms …\n"],["Sequel::Postgres::PGMultiRange","","Sequel/Postgres/PGMultiRange.html","","<p>:nocov:\n"],["Sequel::Postgres::PGMultiRange::Creator","","Sequel/Postgres/PGMultiRange/Creator.html","","<p>Callable object that takes the input string and parses it using Parser.\n"],["Sequel::Postgres::PGMultiRange::DatabaseMethods","","Sequel/Postgres/PGMultiRange/DatabaseMethods.html","",""],["Sequel::Postgres::PGMultiRange::Parser","","Sequel/Postgres/PGMultiRange/Parser.html","","<p>Converts strings into PGMultiRange instances.\n"],["Sequel::Postgres::PGRange","","Sequel/Postgres/PGRange.html","","<p>:nocov:\n"],["Sequel::Postgres::PGRange::DatabaseMethods","","Sequel/Postgres/PGRange/DatabaseMethods.html","",""],["Sequel::Postgres::PGRange::DatasetMethods","","Sequel/Postgres/PGRange/DatasetMethods.html","",""],["Sequel::Postgres::PGRange::Parser","","Sequel/Postgres/PGRange/Parser.html","","<p>Creates callable objects that convert strings into PGRange instances.\n"],["Sequel::Postgres::PGRow","","Sequel/Postgres/PGRow.html","",""],["Sequel::Postgres::PGRow::ArrayRow","","Sequel/Postgres/PGRow/ArrayRow.html","","<p>Class for row-valued/composite types that are treated as arrays. By default, this is only used for generic …\n"],["Sequel::Postgres::PGRow::DatabaseMethods","","Sequel/Postgres/PGRow/DatabaseMethods.html","",""],["Sequel::Postgres::PGRow::HashRow","","Sequel/Postgres/PGRow/HashRow.html","","<p>Class for row-valued/composite types that are treated as hashes. Types registered via Database#register_row_type …\n"],["Sequel::Postgres::PGRow::Parser","","Sequel/Postgres/PGRow/Parser.html","","<p>The Parser is responsible for taking the input string from PostgreSQL, and returning an appropriate ruby …\n"],["Sequel::Postgres::PGRow::Splitter","","Sequel/Postgres/PGRow/Splitter.html","","<p>This parser-like class splits the PostgreSQL row-valued/composite type output string format into an array …\n"],["Sequel::Postgres::PGRowOp","","Sequel/Postgres/PGRowOp.html","","<p>This class represents a composite type expression reference.\n"],["Sequel::Postgres::PGRowOp::ExpressionMethods","","Sequel/Postgres/PGRowOp/ExpressionMethods.html","",""],["Sequel::Postgres::RangeOp","","Sequel/Postgres/RangeOp.html","","<p>The RangeOp class is a simple container for a single object that defines methods that yield Sequel expression …\n"],["Sequel::Postgres::RangeOpMethods","","Sequel/Postgres/RangeOpMethods.html","",""],["Sequel::Postgres::StaticCacheUpdater","","Sequel/Postgres/StaticCacheUpdater.html","",""],["Sequel::Postgres::Timestamptz","","Sequel/Postgres/Timestamptz.html","",""],["Sequel::PrettyTable","","Sequel/PrettyTable.html","",""],["Sequel::S","","Sequel/S.html","",""],["Sequel::SQL","","Sequel/SQL.html","",""],["Sequel::SQL::Builders","","Sequel/SQL/Builders.html","",""],["Sequel::SQL::CaseExpression","","Sequel/SQL/CaseExpression.html","",""],["Sequel::SQL::ComplexExpression","","Sequel/SQL/ComplexExpression.html","",""],["Sequel::SQL::Constant","","Sequel/SQL/Constant.html","",""],["Sequel::SQL::DateAdd","","Sequel/SQL/DateAdd.html","","<p>The DateAdd class represents the addition of an interval to a date/timestamp expression.\n"],["Sequel::SQL::DateAdd::DatasetMethods","","Sequel/SQL/DateAdd/DatasetMethods.html","","<p>These methods are added to datasets using the date_arithmetic extension, for the purposes of correctly …\n"],["Sequel::SQL::EscapedLikeExpression","","Sequel/SQL/EscapedLikeExpression.html","","<p>Represents an pattern match SQL expression, where the pattern can depend upon interpolated values in …\n"],["Sequel::SQL::Expression","","Sequel/SQL/Expression.html","",""],["Sequel::SQL::Function","","Sequel/SQL/Function.html","",""],["Sequel::SQL::GenericExpression","","Sequel/SQL/GenericExpression.html","",""],["Sequel::SQL::JoinOnClause","","Sequel/SQL/JoinOnClause.html","",""],["Sequel::SQL::JoinUsingClause","","Sequel/SQL/JoinUsingClause.html","",""],["Sequel::SQL::OrderedExpression","","Sequel/SQL/OrderedExpression.html","",""],["Sequel::SQL::StringAgg","","Sequel/SQL/StringAgg.html","","<p>The StringAgg class represents an aggregate string concatentation.\n"],["Sequel::SQL::StringAgg::DatasetMethods","","Sequel/SQL/StringAgg/DatasetMethods.html","","<p>These methods are added to datasets using the string_agg extension, for the purposes of correctly literalizing …\n"],["Sequel::SQL::StringMethods","","Sequel/SQL/StringMethods.html","",""],["Sequel::SQL::VirtualRow","","Sequel/SQL/VirtualRow.html","",""],["Sequel::SQLComments","","Sequel/SQLComments.html","",""],["Sequel::SQLLogNormalizer","","Sequel/SQLLogNormalizer.html","",""],["Sequel::SQLite","","Sequel/SQLite.html","",""],["Sequel::SQLite::JSONOp","","Sequel/SQLite/JSONOp.html","","<p>The JSONOp class is a simple container for a single object that defines methods that yield Sequel expression …\n"],["Sequel::SQLite::JSONOpMethods","","Sequel/SQLite/JSONOpMethods.html","",""],["Sequel::Schema","","Sequel/Schema.html","",""],["Sequel::Schema::CreateTableGenerator","","Sequel/Schema/CreateTableGenerator.html","",""],["Sequel::SchemaCaching","","Sequel/SchemaCaching.html","",""],["Sequel::SchemaDumper","","Sequel/SchemaDumper.html","",""],["Sequel::SelectRemove","","Sequel/SelectRemove.html","",""],["Sequel::Sequel4DatasetMethods","","Sequel/Sequel4DatasetMethods.html","",""],["Sequel::ServerBlock","","Sequel/ServerBlock.html","",""],["Sequel::ServerLogging","","Sequel/ServerLogging.html","",""],["Sequel::SimpleMigration","","Sequel/SimpleMigration.html","","<p>Migration class used by the Sequel.migration DSL, using instances for each migration, unlike the <code>Migration</code> …\n"],["Sequel::SymbolAref","","Sequel/SymbolAref.html","","<p>:nocov:\n"],["Sequel::SymbolAs","","Sequel/SymbolAs.html","","<p>:nocov:\n"],["Sequel::ThreadLocalTimezones","","Sequel/ThreadLocalTimezones.html","",""],["Sequel::ThreadedServerBlock","","Sequel/ThreadedServerBlock.html","","<p>Adds with_server support for the sharded threaded connection pool.\n"],["Sequel::TimestampMigrator","","Sequel/TimestampMigrator.html","","<p>The migrator used if any migration file version is greater than 20000101. Stores filenames of migration …\n"],["Sequel::ToDot","","Sequel/ToDot.html","",""],["Sequel::ToDot::DatasetMethods","","Sequel/ToDot/DatasetMethods.html","",""],["Sequel::UnthreadedServerBlock","","Sequel/UnthreadedServerBlock.html","","<p>Adds with_server support for the sharded single connection pool.\n"],["String","","String.html","","<p>Sequel extends <code>String</code> to add methods to implement the SQL DSL.\n<p>The inflector extension adds inflection …\n"],["String::Inflections","","String/Inflections.html","","<p>This module acts as a singleton returned/yielded by String.inflections, which is used to override or …\n"],["Symbol","","Symbol.html","","<p>Sequel extends <code>Symbol</code> to add methods to implement the SQL DSL.\n"],["TrueClass","","TrueClass.html","",""],["&","Hash","Hash.html#method-i-26","(ce)","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching all of the conditions in this …\n"],["&","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-26","(ce)","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching all of the conditions in this …\n"],["*","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-2A","(ce=(arg=false;nil))",""],["*","Sequel::Postgres::PGRowOp","Sequel/Postgres/PGRowOp.html#method-i-2A","(ce=(arg=false;nil))","<p>Use the (identifier).* syntax to reference the members of the composite type as separate columns.  Generally …\n"],["-","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-2D","(other)","<p>Delete entries from an hstore using the subtraction operator:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-string\">&#39;a&#39;</span> <span class=\"ruby-comment\"># (hstore - &#39;a&#39;)</span>\n</pre>\n"],["-","Sequel::Postgres::InetOp","Sequel/Postgres/InetOp.html#method-i-2D","(v)","<p>Return an expression for the subtraction of the argument from the receiver\n"],["-","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-2D","(other)","<p>jsonb expression for deletion of the given argument from the current jsonb.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-string\">&quot;a&quot;</span> <span class=\"ruby-comment\"># (jsonb - ...</span>\n</pre>\n"],["==","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-3D-3D","(other)","<p>Don&#39;t consider multiranges with different database types equal.\n"],["==","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-3D-3D","(other)",""],["===","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-3D-3D-3D","(value)",""],["===","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-3D-3D-3D","(other)","<p>Allow PGRange values in case statements, where they return true if they are equal to each other using …\n"],["[]","Sequel::Plugins::AccessedColumns::InstanceMethods","Sequel/Plugins/AccessedColumns/InstanceMethods.html#method-i-5B-5D","(c)","<p>Record the column access before retrieving the value.\n"],["[]","Sequel::Plugins::ActiveModel::Errors","Sequel/Plugins/ActiveModel/Errors.html#method-i-5B-5D","(k)","<p>Add autovivification so that #[] always returns an array.\n"],["[]","Sequel::Plugins::DefaultsSetter::InstanceMethods","Sequel/Plugins/DefaultsSetter/InstanceMethods.html#method-i-5B-5D","(k)","<p>Use default value for a new record if values doesn&#39;t already contain an entry for it.\n"],["[]","Sequel::Plugins::SplitValues::InstanceMethods","Sequel/Plugins/SplitValues/InstanceMethods.html#method-i-5B-5D","(k)","<p>If there isn&#39;t an entry in the values hash, but there is a noncolumn_values hash, look in that hash …\n"],["[]","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-5B-5D","(key)","<p>Access a member of the array, returns an SQL::Subscript instance:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>[<span class=\"ruby-value\">1</span>] <span class=\"ruby-comment\"># array[1]</span>\n</pre>\n"],["[]","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-5B-5D","(key)","<p>Lookup the value for the given key in an hstore:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>[<span class=\"ruby-string\">&#39;a&#39;</span>] <span class=\"ruby-comment\"># (hstore -&gt; &#39;a&#39;)</span>\n</pre>\n"],["[]","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-5B-5D","(key)","<p>Support subscript syntax for JSONB.\n"],["[]","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-5B-5D","(key)","<p>Get JSON array element or object field as json.  If an array is given, gets the object at the specified …\n"],["[]","Sequel::Postgres::PGRowOp","Sequel/Postgres/PGRowOp.html#method-i-5B-5D","(member)","<p>Access a member of the composite type if given a symbol or an SQL::Identifier.  For all other access, …\n"],["[]","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-5B-5D","(key)","<p>Returns an expression for getting the JSON array element or object field at the specified path as a  …\n"],["[]","Sequel::SymbolAref","Sequel/SymbolAref.html#method-i-5B-5D","(v)",""],["[]","Symbol","Symbol.html#method-i-5B-5D","(v)",""],["[]=","Sequel::Plugins::InputTransformer::InstanceMethods","Sequel/Plugins/InputTransformer/InstanceMethods.html#method-i-5B-5D-3D","(k, v)","<p>Transform the input using all of the transformers, except those explicitly skipped, before setting the …\n"],["__value","Sequel::Database::AsyncThreadPool::BaseProxy","Sequel/Database/AsyncThreadPool/BaseProxy.html#method-i-__value","()","<p>Wait for the value to be loaded if it hasn&#39;t already been loaded. If the code to load the return …\n"],["_dump","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-i-_dump","(*)","<p>Use custom marshal dumping, since underlying hash uses a default proc.\n"],["_import","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-_import","(columns, values, opts)","<p>Return nil without sending a database query.\n"],["_load","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-c-_load","(args)","<p>Use custom marshal loading, since underlying hash uses a default proc.\n"],["_to_partial_path","Sequel::Plugins::ActiveModel::ClassMethods","Sequel/Plugins/ActiveModel/ClassMethods.html#method-i-_to_partial_path","()","<p>Class level cache for to_partial_path.\n"],["accessed_columns","Sequel::Plugins::AccessedColumns::InstanceMethods","Sequel/Plugins/AccessedColumns/InstanceMethods.html#method-i-accessed_columns","()","<p>The columns that have been accessed.\n"],["add_association_dependencies","Sequel::Plugins::AssociationDependencies::ClassMethods","Sequel/Plugins/AssociationDependencies/ClassMethods.html#method-i-add_association_dependencies","(hash)","<p>Add association dependencies to this model.  The hash should have association name symbol keys and dependency …\n"],["add_enum_value","Sequel::Postgres::EnumDatabaseMethods","Sequel/Postgres/EnumDatabaseMethods.html#method-i-add_enum_value","(enum, value, opts=OPTS)","<p>Run the SQL to add the given value to the existing enum type. Options:\n<p>:after  &mdash; Add the new value after …\n"],["add_input_transformer","Sequel::Plugins::InputTransformer::ClassMethods","Sequel/Plugins/InputTransformer/ClassMethods.html#method-i-add_input_transformer","(transformer_name, &block)","<p>Add an input transformer to this model.\n"],["add_named_conversion_proc","Sequel::Postgres::PGArray::DatabaseMethods","Sequel/Postgres/PGArray/DatabaseMethods.html#method-i-add_named_conversion_proc","(name, &block)",""],["add_typecast_on_load_columns","Sequel::Plugins::TypecastOnLoad::ClassMethods","Sequel/Plugins/TypecastOnLoad/ClassMethods.html#method-i-add_typecast_on_load_columns","(*columns)","<p>Add additional columns to typecast on load for this model.\n"],["after_create","Sequel::Plugins::Touch::InstanceMethods","Sequel/Plugins/Touch/InstanceMethods.html#method-i-after_create","()","<p>Touch all of the model&#39;s touched_associations when creating the object.\n"],["after_destroy","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-after_destroy","()","<p>Record that an object was destroyed, for later use by destroyed?\n"],["after_destroy","Sequel::Plugins::AssociationDependencies::InstanceMethods","Sequel/Plugins/AssociationDependencies/InstanceMethods.html#method-i-after_destroy","()","<p>Run the delete and destroy association dependency actions for many_to_one associations.\n"],["after_destroy","Sequel::Plugins::InstanceFilters::InstanceMethods","Sequel/Plugins/InstanceFilters/InstanceMethods.html#method-i-after_destroy","()","<p>Clear the instance filters after successfully destroying the object.\n"],["after_destroy","Sequel::Plugins::InstanceHooks::InstanceMethods","Sequel/Plugins/InstanceHooks/InstanceMethods.html#method-i-after_destroy","()","<p>Run after destroy instance hooks.\n"],["after_destroy","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-after_destroy","()","<p>When destroying an instance, move all entries after the instance down one position, so that there aren&#39;t …\n"],["after_destroy","Sequel::Plugins::Touch::InstanceMethods","Sequel/Plugins/Touch/InstanceMethods.html#method-i-after_destroy","()","<p>Touch all of the model&#39;s touched_associations when destroying the object.\n"],["after_initialize","Sequel::Plugins::AfterInitialize::InstanceMethods","Sequel/Plugins/AfterInitialize/InstanceMethods.html#method-i-after_initialize","()","<p>An empty after_initialize hook, so that plugins that use this can always call super to get the default …\n"],["after_save","Sequel::Plugins::AccessedColumns::InstanceMethods","Sequel/Plugins/AccessedColumns/InstanceMethods.html#method-i-after_save","()","<p>Clear the accessed columns when saving.\n"],["after_save","Sequel::Plugins::AssociationPks::InstanceMethods","Sequel/Plugins/AssociationPks/InstanceMethods.html#method-i-after_save","()","<p>After creating an object, if there are any saved association pks, call the related association pks setters. …\n"],["after_save","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-after_save","()","<p>Reset the initial values after saving.\n"],["after_save","Sequel::Plugins::InstanceHooks::InstanceMethods","Sequel/Plugins/InstanceHooks/InstanceMethods.html#method-i-after_save","()","<p>Run after save instance hooks.\n"],["after_save","Sequel::Plugins::SerializationModificationDetection::InstanceMethods","Sequel/Plugins/SerializationModificationDetection/InstanceMethods.html#method-i-after_save","()","<p>Clear the cache of original deserialized values after saving so that it doesn&#39;t show the column is …\n"],["after_update","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-after_update","()","<p>Save the current changes so they are available after updating.  This happens before after_save resets …\n"],["after_update","Sequel::Plugins::InstanceFilters::InstanceMethods","Sequel/Plugins/InstanceFilters/InstanceMethods.html#method-i-after_update","()","<p>Clear the instance filters after successfully updating the object.\n"],["after_update","Sequel::Plugins::ModificationDetection::InstanceMethods","Sequel/Plugins/ModificationDetection/InstanceMethods.html#method-i-after_update","()","<p>Recalculate the column value hashes after updating.\n"],["after_update","Sequel::Plugins::Touch::InstanceMethods","Sequel/Plugins/Touch/InstanceMethods.html#method-i-after_update","()","<p>Touch all of the model&#39;s touched_associations when updating the object.\n"],["after_update","Sequel::Plugins::UpdatePrimaryKey::InstanceMethods","Sequel/Plugins/UpdatePrimaryKey/InstanceMethods.html#method-i-after_update","()","<p>Clear the cached primary key.\n"],["after_update","Sequel::Plugins::UpdateRefresh::InstanceMethods","Sequel/Plugins/UpdateRefresh/InstanceMethods.html#method-i-after_update","()","<p>If the dataset does not support UPDATE RETURNING, then refresh after an update.\n"],["after_validation","Sequel::Plugins::InstanceHooks::InstanceMethods","Sequel/Plugins/InstanceHooks/InstanceMethods.html#method-i-after_validation","()","<p>Run after validation instance hooks.\n"],["akeys","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-akeys","()",""],["all","Sequel::Plugins::EagerEach::DatasetMethods","Sequel/Plugins/EagerEach/DatasetMethods.html#method-i-all","(&block)","<p>If eager loading, clone the dataset and set a flag to let #each know not to call #all, to avoid the infinite …\n"],["all","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-all","(&block)","<p>An array of all of the model&#39;s instances, without issuing a database query. If a block is given, …\n"],["all","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-all","()","<p>Call the ALL function:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">all</span> <span class=\"ruby-comment\"># ALL(array)</span>\n</pre>\n<p>Usually used like:\n"],["allow_lazy_load","Sequel::Plugins::ForbidLazyLoad::InstanceMethods","Sequel/Plugins/ForbidLazyLoad/InstanceMethods.html#method-i-allow_lazy_load","()","<p>Set this model instance to allow lazy loading of associations.\n"],["allow_lazy_load_for_static_cache_associations","Sequel::Plugins::ForbidLazyLoad::ClassMethods","Sequel/Plugins/ForbidLazyLoad/ClassMethods.html#method-i-allow_lazy_load_for_static_cache_associations","()","<p>If the static_cache plugin is used by the associated class for an association, allow lazy loading that …\n"],["allow_manual_timestamp_update?","Sequel::Plugins::Timestamps::ClassMethods","Sequel/Plugins/Timestamps/ClassMethods.html#method-i-allow_manual_timestamp_update-3F","()","<p>Whether to allow manual setting of the update timestamp when creating\n"],["alter_table_generator","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-i-alter_table_generator","(&block)","<p>Modify the default alter_table generator to include the constraint validation methods.\n"],["always_eager_load_concurrently?","Sequel::Plugins::ConcurrentEagerLoading::ClassMethods","Sequel/Plugins/ConcurrentEagerLoading/ClassMethods.html#method-i-always_eager_load_concurrently-3F","()","<p>Whether datasets for this class should eager load concurrently by default.\n"],["ancestors","Sequel::Plugins::Tree::InstanceMethods","Sequel/Plugins/Tree/InstanceMethods.html#method-i-ancestors","()","<p>Returns list of ancestors, starting from parent until root.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">subchild1</span>.<span class=\"ruby-identifier\">ancestors</span> <span class=\"ruby-comment\"># =&gt; [child1, root]</span>\n</pre>\n"],["and","Sequel::Sequel4DatasetMethods","Sequel/Sequel4DatasetMethods.html#method-i-and","(*cond, &block)","<p>Alias for where.\n"],["any","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-any","()","<p>Call the ANY function:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">any</span> <span class=\"ruby-comment\"># ANY(array)</span>\n</pre>\n<p>Usually used like:\n"],["any?","Sequel::AnyNotEmpty","Sequel/AnyNotEmpty.html#method-i-any-3F","()","<p>If a block is not given, return whether the dataset is not empty.\n"],["apply","Sequel::Migration","Sequel/Migration.html#method-c-apply","(db, direction)","<p>Applies the migration to the supplied database in the specified direction.\n"],["apply","Sequel::Migrator","Sequel/Migrator.html#method-c-apply","(db, directory, target = nil, current = nil)","<p>Wrapper for <code>run</code>, maintaining backwards API compatibility\n"],["apply","Sequel::Plugins::AssociationDependencies","Sequel/Plugins/AssociationDependencies.html#method-c-apply","(model, hash=OPTS)","<p>Initialize the association_dependencies hash for this model.\n"],["apply","Sequel::Plugins::AutoValidations","Sequel/Plugins/AutoValidations.html#method-c-apply","(model, opts=OPTS)",""],["apply","Sequel::Plugins::AutoValidationsConstraintValidationsPresenceMessage","Sequel/Plugins/AutoValidationsConstraintValidationsPresenceMessage.html#method-c-apply","(model)",""],["apply","Sequel::Plugins::ClassTableInheritance","Sequel/Plugins/ClassTableInheritance.html#method-c-apply","(model, opts = OPTS)","<p>The class_table_inheritance plugin requires the single_table_inheritance plugin and the lazy_attributes …\n"],["apply","Sequel::Plugins::ColumnConflicts","Sequel/Plugins/ColumnConflicts.html#method-c-apply","(model)",""],["apply","Sequel::Plugins::ColumnEncryption","Sequel/Plugins/ColumnEncryption.html#method-c-apply","(model, opts=OPTS)",""],["apply","Sequel::Plugins::Composition","Sequel/Plugins/Composition.html#method-c-apply","(model)","<p>Define the necessary class instance variables.\n"],["apply","Sequel::Plugins::ConstraintValidations","Sequel/Plugins/ConstraintValidations.html#method-c-apply","(model, opts=OPTS)","<p>Automatically load the validation_helpers plugin to run the actual validations.\n"],["apply","Sequel::Plugins::DelayAddAssociation","Sequel/Plugins/DelayAddAssociation.html#method-c-apply","(mod)","<p>Depend on the validate_associated plugin.\n"],["apply","Sequel::Plugins::Finder","Sequel/Plugins/Finder.html#method-c-apply","(model)",""],["apply","Sequel::Plugins::HookClassMethods","Sequel/Plugins/HookClassMethods.html#method-c-apply","(model)","<p>Set up the hooks instance variable in the model.\n"],["apply","Sequel::Plugins::InputTransformer","Sequel/Plugins/InputTransformer.html#method-c-apply","(model, *)",""],["apply","Sequel::Plugins::InvertedSubsets","Sequel/Plugins/InvertedSubsets.html#method-c-apply","(model, &block)",""],["apply","Sequel::Plugins::LazyAttributes","Sequel/Plugins/LazyAttributes.html#method-c-apply","(model, *attrs)","<p>Lazy attributes requires the tactical_eager_loading plugin\n"],["apply","Sequel::Plugins::MssqlOptimisticLocking","Sequel/Plugins/MssqlOptimisticLocking.html#method-c-apply","(model, opts=OPTS)","<p>Load the instance_filters plugin into the model.\n"],["apply","Sequel::Plugins::NestedAttributes","Sequel/Plugins/NestedAttributes.html#method-c-apply","(model)","<p>Depend on the validate_associated plugin.\n"],["apply","Sequel::Plugins::OptimisticLocking","Sequel/Plugins/OptimisticLocking.html#method-c-apply","(model, opts=OPTS)","<p>Load the instance_filters plugin into the model.\n"],["apply","Sequel::Plugins::PgArrayAssociations","Sequel/Plugins/PgArrayAssociations.html#method-c-apply","(model)","<p>Add the pg_array extension to the database\n"],["apply","Sequel::Plugins::PreparedStatements","Sequel/Plugins/PreparedStatements.html#method-c-apply","(model)","<p>Setup the datastructure used to hold the prepared statements in the model.\n"],["apply","Sequel::Plugins::PreparedStatementsSafe","Sequel/Plugins/PreparedStatementsSafe.html#method-c-apply","(model)","<p>Depend on the prepared_statements plugin\n"],["apply","Sequel::Plugins::RcteTree","Sequel/Plugins/RcteTree.html#method-c-apply","(model, opts=OPTS)","<p>Create the appropriate parent, children, ancestors, and descendants associations for the model.\n"],["apply","Sequel::Plugins::Serialization","Sequel/Plugins/Serialization.html#method-c-apply","(model, *args)","<p>Set up the column readers to do deserialization and the column writers to save the value in deserialized_values. …\n"],["apply","Sequel::Plugins::SerializationModificationDetection","Sequel/Plugins/SerializationModificationDetection.html#method-c-apply","(model)","<p>Load the serialization plugin automatically.\n"],["apply","Sequel::Plugins::StringStripper","Sequel/Plugins/StringStripper.html#method-c-apply","(model)",""],["apply","Sequel::Plugins::Subclasses","Sequel/Plugins/Subclasses.html#method-c-apply","(model, &block)","<p>Initialize the subclasses instance variable for the model.\n"],["apply","Sequel::Plugins::SubsetConditions","Sequel/Plugins/SubsetConditions.html#method-c-apply","(model, &block)",""],["apply","Sequel::Plugins::Touch","Sequel/Plugins/Touch.html#method-c-apply","(model, opts=OPTS)",""],["apply","Sequel::Plugins::Tree","Sequel/Plugins/Tree.html#method-c-apply","(model, opts=OPTS)","<p>Create parent and children associations.  Any options specified are passed to both associations.  You …\n"],["apply","Sequel::Plugins::UnusedAssociations","Sequel/Plugins/UnusedAssociations.html#method-c-apply","(mod, opts=OPTS)","<p>Load the subclasses plugin, as the unused associations plugin is designed to handle all subclasses of …\n"],["apply","Sequel::Plugins::ValidateAssociated","Sequel/Plugins/ValidateAssociated.html#method-c-apply","(mod)","<p>Depend on the instance_hooks plugin.\n"],["apply","Sequel::Plugins::ValidationClassMethods","Sequel/Plugins/ValidationClassMethods.html#method-c-apply","(model)","<p>Setup the validations hash for the given model.\n"],["apply","Sequel::SimpleMigration","Sequel/SimpleMigration.html#method-i-apply","(db, direction)","<p>Apply the appropriate block on the <code>Database</code> instance using instance_exec.\n"],["array_elements","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-array_elements","()","<p>Returns a set of json values for the elements in the json array.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">array_elements</span> <span class=\"ruby-comment\"># json_array_elements(json)</span>\n</pre>\n"],["array_elements_text","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-array_elements_text","()","<p>Returns a set of text values for the elements in the json array.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">array_elements_text</span> <span class=\"ruby-comment\"># json_array_elements_text(json)</span>\n</pre>\n"],["array_from_csv","Sequel::Plugins::CsvSerializer::ClassMethods","Sequel/Plugins/CsvSerializer/ClassMethods.html#method-i-array_from_csv","(csv, opts = OPTS)","<p>Attempt to parse an array of instances from the given CSV string\n"],["array_from_json","Sequel::Plugins::JsonSerializer::ClassMethods","Sequel/Plugins/JsonSerializer/ClassMethods.html#method-i-array_from_json","(json, opts=OPTS)","<p>Attempt to parse an array of instances from the given JSON string, with options passed to InstanceMethods#from_json_node …\n"],["array_from_xml","Sequel::Plugins::XmlSerializer::ClassMethods","Sequel/Plugins/XmlSerializer/ClassMethods.html#method-i-array_from_xml","(xml, opts=OPTS)","<p>Return an array of instances of this class based on the provided XML.\n"],["array_length","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-array_length","()","<p>Get the length of the outermost json array.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">array_length</span> <span class=\"ruby-comment\"># json_array_length(json)</span>\n</pre>\n"],["array_length","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-array_length","(*args)","<p>Returns an expression for the length of the JSON array, or the JSON array at the given path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">array_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["array_type","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-array_type","()",""],["array_type","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-array_type","()",""],["as","Sequel::SymbolAs","Sequel/SymbolAs.html#method-i-as","(aliaz, columns=nil)",""],["as_hash","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-as_hash","(key_column = nil, value_column = nil, opts = OPTS)","<p>Use the cache instead of a query to get the results.\n"],["associate","Sequel::Plugins::AutoRestrictEagerGraph::ClassMethods","Sequel/Plugins/AutoRestrictEagerGraph/ClassMethods.html#method-i-associate","(type, name, opts = OPTS, &block)","<p>When defining an association, if a block is given for the association, but a :graph_* option is not used, …\n"],["associate","Sequel::Plugins::DatasetAssociations::ClassMethods","Sequel/Plugins/DatasetAssociations/ClassMethods.html#method-i-associate","(type, name, *)","<p>Set up a dataset method for each association to return an associated dataset\n"],["associate","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-associate","(type, assoc_name, opts=OPTS)","<p>If modifying associations, and this association is marked as not used, and the association does not include …\n"],["associated","Sequel::Plugins::DatasetAssociations::DatasetMethods","Sequel/Plugins/DatasetAssociations/DatasetMethods.html#method-i-associated","(name)","<p>For the association given by <code>name</code>, return a dataset of associated objects such that it would return the …\n"],["associated_object_keys","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-associated_object_keys","()","<p>The array column in the associated model containing foreign keys to the current model.\n"],["associated_object_keys","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-associated_object_keys","()","<p>An array containing the primary key for the associated model.\n"],["association_reflection","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-association_reflection","(association)","<p>Record access to association reflections to determine which associations are not used.\n"],["async","Sequel::Database::AsyncThreadPool::DatasetMethods","Sequel/Database/AsyncThreadPool/DatasetMethods.html#method-i-async","()","<p>Return a cloned dataset that will load results using the async thread pool.\n"],["at_position","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-at_position","(p)","<p>The model object at the given position in the list containing this instance.\n"],["auto_validate_presence?","Sequel::Plugins::AutoValidations::ClassMethods","Sequel/Plugins/AutoValidations/ClassMethods.html#method-i-auto_validate_presence-3F","()","<p>Whether to use a presence validation for not null columns\n"],["auto_validate_types?","Sequel::Plugins::AutoValidations::ClassMethods","Sequel/Plugins/AutoValidations/ClassMethods.html#method-i-auto_validate_types-3F","()","<p>Whether to automatically validate schema types for all columns\n"],["avals","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-avals","()",""],["before_create","Sequel::Plugins::PreparedStatementsSafe::InstanceMethods","Sequel/Plugins/PreparedStatementsSafe/InstanceMethods.html#method-i-before_create","()","<p>Merge the current values into the default values to reduce the number of free columns.\n"],["before_destroy","Sequel::Plugins::AssociationDependencies::InstanceMethods","Sequel/Plugins/AssociationDependencies/InstanceMethods.html#method-i-before_destroy","()","<p>Run the delete, destroy, and nullify association dependency actions for *_to_many associations.\n"],["before_destroy","Sequel::Plugins::InstanceHooks::InstanceMethods","Sequel/Plugins/InstanceHooks/InstanceMethods.html#method-i-before_destroy","()","<p>Run before_destroy instance hooks.\n"],["before_destroy","Sequel::Plugins::MssqlOptimisticLocking::InstanceMethods","Sequel/Plugins/MssqlOptimisticLocking/InstanceMethods.html#method-i-before_destroy","()","<p>Add the lock column instance filter to the object before destroying it.\n"],["before_destroy","Sequel::Plugins::OptimisticLocking::InstanceMethods","Sequel/Plugins/OptimisticLocking/InstanceMethods.html#method-i-before_destroy","()","<p>Add the lock column instance filter to the object before destroying it.\n"],["before_destroy","Sequel::Plugins::StaticCache::InstanceMethods","Sequel/Plugins/StaticCache/InstanceMethods.html#method-i-before_destroy","()","<p>Disallowing destroying the object unless the frozen: false option was used.\n"],["before_save","Sequel::Plugins::InstanceHooks::InstanceMethods","Sequel/Plugins/InstanceHooks/InstanceMethods.html#method-i-before_save","()","<p>Run before_save instance hooks.\n"],["before_save","Sequel::Plugins::StaticCache::InstanceMethods","Sequel/Plugins/StaticCache/InstanceMethods.html#method-i-before_save","()","<p>Disallowing saving the object unless the frozen: false option was used.\n"],["before_save","Sequel::Plugins::Tree::SingleRoot::InstanceMethods","Sequel/Plugins/Tree/SingleRoot/InstanceMethods.html#method-i-before_save","()","<p>Hook that prevents a second root from being created.\n"],["before_update","Sequel::Plugins::Caching::InstanceMethods","Sequel/Plugins/Caching/InstanceMethods.html#method-i-before_update","()","<p>Remove the object from the cache when updating\n"],["before_update","Sequel::Plugins::MssqlOptimisticLocking::InstanceMethods","Sequel/Plugins/MssqlOptimisticLocking/InstanceMethods.html#method-i-before_update","()","<p>Add the lock column instance filter to the object before updating it.\n"],["before_update","Sequel::Plugins::OptimisticLocking::InstanceMethods","Sequel/Plugins/OptimisticLocking/InstanceMethods.html#method-i-before_update","()","<p>Add the lock column instance filter to the object before updating it.\n"],["before_update","Sequel::Plugins::Timestamps::InstanceMethods","Sequel/Plugins/Timestamps/InstanceMethods.html#method-i-before_update","()","<p>Set the update timestamp when updating\n"],["before_validation","Sequel::Plugins::ClassTableInheritance::InstanceMethods","Sequel/Plugins/ClassTableInheritance/InstanceMethods.html#method-i-before_validation","()","<p>Set the sti_key column based on the sti_key_map.\n"],["before_validation","Sequel::Plugins::Composition::InstanceMethods","Sequel/Plugins/Composition/InstanceMethods.html#method-i-before_validation","()","<p>For each composition, set the columns in the model class based on the composition object.\n"],["before_validation","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-before_validation","()","<p>Set the value of the position_field to the maximum value plus 1 unless the position field already has …\n"],["before_validation","Sequel::Plugins::Serialization::InstanceMethods","Sequel/Plugins/Serialization/InstanceMethods.html#method-i-before_validation","()","<p>Serialize deserialized values before saving\n"],["before_validation","Sequel::Plugins::SingleTableInheritance::InstanceMethods","Sequel/Plugins/SingleTableInheritance/InstanceMethods.html#method-i-before_validation","()","<p>Set the sti_key column based on the sti_key_map.\n"],["before_validation","Sequel::Plugins::Timestamps::InstanceMethods","Sequel/Plugins/Timestamps/InstanceMethods.html#method-i-before_validation","()","<p>Set the create timestamp when creating\n"],["before_validation","Sequel::Plugins::Uuid::InstanceMethods","Sequel/Plugins/Uuid/InstanceMethods.html#method-i-before_validation","()","<p>Set the uuid when creating\n"],["blank?","FalseClass","FalseClass.html#method-i-blank-3F","()","<p>false is always blank\n"],["blank?","NilClass","NilClass.html#method-i-blank-3F","()","<p>nil is always blank\n"],["blank?","Numeric","Numeric.html#method-i-blank-3F","()","<p>Numerics are never blank (not even 0)\n"],["blank?","Object","Object.html#method-i-blank-3F","()","<p>Objects are blank if they respond true to empty?\n"],["blank?","String","String.html#method-i-blank-3F","()","<p>Strings are blank if they are empty or include only whitespace\n"],["blank?","TrueClass","TrueClass.html#method-i-blank-3F","()","<p>true is never blank\n"],["bound_variable_arg","Sequel::Plugins::PgRow::DatabaseMethods","Sequel/Plugins/PgRow/DatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle Sequel::Model instances in bound variables.\n"],["bound_variable_arg","Sequel::Postgres::HStore::DatabaseMethods","Sequel/Postgres/HStore/DatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle hstores in bound variables\n"],["bound_variable_arg","Sequel::Postgres::InetDatabaseMethods","Sequel/Postgres/InetDatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Convert an IPAddr arg to a string.  Probably not necessary, but done for safety.\n"],["bound_variable_arg","Sequel::Postgres::IntervalDatabaseMethods","Sequel/Postgres/IntervalDatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle ActiveSupport::Duration values in bound variables.\n"],["bound_variable_arg","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle json and jsonb types in bound variables\n"],["bound_variable_arg","Sequel::Postgres::PGArray::DatabaseMethods","Sequel/Postgres/PGArray/DatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle arrays in bound variables\n"],["bound_variable_arg","Sequel::Postgres::PGMultiRange::DatabaseMethods","Sequel/Postgres/PGMultiRange/DatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle PGMultiRange values in bound variables\n"],["bound_variable_arg","Sequel::Postgres::PGRange::DatabaseMethods","Sequel/Postgres/PGRange/DatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle Range and PGRange values in bound variables\n"],["bound_variable_arg","Sequel::Postgres::PGRow::DatabaseMethods","Sequel/Postgres/PGRow/DatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)","<p>Handle ArrayRow and HashRow values in bound variables.\n"],["cache_default_values?","Sequel::Plugins::DefaultsSetter::ClassMethods","Sequel/Plugins/DefaultsSetter/ClassMethods.html#method-i-cache_default_values-3F","()","<p>Whether default values should be cached in the values hash after being retrieved.\n"],["cache_delete_pk","Sequel::Plugins::Caching::ClassMethods","Sequel/Plugins/Caching/ClassMethods.html#method-i-cache_delete_pk","(pk)","<p>Delete the cached object with the given primary key.\n"],["cache_get_pk","Sequel::Plugins::Caching::ClassMethods","Sequel/Plugins/Caching/ClassMethods.html#method-i-cache_get_pk","(pk)","<p>Return the cached object with the given primary key, or nil if no such object is in the cache.\n"],["cache_get_pk","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-cache_get_pk","(pk)","<p>Return the frozen object with the given pk, or nil if no such object exists in the cache, without issuing …\n"],["cache_key","Sequel::Plugins::Caching::ClassMethods","Sequel/Plugins/Caching/ClassMethods.html#method-i-cache_key","(pk)","<p>Return a key string for the given primary key.\n"],["cache_key","Sequel::Plugins::Caching::InstanceMethods","Sequel/Plugins/Caching/InstanceMethods.html#method-i-cache_key","()","<p>Return a key unique to the underlying record for caching, based on the primary key value(s) for the object. …\n"],["cache_key_prefix","Sequel::Plugins::Caching::ClassMethods","Sequel/Plugins/Caching/ClassMethods.html#method-i-cache_key_prefix","()","<p>Returns the prefix used to namespace this class in the cache.\n"],["calculate_values_hashes","Sequel::Plugins::ModificationDetection::InstanceMethods","Sequel/Plugins/ModificationDetection/InstanceMethods.html#method-i-calculate_values_hashes","()","<p>Calculate the column hash values if they haven&#39;t been already calculated.\n"],["call","Sequel::Plugins::AfterInitialize::ClassMethods","Sequel/Plugins/AfterInitialize/ClassMethods.html#method-i-call","(_)","<p>Call after_initialize for model objects loaded from the database.\n"],["call","Sequel::Plugins::ForceEncoding::ClassMethods","Sequel/Plugins/ForceEncoding/ClassMethods.html#method-i-call","(values)",""],["call","Sequel::Plugins::ModificationDetection::ClassMethods","Sequel/Plugins/ModificationDetection/ClassMethods.html#method-i-call","(_)","<p>Calculate the hashes for all of the column values, so that they can be compared later to determine if …\n"],["call","Sequel::Plugins::SplitValues::ClassMethods","Sequel/Plugins/SplitValues/ClassMethods.html#method-i-call","(_)","<p>Split the noncolumn values when creating a new object retrieved from the database.\n"],["call","Sequel::Plugins::TypecastOnLoad::ClassMethods","Sequel/Plugins/TypecastOnLoad/ClassMethods.html#method-i-call","(values)","<p>Typecast values using #load_typecast when the values are retrieved from the database.\n"],["call","Sequel::Postgres::IntervalDatabaseMethods::Parser","Sequel/Postgres/IntervalDatabaseMethods/Parser.html#method-i-call","(string)","<p>Parse the interval input string into an ActiveSupport::Duration instance.\n"],["call","Sequel::Postgres::PGArray::Creator","Sequel/Postgres/PGArray/Creator.html#method-i-call","(string)","<p>:nocov:  Use sequel_pg&#39;s C-based parser if it has already been defined.\n"],["call","Sequel::Postgres::PGMultiRange::Creator","Sequel/Postgres/PGMultiRange/Creator.html#method-i-call","(string)","<p>Parse the string using Parser with the appropriate converter, and return a PGMultiRange with the appropriate …\n"],["call","Sequel::Postgres::PGRange::Parser","Sequel/Postgres/PGRange/Parser.html#method-i-call","(string)","<p>Parse the range type input string into a PGRange value.\n"],["call","Sequel::Postgres::PGRow::Parser","Sequel/Postgres/PGRow/Parser.html#method-i-call","(s)","<p>Convert the PostgreSQL composite type input format into an appropriate ruby object.\n"],["camelcase","String","String.html#method-i-camelcase","(first_letter_in_uppercase = :upper)",""],["camelize","String","String.html#method-i-camelize","(first_letter_in_uppercase = :upper)","<p>By default, camelize converts the string to UpperCamelCase. If the argument to camelize is set to :lower …\n"],["can_have_associated_objects?","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-can_have_associated_objects-3F","(obj)","<p>many_to_pg_array associations can have associated objects as long as they have a primary key.\n"],["can_have_associated_objects?","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-can_have_associated_objects-3F","(obj)","<p>pg_array_to_many associations can only have associated objects if the array field is not nil or empty. …\n"],["cardinality","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-cardinality","()","<p>Call the cardinality method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">cardinality</span> <span class=\"ruby-comment\"># cardinality(array)</span>\n</pre>\n"],["case","Array","Array.html#method-i-case","(*args)","<p>Return a <code>Sequel::SQL::CaseExpression</code> with this array as the conditions and the given default value and …\n"],["case","Hash","Hash.html#method-i-case","(*args)","<p>Return a <code>Sequel::SQL::CaseExpression</code> with this hash as the conditions and the given default value.\n\n<pre>{{a: ...</pre>\n"],["case","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-case","(*args)","<p>Return a <code>Sequel::SQL::CaseExpression</code> with this array as the conditions and the given default value and …\n"],["change","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-change","(&block)","<p>Creates a reversible migration.  This is the same as creating the same block with <code>up</code>, but it also calls …\n"],["changed_columns","Sequel::Plugins::ModificationDetection::InstanceMethods","Sequel/Plugins/ModificationDetection/InstanceMethods.html#method-i-changed_columns","()","<p>Detect which columns have been modified by comparing the cached hash value to the hash of the current …\n"],["changed_columns","Sequel::Plugins::SerializationModificationDetection::InstanceMethods","Sequel/Plugins/SerializationModificationDetection/InstanceMethods.html#method-i-changed_columns","()","<p>Detect which serialized columns have changed.\n"],["check_column_conflicts","Sequel::Plugins::ColumnConflicts::ClassMethods","Sequel/Plugins/ColumnConflicts/ClassMethods.html#method-i-check_column_conflicts","()","<p>Compare the column names for the model with the methods defined on Sequel::Model, and automatically setup …\n"],["check_columns!","Sequel::Postgres::PGRow::HashRow","Sequel/Postgres/PGRow/HashRow.html#method-i-check_columns-21","()","<p>Check that the HashRow has valid columns.  This should be used before all attempts to literalize the …\n"],["check_current","Sequel::Migrator","Sequel/Migrator.html#method-c-check_current","(*args)","<p>Raise a NotCurrentError unless the migrator is current, takes the same arguments as #run.\n"],["classify","String","String.html#method-i-classify","()","<p>Singularizes and camelizes the string.  Also strips out all characters preceding and including a period …\n"],["clear","String::Inflections","String/Inflections.html#method-c-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is :all). Give the scope as a symbol of the …\n"],["cloneable?","Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html#method-i-cloneable-3F","(ref)","<p>many_through_many and one_through_many associations can be clones\n"],["column_change","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-column_change","(column)","<p>An array with the initial value and the current value of the column, if the column has been changed. …\n"],["column_changed?","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-column_changed-3F","(column)","<p>Either true or false depending on whether the column has changed.  Note that this is not exactly the …\n"],["column_changes","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-column_changes","()","<p>A hash with column symbol keys and pairs of initial and current values for all changed columns.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">column_changes</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["column_previously_changed?","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-column_previously_changed-3F","(column, opts=OPTS)","<p>Whether the column was previously changed. Options:\n<p>:from  &mdash; If given, the previous initial value of the …\n"],["column_previously_was","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-column_previously_was","(column)","<p>The previous value of the column, which is the initial value of the column before the object was previously …\n"],["column_schema_to_ruby_type","Sequel::SchemaDumper","Sequel/SchemaDumper.html#method-i-column_schema_to_ruby_type","(schema)","<p>Convert the column schema information to a hash of column options, one of which must be :type.  The other …\n"],["columns","Sequel::ColumnsIntrospection","Sequel/ColumnsIntrospection.html#method-i-columns","()","<p>Attempt to guess the columns that will be returned if there are columns selected, in order to skip a …\n"],["columns","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-columns","()","<p>Create a new dataset from the dataset (which won&#39;t be nulled) to get the columns if they aren&#39;t …\n"],["columns","Sequel::Postgres::PGRow::HashRow","Sequel/Postgres/PGRow/HashRow.html#method-i-columns","()","<p>Return the instance&#39;s columns, or the class&#39;s columns if the instance has not overridden it. …\n"],["columns!","Sequel::Plugins::EagerEach::DatasetMethods","Sequel/Plugins/EagerEach/DatasetMethods.html#method-i-columns-21","()","<p>Don&#39;t call #all when attempting to load the columns.\n"],["comment","Sequel::SQLComments","Sequel/SQLComments.html#method-i-comment","(comment)","<p>Return a modified copy of the dataset that will use the given comment. To uncomment a commented dataset, …\n"],["complex_expression_sql_append","Sequel::Dataset::SplitArrayNil","Sequel/Dataset/SplitArrayNil.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>Over the IN/NOT IN handling with an array of values where one of the values in the array is nil, by removing …\n"],["composition","Sequel::Plugins::Composition::ClassMethods","Sequel/Plugins/Composition/ClassMethods.html#method-i-composition","(name, opts=OPTS)","<p>Define a composition for this model, with name being the name of the composition. You must provide either …\n"],["compositions","Sequel::Plugins::Composition::InstanceMethods","Sequel/Plugins/Composition/InstanceMethods.html#method-i-compositions","()","<p>Cache of composition objects for this class.\n"],["concat","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-concat","(other)",""],["concat","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-concat","(other)",""],["concat","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-concat","(other)","<p>jsonb expression for concatenation of the given jsonb into the current jsonb.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">concat</span>(<span class=\"ruby-value\">:h</span>) <span class=\"ruby-comment\"># (jsonb ...</span>\n</pre>\n"],["configure","Sequel::Plugins::AssociationDependencies","Sequel/Plugins/AssociationDependencies.html#method-c-configure","(model, hash=OPTS)","<p>Call add_association_dependencies with any dependencies given in the plugin call.\n"],["configure","Sequel::Plugins::AssociationProxies","Sequel/Plugins/AssociationProxies.html#method-c-configure","(model, &block)",""],["configure","Sequel::Plugins::AutoValidations","Sequel/Plugins/AutoValidations.html#method-c-configure","(model, opts=OPTS)","<p>Setup auto validations for the model if it has a dataset.\n"],["configure","Sequel::Plugins::AutoValidationsConstraintValidationsPresenceMessage","Sequel/Plugins/AutoValidationsConstraintValidationsPresenceMessage.html#method-c-configure","(model, opts=OPTS)",""],["configure","Sequel::Plugins::BooleanReaders","Sequel/Plugins/BooleanReaders.html#method-c-configure","(model, &block)","<p>Add the boolean_attribute? class method to the model, and create attribute? boolean reader methods for …\n"],["configure","Sequel::Plugins::BooleanSubsets","Sequel/Plugins/BooleanSubsets.html#method-c-configure","(model, &block)","<p>Create boolean subset methods for each boolean column.\n"],["configure","Sequel::Plugins::Caching","Sequel/Plugins/Caching.html#method-c-configure","(model, store, opts=OPTS)","<p>Set the cache_store and cache_ttl attributes for the given model. If the :ttl option is not given, 3600 …\n"],["configure","Sequel::Plugins::ClassTableInheritance","Sequel/Plugins/ClassTableInheritance.html#method-c-configure","(model, opts = OPTS)","<p>Initialize the plugin using the following options:\n<p>:alias  &mdash; Change the alias used for the subquery in model …\n"],["configure","Sequel::Plugins::ColumnConflicts","Sequel/Plugins/ColumnConflicts.html#method-c-configure","(model)","<p>Check for column conflicts on the current model if the model has a dataset.\n"],["configure","Sequel::Plugins::ColumnEncryption","Sequel/Plugins/ColumnEncryption.html#method-c-configure","(model)",""],["configure","Sequel::Plugins::ColumnSelect","Sequel/Plugins/ColumnSelect.html#method-c-configure","(model)","<p>Modify the current model&#39;s dataset selection, if the model has a dataset.\n"],["configure","Sequel::Plugins::ConcurrentEagerLoading","Sequel/Plugins/ConcurrentEagerLoading.html#method-c-configure","(mod, opts=OPTS)",""],["configure","Sequel::Plugins::ConstraintValidations","Sequel/Plugins/ConstraintValidations.html#method-c-configure","(model, opts=OPTS)","<p>Parse the constraint validations metadata from the database. Options:\n<p>:constraint_validations_table  &mdash; "],["configure","Sequel::Plugins::CsvSerializer","Sequel/Plugins/CsvSerializer.html#method-c-configure","(model, opts = OPTS)","<p>Set up the column readers to do deserialization and the column writers to save the value in deserialized_values …\n"],["configure","Sequel::Plugins::DefaultsSetter","Sequel/Plugins/DefaultsSetter.html#method-c-configure","(model, opts=OPTS)","<p>Set the default values based on the model schema. Options:\n<p>:cache  &mdash; Cache default values returned in the …\n\n"],["configure","Sequel::Plugins::ForceEncoding","Sequel/Plugins/ForceEncoding.html#method-c-configure","(model, encoding=nil)","<p>Set the forced_encoding based on the value given in the plugin call. Note that if a the plugin has been …\n"],["configure","Sequel::Plugins::InputTransformer","Sequel/Plugins/InputTransformer.html#method-c-configure","(model, transformer_name=nil, &block)","<p>If an input transformer is given in the plugin call, add it as a transformer\n"],["configure","Sequel::Plugins::InsertConflict","Sequel/Plugins/InsertConflict.html#method-c-configure","(model)",""],["configure","Sequel::Plugins::InsertReturningSelect","Sequel/Plugins/InsertReturningSelect.html#method-c-configure","(model)","<p>Modify the current model&#39;s dataset selection, if the model has a dataset.\n"],["configure","Sequel::Plugins::InstanceFilters","Sequel/Plugins/InstanceFilters.html#method-c-configure","(model)","<p>Set the require_modification flag to true for the model.\n"],["configure","Sequel::Plugins::InstanceSpecificDefault","Sequel/Plugins/InstanceSpecificDefault.html#method-c-configure","(model, default)","<p>Set how to handle associations that could be instance specific but did not specify an :instance_specific …\n"],["configure","Sequel::Plugins::JsonSerializer","Sequel/Plugins/JsonSerializer.html#method-c-configure","(model, opts=OPTS)","<p>Set up the column readers to do deserialization and the column writers to save the value in deserialized_values. …\n"],["configure","Sequel::Plugins::LazyAttributes","Sequel/Plugins/LazyAttributes.html#method-c-configure","(model, *attrs)","<p>Set the attributes given as lazy attributes\n"],["configure","Sequel::Plugins::List","Sequel/Plugins/List.html#method-c-configure","(model, opts = OPTS)","<p>Set the <code>position_field</code>, <code>scope_proc</code> and <code>top_of_list</code> attributes for the model, using the <code>:field</code>, <code>:scope</code> …\n"],["configure","Sequel::Plugins::MssqlOptimisticLocking","Sequel/Plugins/MssqlOptimisticLocking.html#method-c-configure","(model, opts=OPTS)","<p>Set the lock_column to the :lock_column option (default: :timestamp)\n"],["configure","Sequel::Plugins::OptimisticLocking","Sequel/Plugins/OptimisticLocking.html#method-c-configure","(model, opts=OPTS)","<p>Set the lock_column to the :lock_column option, or :lock_version if that option is not given.\n"],["configure","Sequel::Plugins::PgAutoConstraintValidations","Sequel/Plugins/PgAutoConstraintValidations.html#method-c-configure","(model, opts=OPTS)","<p>Setup the constraint violation metadata.  Options:\n<p>:cache_file  &mdash; File storing cached metadata, to avoid …\n"],["configure","Sequel::Plugins::PgRow","Sequel/Plugins/PgRow.html#method-c-configure","(model)","<p>When loading the extension, make sure the database has the pg_row extension loaded, load the custom database …\n"],["configure","Sequel::Plugins::PreparedStatementsSafe","Sequel/Plugins/PreparedStatementsSafe.html#method-c-configure","(model)","<p>Set the column defaults to use when creating on the model.\n"],["configure","Sequel::Plugins::Serialization","Sequel/Plugins/Serialization.html#method-c-configure","(model, format=nil, *columns)","<p>Automatically call serialize_attributes with the format and columns unless no columns were provided. …\n"],["configure","Sequel::Plugins::SingleTableInheritance","Sequel/Plugins/SingleTableInheritance.html#method-c-configure","(model, key, opts=OPTS)","<p>Setup the necessary STI variables, see the module RDoc for SingleTableInheritance\n"],["configure","Sequel::Plugins::SkipSavingColumns","Sequel/Plugins/SkipSavingColumns.html#method-c-configure","(mod)","<p>Setup skipping of the generated columns for a model with an existing dataset.\n"],["configure","Sequel::Plugins::SqlComments","Sequel/Plugins/SqlComments.html#method-c-configure","(model)",""],["configure","Sequel::Plugins::StaticCache","Sequel/Plugins/StaticCache.html#method-c-configure","(model, opts=OPTS)","<p>Populate the static caches when loading the plugin. Options:\n<p>:frozen  &mdash; Whether retrieved model objects …\n\n"],["configure","Sequel::Plugins::StaticCacheCache","Sequel/Plugins/StaticCacheCache.html#method-c-configure","(model, file)",""],["configure","Sequel::Plugins::StringStripper","Sequel/Plugins/StringStripper.html#method-c-configure","(model)",""],["configure","Sequel::Plugins::TableSelect","Sequel/Plugins/TableSelect.html#method-c-configure","(model)","<p>Modify the current model&#39;s dataset selection, if the model has a dataset.\n"],["configure","Sequel::Plugins::Timestamps","Sequel/Plugins/Timestamps.html#method-c-configure","(model, opts=OPTS)","<p>Configure the plugin by setting the available options.  Note that if this method is run more than once, …\n"],["configure","Sequel::Plugins::Touch","Sequel/Plugins/Touch.html#method-c-configure","(model, opts=OPTS)","<p>Set the touch_column and touched_associations variables for the model. Options:\n<p>:associations  &mdash; The associations …\n"],["configure","Sequel::Plugins::TypecastOnLoad","Sequel/Plugins/TypecastOnLoad.html#method-c-configure","(model, *columns)","<p>Call add_typecast_on_load_columns on the passed column arguments.\n"],["configure","Sequel::Plugins::UnusedAssociations","Sequel/Plugins/UnusedAssociations.html#method-c-configure","(mod, opts=OPTS)","<p>Plugin options:\n<p>:coverage_file  &mdash; The file to store the coverage information, when combining coverage information …\n"],["configure","Sequel::Plugins::UpdateRefresh","Sequel/Plugins/UpdateRefresh.html#method-c-configure","(model, opts=OPTS)","<p>Set the specific columns to refresh, if the :columns option is provided.\n"],["configure","Sequel::Plugins::Uuid","Sequel/Plugins/Uuid.html#method-c-configure","(model, opts=OPTS)","<p>Configure the plugin by setting the available options.  Note that if this method is run more than once, …\n"],["connect","Sequel::ServerLogging","Sequel/ServerLogging.html#method-i-connect","(server)","<p>When setting up a new connection, associate the connection with the shard.\n"],["constant_sql_append","Sequel::ConstantSqlOverride::DatasetMethods","Sequel/ConstantSqlOverride/DatasetMethods.html#method-i-constant_sql_append","(sql, constant)","<p>Use overridden constant SQL\n"],["constantize","String","String.html#method-i-constantize","()","<p>Constantize tries to find a declared constant with the name specified in the string. It raises a NameError …\n"],["constraint","Sequel::ConstraintValidations::AlterTableGeneratorMethods","Sequel/ConstraintValidations/AlterTableGeneratorMethods.html#method-i-constraint","(*args)","<p>Alias of add_constraint for similarity to create_table generator.\n"],["contain_all","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-contain_all","(other)","<p>Check if the receiver contains all of the keys in the given array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">contain_all</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (hstore ...</span>\n</pre>\n"],["contain_all","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-contain_all","(other)","<p>Check if the receiver contains all of the keys in the given array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">contain_all</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (jsonb ?&amp; ...</span>\n</pre>\n"],["contain_any","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-contain_any","(other)","<p>Check if the receiver contains any of the keys in the given array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">contain_any</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (hstore ...</span>\n</pre>\n"],["contain_any","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-contain_any","(other)","<p>Check if the receiver contains any of the keys in the given array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">contain_any</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (jsonb ?| ...</span>\n</pre>\n"],["contained_by","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-contained_by","(other)","<p>Use the contained by (&lt;@) operator:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">contained_by</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (array &lt;@ a)</span>\n</pre>\n"],["contained_by","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-contained_by","(other)","<p>Check if the other hstore contains all entries in the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">contained_by</span>(<span class=\"ruby-value\">:h</span>) <span class=\"ruby-comment\"># (hstore &lt;@ ...</span>\n</pre>\n"],["contained_by","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-contained_by","(other)","<p>Check if the other jsonb contains all entries in the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">contained_by</span>(<span class=\"ruby-value\">:h</span>) <span class=\"ruby-comment\"># (jsonb &lt;@ h)</span>\n</pre>\n"],["contains","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-contains","(other)","<p>Use the contains (@&gt;) operator:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">contains</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (array @&gt; a)</span>\n</pre>\n"],["contains","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-contains","(other)","<p>Check if the receiver contains all entries in the other hstore:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">contains</span>(<span class=\"ruby-value\">:h</span>) <span class=\"ruby-comment\"># (hstore @&gt; h)</span>\n</pre>\n"],["contains","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-contains","(other)","<p>Check if the receiver contains all entries in the other jsonb:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">contains</span>(<span class=\"ruby-value\">:h</span>) <span class=\"ruby-comment\"># (jsonb @&gt; h)</span>\n</pre>\n"],["convert_infinite_timestamps=","Sequel::Postgres::ExtendedDateSupport","Sequel/Postgres/ExtendedDateSupport.html#method-i-convert_infinite_timestamps-3D","(v)","<p>Set whether to allow infinite timestamps/dates.  Make sure the conversion proc for date reflects that …\n"],["core_extensions?","Sequel","Sequel.html#method-c-core_extensions-3F","()","<p>This extension loads the core extensions.\n"],["count","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-count","(*a, &block)","<p>Get the number of records in the cache, without issuing a database query.\n"],["cover?","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-cover-3F","(value)","<p>Return whether the value is inside any of the ranges in the multirange.\n"],["cover?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-cover-3F","(value)","<p>Return whether the value is inside the range.\n"],["create","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-c-create","(&block)",""],["create_constraint_validations_table","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-i-create_constraint_validations_table","()","<p>Create the table storing the validation metadata for all of the constraints created by this extension. …\n"],["create_enum","Sequel::Postgres::EnumDatabaseMethods","Sequel/Postgres/EnumDatabaseMethods.html#method-i-create_enum","(enum, values)","<p>Run the SQL to create an enum type with the given name and values.\n"],["create_static_cache_update_function","Sequel::Postgres::StaticCacheUpdater","Sequel/Postgres/StaticCacheUpdater.html#method-i-create_static_cache_update_function","(opts=OPTS)","<p>Add the static cache update function to the PostgreSQL database. This must be added before any triggers …\n"],["create_static_cache_update_trigger","Sequel::Postgres::StaticCacheUpdater","Sequel/Postgres/StaticCacheUpdater.html#method-i-create_static_cache_update_trigger","(table, opts=OPTS)","<p>Add a trigger to the given table that calls the function which will notify about table changes.\n<p>Options: …\n"],["create_table_generator","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-i-create_table_generator","(&block)","<p>Modify the default create_table generator to include the constraint validation methods.\n"],["create_timestamp_overwrite?","Sequel::Plugins::Timestamps::ClassMethods","Sequel/Plugins/Timestamps/ClassMethods.html#method-i-create_timestamp_overwrite-3F","()","<p>Whether to overwrite the create timestamp if it already exists\n"],["create_using_server","Sequel::Plugins::Sharding::ClassMethods","Sequel/Plugins/Sharding/ClassMethods.html#method-i-create_using_server","(s, values=OPTS, &block)","<p>Create a new object on the given shard s.\n"],["cti_table_name","Sequel::Plugins::ClassTableInheritance::ClassMethods","Sequel/Plugins/ClassTableInheritance/ClassMethods.html#method-i-cti_table_name","()","<p>The name of the most recently joined table.\n"],["current","Sequel::FiberConcurrency","Sequel/FiberConcurrency.html#method-i-current","()","<p>Make the current concurrency primitive be Fiber.current.\n"],["current_datetime","Sequel::CurrentDateTimeTimestamp::DatasetMethods","Sequel/CurrentDateTimeTimestamp/DatasetMethods.html#method-i-current_datetime","()","<p>Return an instance of Sequel.datetime_class that will be literalized as CURRENT_TIMESTAMP.\n"],["current_page","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-current_page","()","<p>The current page of the dataset, starting at 1 and not 0.\n"],["current_page_record_count","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-current_page_record_count","()","<p>Returns the number of records in the current page\n"],["current_page_record_range","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-current_page_record_range","()","<p>Returns the record range for the current page\n"],["dasherize","String","String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;puni_puni&quot;</span>.<span class=\"ruby-identifier\">dasherize</span> <span class=\"ruby-comment\">#=&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dataset_need_primary_key?","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-dataset_need_primary_key-3F","()","<p>pg_array_to_many associations do not need a primary key.\n"],["date_add","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-date_add","(expr, interval, opts=OPTS)","<p>Return a DateAdd expression, adding an interval to the date/timestamp expr. Options:\n<p>:cast  &mdash; Cast to the …\n\n"],["date_add_sql_append","Sequel::SQL::DateAdd::DatasetMethods","Sequel/SQL/DateAdd/DatasetMethods.html#method-i-date_add_sql_append","(sql, da)","<p>Append the SQL fragment for the DateAdd expression to the SQL query.\n"],["date_parse_input_handler","Sequel::DateParseInputHandler","Sequel/DateParseInputHandler.html#method-i-date_parse_input_handler","(&block)",""],["date_sub","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-date_sub","(expr, interval, opts=OPTS)","<p>Return a DateAdd expression, adding the negative of the interval to the date/timestamp expr. Options: …\n"],["db_parse_json","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-db_parse_json","(s)","<p>Deprecated\n"],["db_parse_jsonb","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-db_parse_jsonb","(s)","<p>Deprecated\n"],["db_type","Sequel::Postgres::PGRow::ArrayRow","Sequel/Postgres/PGRow/ArrayRow.html#method-i-db_type","()","<p>Return the instance&#39;s database type, or the class&#39;s database type if the instance has not overridden …\n"],["db_type","Sequel::Postgres::PGRow::HashRow","Sequel/Postgres/PGRow/HashRow.html#method-i-db_type","()","<p>Return the instance&#39;s database type, or the class&#39;s columns if the instance has not overridden …\n"],["def_dataset_method","Sequel::Plugins::DefDatasetMethod::ClassMethods","Sequel/Plugins/DefDatasetMethod/ClassMethods.html#method-i-def_dataset_method","(*args, &block)","<p>If a block is given, define a method on the dataset (if the model currently has an dataset)  with the …\n"],["def_sql_commend_method","Sequel::Plugins::SqlComments","Sequel/Plugins/SqlComments.html#method-c-def_sql_commend_method","(mod, model, method_type, meth)","<p>Define a method <code>meth</code> on the given module <code>mod</code> that will use automatic SQL comments with the given model, …\n"],["default_associated_key_alias","Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html#method-i-default_associated_key_alias","()","<p>The default associated key alias(es) to use when eager loading associations via eager.\n"],["default_key","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-default_key","()","<p>Assume that the key in the associated table uses a version of the current model&#39;s name suffixed with …\n"],["default_key","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-default_key","()","<p>Use a default key name of *_ids, for similarity to other association types that use *_id for single keys. …\n"],["default_static_cache_update_name","Sequel::Postgres::StaticCacheUpdater","Sequel/Postgres/StaticCacheUpdater.html#method-i-default_static_cache_update_name","()","<p>The default name for the function, trigger, and notification channel for this extension.\n"],["define_async_args_or_block_method","Sequel::Database::AsyncThreadPool::DatasetMethods","Sequel/Database/AsyncThreadPool/DatasetMethods.html#method-c-define_async_args_or_block_method","(mod, method)","<p>Define an method in the given module that will run the given method using an async thread if the current …\n"],["define_async_block_method","Sequel::Database::AsyncThreadPool::DatasetMethods","Sequel/Database/AsyncThreadPool/DatasetMethods.html#method-c-define_async_block_method","(mod, method)","<p>Define an method in the given module that will run the given method using an async thread if the current …\n"],["define_async_method","Sequel::Database::AsyncThreadPool::DatasetMethods","Sequel/Database/AsyncThreadPool/DatasetMethods.html#method-c-define_async_method","(mod, method)","<p>Define an method in the given module that will run the given method using an async thread if the current …\n"],["define_composition_accessor","Sequel::Plugins::Composition::ClassMethods","Sequel/Plugins/Composition/ClassMethods.html#method-i-define_composition_accessor","(name, opts=OPTS)","<p>Define getter and setter methods for the composition object.\n"],["defined","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-defined","(key)","<p>Check if the receiver contains a non-NULL value for the given key:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">defined</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># defined(hstore, ...</span>\n</pre>\n"],["delete","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-delete","()","<p>Return 0 without sending a database query.\n"],["delete","Sequel::Plugins::Caching::InstanceMethods","Sequel/Plugins/Caching/InstanceMethods.html#method-i-delete","()","<p>Remove the object from the cache when deleting\n"],["delete","Sequel::Plugins::ClassTableInheritance::InstanceMethods","Sequel/Plugins/ClassTableInheritance/InstanceMethods.html#method-i-delete","()","<p>Delete the row from all backing tables, starting from the most recent table and going through all superclasses. …\n"],["delete","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-delete","(key)","<p>Delete the matching entries from the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">delete</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># delete(hstore, &#39;a&#39;)</span>\n</pre>\n"],["delete_path","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-delete_path","(other)","<p>Removes the given path from the receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">delete_path</span>(<span class=\"ruby-value\">:h</span>) <span class=\"ruby-comment\"># (jsonb #- h)</span>\n</pre>\n"],["delete_unused_associations_files","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-delete_unused_associations_files","()","<p>Delete the unused associations coverage file and unused associations data file, if either exist.\n"],["demodulize","String","String.html#method-i-demodulize","()","<p>Removes the module part from the expression in the string\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;ActiveRecord::CoreExtensions::String::Inflections&quot;</span>.<span class=\"ruby-identifier\">demodulize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["descendants","Sequel::Migration","Sequel/Migration.html#method-c-descendants","()","<p>Returns the list of Migration descendants.\n"],["descendants","Sequel::Plugins::Subclasses::ClassMethods","Sequel/Plugins/Subclasses/ClassMethods.html#method-i-descendants","()","<p>All descendent classes of this model.\n"],["descendants","Sequel::Plugins::Tree::InstanceMethods","Sequel/Plugins/Tree/InstanceMethods.html#method-i-descendants","()","<p>Returns list of descendants\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">node</span>.<span class=\"ruby-identifier\">descendants</span> <span class=\"ruby-comment\"># =&gt; [child1, child2, subchild1_1, subchild1_2, subchild2_1, ...</span>\n</pre>\n"],["descendents","Sequel::Plugins::Subclasses::ClassMethods","Sequel/Plugins/Subclasses/ClassMethods.html#method-i-descendents","()","<p>SEQUEL6: Remove\n"],["deserialized_values","Sequel::Plugins::Serialization::InstanceMethods","Sequel/Plugins/Serialization/InstanceMethods.html#method-i-deserialized_values","()","<p>Hash of deserialized values, used as a cache.\n"],["dims","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-dims","()","<p>Call the array_dims method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">dims</span> <span class=\"ruby-comment\"># array_dims(array)</span>\n</pre>\n"],["disconnect_connection","Sequel::ServerLogging","Sequel/ServerLogging.html#method-i-disconnect_connection","(conn)","<p>When disconnecting a connection, remove the related connection from the mapping.\n"],["distinct","Sequel::SQL::StringAgg","Sequel/SQL/StringAgg.html#method-i-distinct","()","<p>Return a modified StringAgg that uses distinct expressions\n"],["down","Sequel::Migration","Sequel/Migration.html#method-i-down","()","<p>The default down action does nothing\n"],["down","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-down","(&block)","<p>Defines the migration&#39;s down action.\n"],["drop","Sequel::ConstraintValidations::Generator","Sequel/ConstraintValidations/Generator.html#method-i-drop","(constraint)","<p>Given the name of a constraint, drop that constraint from the database, and remove the related validation …\n"],["drop_constraint_validations_for","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-i-drop_constraint_validations_for","(opts=OPTS)","<p>Delete validation metadata for specific constraints.  At least one of the following options should be …\n"],["drop_constraint_validations_table","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-i-drop_constraint_validations_table","()","<p>Drop the constraint validations table.\n"],["drop_enum","Sequel::Postgres::EnumDatabaseMethods","Sequel/Postgres/EnumDatabaseMethods.html#method-i-drop_enum","(enum, opts=OPTS)","<p>Run the SQL to drop the enum type with the given name. Options:\n<p>:if_exists  &mdash; Do not raise an error if the …\n"],["drop_table","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-i-drop_table","(*names)","<p>Drop all constraint validations for a table if dropping the table.\n"],["dump_columns","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-dump_columns","()","<p>Dump this generator&#39;s columns to a string that could be evaled inside another instance to represent …\n"],["dump_constraints","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-dump_constraints","()","<p>Dump this generator&#39;s constraints to a string that could be evaled inside another instance to represent …\n"],["dump_foreign_key_migration","Sequel::SchemaDumper","Sequel/SchemaDumper.html#method-i-dump_foreign_key_migration","(options=OPTS)","<p>Dump foreign key constraints for all tables as a migration. This complements the foreign_keys: false …\n"],["dump_index_cache","Sequel::IndexCaching","Sequel/IndexCaching.html#method-i-dump_index_cache","(file)","<p>Dump the index cache to the filename given in Marshal format.\n"],["dump_index_cache?","Sequel::IndexCaching","Sequel/IndexCaching.html#method-i-dump_index_cache-3F","(file)","<p>Dump the index cache to the filename given unless the file already exists.\n"],["dump_indexes","Sequel::Schema::CreateTableGenerator","Sequel/Schema/CreateTableGenerator.html#method-i-dump_indexes","(options=OPTS)","<p>Dump this generator&#39;s indexes to a string that could be evaled inside another instance to represent …\n"],["dump_indexes_migration","Sequel::SchemaDumper","Sequel/SchemaDumper.html#method-i-dump_indexes_migration","(options=OPTS)","<p>Dump indexes for all tables as a migration.  This complements the indexes: false option to dump_schema_migration. …\n"],["dump_pg_auto_constraint_validations_cache","Sequel::Plugins::PgAutoConstraintValidations::ClassMethods","Sequel/Plugins/PgAutoConstraintValidations/ClassMethods.html#method-i-dump_pg_auto_constraint_validations_cache","()","<p>Dump the in-memory cached metadata to the cache file.\n"],["dump_schema_cache","Sequel::SchemaCaching","Sequel/SchemaCaching.html#method-i-dump_schema_cache","(file)","<p>Dump the cached schema to the filename given in Marshal format.\n"],["dump_schema_cache?","Sequel::SchemaCaching","Sequel/SchemaCaching.html#method-i-dump_schema_cache-3F","(file)","<p>Dump the cached schema to the filename given unless the file already exists.\n"],["dump_schema_migration","Sequel::SchemaDumper","Sequel/SchemaDumper.html#method-i-dump_schema_migration","(options=OPTS)","<p>Return a string that contains a Sequel migration that when run would recreate the database structure. …\n"],["dump_static_cache_cache","Sequel::Plugins::StaticCacheCache::ClassMethods","Sequel/Plugins/StaticCacheCache/ClassMethods.html#method-i-dump_static_cache_cache","()","<p>Dump the in-memory cached rows to the cache file.\n"],["dump_table_schema","Sequel::SchemaDumper","Sequel/SchemaDumper.html#method-i-dump_table_schema","(table, options=OPTS)","<p>Return a string with a create table block that will recreate the given table&#39;s schema.  Takes the …\n"],["each","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-each","()","<p>Return self without sending a database query, never yielding.\n"],["each","Sequel::GraphEach","Sequel/GraphEach.html#method-i-each","()","<p>Call graph_each for graphed datasets that are not being eager graphed.\n"],["each","Sequel::Plugins::EagerEach::DatasetMethods","Sequel/Plugins/EagerEach/DatasetMethods.html#method-i-each","(&block)","<p>Call #all instead of #each if eager loading, unless #each is being called by #all.\n"],["each","Sequel::Plugins::ForbidLazyLoad::DatasetMethods","Sequel/Plugins/ForbidLazyLoad/DatasetMethods.html#method-i-each","()","<p>Mark model instances retrieved in this call as forbidding lazy loading.\n"],["each","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-each","(&block)","<p>Yield each of the model&#39;s frozen instances to the block, without issuing a database query.\n"],["each","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-each","()","<p>Transform the receiver into a set of keys and values:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-comment\"># each(hstore)</span>\n</pre>\n"],["each","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-each","()","<p>Returns a set of key and value pairs, where the keys are text and the values are JSON.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["each","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-each","(*args)","<p>Returns an expression for a set of information extracted from the top-level members of the JSON array …\n"],["each_page","Sequel::DatasetPagination","Sequel/DatasetPagination.html#method-i-each_page","(page_size)","<p>Yields a paginated dataset for each page and returns the receiver. Does a count to find the total number …\n"],["each_text","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-each_text","()","<p>Returns a set of key and value pairs, where the keys and values are both text.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">each_text</span> <span class=\"ruby-comment\"># json_each_text(json)</span>\n</pre>\n"],["eager_graph_build_associations","Sequel::Plugins::EagerGraphEager::DatasetMethods","Sequel/Plugins/EagerGraphEager/DatasetMethods.html#method-i-eager_graph_build_associations","(rows)","<p>After building objects from the rows, if eager_graph_eager has been called on the datasets, for each …\n"],["eager_graph_eager","Sequel::Plugins::EagerGraphEager::DatasetMethods","Sequel/Plugins/EagerGraphEager/DatasetMethods.html#method-i-eager_graph_eager","(dependency_chain, *assocs)","<p>Specify for the given dependency chain, after loading objects for the current dataset via eager_graph …\n"],["eager_graph_limit_strategy","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-eager_graph_limit_strategy","(_)","<p>Always use the ruby eager_graph limit strategy if association is limited.\n"],["eager_graph_limit_strategy","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-eager_graph_limit_strategy","(_)","<p>Always use the ruby eager_graph limit strategy if association is limited.\n"],["eager_limit_strategy","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-eager_limit_strategy","()","<p>Always use the ruby eager limit strategy\n"],["eager_limit_strategy","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-eager_limit_strategy","()","<p>Always use the ruby eager limit strategy\n"],["eager_load_concurrently","Sequel::Plugins::ConcurrentEagerLoading::DatasetMethods","Sequel/Plugins/ConcurrentEagerLoading/DatasetMethods.html#method-i-eager_load_concurrently","()","<p>Return a cloned dataset that will eager load associated results concurrently using the async thread pool. …\n"],["eager_load_results","Sequel::Plugins::Sharding::ClassMethods","Sequel/Plugins/Sharding/ClassMethods.html#method-i-eager_load_results","(opts, eo, &block)","<p>Eager load the association with the given eager loader options.\n"],["eager_load_serially","Sequel::Plugins::ConcurrentEagerLoading::DatasetMethods","Sequel/Plugins/ConcurrentEagerLoading/DatasetMethods.html#method-i-eager_load_serially","()","<p>Return a cloned dataset that will noteager load associated results concurrently using the async thread …\n"],["empty","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-c-empty","(db_type=nil)","<p>Create an empty PGRange with the given database type.\n"],["empty?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-empty-3F","()","<p>Whether this range is empty (has no points).  Note that for manually created ranges (ones not retrieved …\n"],["empty_array_value","Sequel::EmptyArrayConsiderNulls","Sequel/EmptyArrayConsiderNulls.html#method-i-empty_array_value","(op, cols)","<p>Use an expression that returns NULL if the column value is NULL.\n"],["enum","Sequel::Plugins::Enum::ClassMethods","Sequel/Plugins/Enum/ClassMethods.html#method-i-enum","(column, values, opts=OPTS)","<p>Define instance and dataset methods in this class to treat column as a enum.  See Enum documentation …\n"],["eql?","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-eql-3F","(other)","<p>Don&#39;t consider multiranges with different database types equal.\n"],["eql?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-eql-3F","(other)","<p>Consider the receiver equal to other PGRange instances with the same beginning, ending, exclusions, and …\n"],["escaped_ilike","Sequel::SQL::StringMethods","Sequel/SQL/StringMethods.html#method-i-escaped_ilike","(placeholder_pattern, placeholder_values)","<p>Create a <code>EscapedLikeExpression</code> case insensitive pattern match of the receiver with the patterns, interpolated …\n"],["escaped_like","Sequel::SQL::StringMethods","Sequel/SQL/StringMethods.html#method-i-escaped_like","(placeholder_pattern, placeholder_values)","<p>Create a <code>EscapedLikeExpression</code> case sensitive pattern match of the receiver with the patterns, interpolated …\n"],["eval_inspect","Sequel::EvalInspect","Sequel/EvalInspect.html#method-i-eval_inspect","(obj)","<p>Special case objects where inspect does not generally produce input suitable for eval.  Used by Sequel::SQL::Expression#inspect …\n"],["exclude_begin?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-exclude_begin-3F","()","<p>Whether the beginning element is excluded from the range.\n"],["exclude_end?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-exclude_end-3F","()","<p>Whether the ending element is excluded from the range.\n"],["exclude_or_null","Sequel::ExcludeOrNull","Sequel/ExcludeOrNull.html#method-i-exclude_or_null","(*cond, &block)","<p>Performs the inverse of Dataset#where, but also excludes rows where the given condition IS NULL.\n\n<pre>DB[:items].exclude_or_null(category: ...</pre>\n"],["exclude_or_null_having","Sequel::ExcludeOrNull","Sequel/ExcludeOrNull.html#method-i-exclude_or_null_having","(*cond, &block)","<p>The same as exclude_or_null, but affecting the HAVING clause instead of the WHERE clause.\n\n<pre>DB[:items].select_group(:name).exclude_or_null_having{count(name) ...</pre>\n"],["exclude_where","Sequel::Sequel4DatasetMethods","Sequel/Sequel4DatasetMethods.html#method-i-exclude_where","(*cond, &block)","<p>Alias for exclude.\n"],["exist?","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-exist-3F","(key)",""],["extended","Database::SQLComments","Database/SQLComments.html#method-c-extended","(db)",""],["extended","Sequel::ConnectionExpiration","Sequel/ConnectionExpiration.html#method-c-extended","(pool)","<p>Initialize the data structures used by this extension.\n"],["extended","Sequel::ConnectionValidator","Sequel/ConnectionValidator.html#method-c-extended","(pool)","<p>Initialize the data structures used by this extension.\n"],["extended","Sequel::ConstantSqlOverride::DatabaseMethods","Sequel/ConstantSqlOverride/DatabaseMethods.html#method-c-extended","(db)","<p>Create the initial empty hash of constant sql overrides.\n"],["extended","Sequel::ConstraintValidations","Sequel/ConstraintValidations.html#method-c-extended","(db)","<p>Set the default validation metadata table name if it has not already been set.\n"],["extended","Sequel::Database::AsyncThreadPool::DatabaseMethods","Sequel/Database/AsyncThreadPool/DatabaseMethods.html#method-c-extended","(db)",""],["extended","Sequel::DatabaseQuery","Sequel/DatabaseQuery.html#method-c-extended","(db)",""],["extended","Sequel::IdentifierMangling::DatabaseMethods","Sequel/IdentifierMangling/DatabaseMethods.html#method-c-extended","(db)",""],["extended","Sequel::IndexCaching","Sequel/IndexCaching.html#method-c-extended","(db)","<p>Set index cache to the empty hash.\n"],["extended","Sequel::Postgres::EnumDatabaseMethods","Sequel/Postgres/EnumDatabaseMethods.html#method-c-extended","(db)","<p>Parse the available enum values when loading this extension into your database.\n"],["extended","Sequel::Postgres::ExtendedDateSupport","Sequel/Postgres/ExtendedDateSupport.html#method-c-extended","(db)","<p>Add dataset methods and update the conversion proces for dates and timestamps.\n"],["extended","Sequel::Postgres::HStore::DatabaseMethods","Sequel/Postgres/HStore/DatabaseMethods.html#method-c-extended","(db)",""],["extended","Sequel::Postgres::InetDatabaseMethods","Sequel/Postgres/InetDatabaseMethods.html#method-c-extended","(db)","<p>Reset the conversion procs when extending the Database object, so it will pick up the inet/cidr converter. …\n"],["extended","Sequel::Postgres::IntervalDatabaseMethods","Sequel/Postgres/IntervalDatabaseMethods.html#method-c-extended","(db)","<p>Reset the conversion procs if using the native postgres adapter, and extend the datasets to correctly …\n"],["extended","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-extended","(db)",""],["extended","Sequel::Postgres::PGArray::DatabaseMethods","Sequel/Postgres/PGArray/DatabaseMethods.html#method-c-extended","(db)","<p>Create the local hash of database type strings to schema type symbols, used for array types local to …\n"],["extended","Sequel::Postgres::PGMultiRange::DatabaseMethods","Sequel/Postgres/PGMultiRange/DatabaseMethods.html#method-c-extended","(db)","<p>Add the default multirange conversion procs to the database\n"],["extended","Sequel::Postgres::PGRange::DatabaseMethods","Sequel/Postgres/PGRange/DatabaseMethods.html#method-c-extended","(db)","<p>Add the conversion procs to the database and extend the datasets to correctly literalize ruby Range values. …\n"],["extended","Sequel::Postgres::PGRow::DatabaseMethods","Sequel/Postgres/PGRow/DatabaseMethods.html#method-c-extended","(db)","<p>Do some setup for the data structures the module uses.\n"],["extended","Sequel::SQLLogNormalizer","Sequel/SQLLogNormalizer.html#method-c-extended","(db)",""],["extended","Sequel::ServerBlock","Sequel/ServerBlock.html#method-c-extended","(db)","<p>Enable the server block on the connection pool, choosing the correct extension depending on whether the …\n"],["extended","Sequel::ServerLogging","Sequel/ServerLogging.html#method-c-extended","(db)","<p>Initialize the hash mapping connections to shards, and turn on logging of connection info unless it has …\n"],["extract","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-extract","(*a)","<p>Returns a json value for the object at the given path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">extract</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># json_extract_path(json, ...</span>\n</pre>\n"],["extract","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-extract","(*a)","<p>Returns an expression for the JSON array element or object field at the specified path as a SQLite value, …\n"],["extract_text","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-extract_text","(*a)","<p>Returns a text value for the object at the given path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">extract_text</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># json_extract_path_text(json, ...</span>\n</pre>\n"],["fetch","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-i-fetch","(key, *args, &block)","<p>Override to force the key argument to a string.\n"],["fetch_rows","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-fetch_rows","(sql)","<p>Return nil without sending a database query, never yielding.\n"],["filter_by_associations_conditions_expression","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-filter_by_associations_conditions_expression","(obj)",""],["filter_by_associations_limit_strategy","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-filter_by_associations_limit_strategy","()","<p>Don&#39;t use a filter by associations limit strategy\n"],["filter_by_associations_limit_strategy","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-filter_by_associations_limit_strategy","()","<p>Don&#39;t use a filter by associations limit strategy\n"],["filter_expr","Sequel::Dataset::AutoLiteralStrings","Sequel/Dataset/AutoLiteralStrings.html#method-i-filter_expr","(expr = nil)","<p>Treat plain strings as literal strings, and arrays where the first element is a string as a literal string …\n"],["finalize_associations","Sequel::Plugins::ForbidLazyLoad::ClassMethods","Sequel/Plugins/ForbidLazyLoad/ClassMethods.html#method-i-finalize_associations","()","<p>Allow lazy loading for static cache associations before finalizing.\n"],["finalize_settings","Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html#method-i-finalize_settings","()",""],["finalize_settings","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-finalize_settings","()",""],["finalize_settings","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-finalize_settings","()",""],["find_or_new","Sequel::Plugins::UpdateOrCreate::ClassMethods","Sequel/Plugins/UpdateOrCreate/ClassMethods.html#method-i-find_or_new","(attrs, set_attrs=nil)","<p>Operates the same as <code>update_or_create</code>, but returns the objects without persisting changes (no UPDATE/INSERT …\n"],["finder","Sequel::Plugins::Finder::ClassMethods","Sequel/Plugins/Finder/ClassMethods.html#method-i-finder","(meth=OPTS, opts=OPTS, &block)","<p>Create an optimized finder method using a dataset placeholder literalizer. This pre-computes the SQL …\n"],["first","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-first","(*args)","<p>If a block is given, multiple arguments are given, or a single non-Integer argument is given, performs …\n"],["first_page?","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-first_page-3F","()","<p>Returns true if the current page is the first page\n"],["forbid_lazy_load","Sequel::Plugins::ForbidLazyLoad::InstanceMethods","Sequel/Plugins/ForbidLazyLoad/InstanceMethods.html#method-i-forbid_lazy_load","()","<p>Set this model instance to not allow lazy loading of associations.\n"],["foreign_key","String","String.html#method-i-foreign_key","(use_underscore = true)","<p>Creates a foreign key name from a class name. <code>use_underscore</code> sets whether the method should put &#39;_&#39; …\n"],["freeze","Sequel::ConstantSqlOverride::DatabaseMethods","Sequel/ConstantSqlOverride/DatabaseMethods.html#method-i-freeze","()","<p>Freeze the constant_sqls hash to prevent adding new overrides.\n"],["freeze","Sequel::Plugins::ActiveModel::ClassMethods","Sequel/Plugins/ActiveModel/ClassMethods.html#method-i-freeze","()","<p>Cache model_name and to_partial path value before freezing.\n"],["freeze","Sequel::Plugins::AssociationDependencies::ClassMethods","Sequel/Plugins/AssociationDependencies/ClassMethods.html#method-i-freeze","()","<p>Freeze association dependencies when freezing model class.\n"],["freeze","Sequel::Plugins::AutoValidations::ClassMethods","Sequel/Plugins/AutoValidations/ClassMethods.html#method-i-freeze","()","<p>Freeze auto_validation settings when freezing model class.\n"],["freeze","Sequel::Plugins::BlacklistSecurity::ClassMethods","Sequel/Plugins/BlacklistSecurity/ClassMethods.html#method-i-freeze","()","<p>Freeze restricted columns when freezing model class.\n"],["freeze","Sequel::Plugins::ClassTableInheritance::ClassMethods","Sequel/Plugins/ClassTableInheritance/ClassMethods.html#method-i-freeze","()","<p>Freeze CTI information when freezing model class.\n"],["freeze","Sequel::Plugins::ColumnConflicts::ClassMethods","Sequel/Plugins/ColumnConflicts/ClassMethods.html#method-i-freeze","()","<p>Freeze column conflict information when freezing model class.\n"],["freeze","Sequel::Plugins::Composition::ClassMethods","Sequel/Plugins/Composition/ClassMethods.html#method-i-freeze","()","<p>Freeze composition information when freezing model class.\n"],["freeze","Sequel::Plugins::Composition::InstanceMethods","Sequel/Plugins/Composition/InstanceMethods.html#method-i-freeze","()","<p>Freeze compositions hash when freezing model instance.\n"],["freeze","Sequel::Plugins::ConstraintValidations::ClassMethods","Sequel/Plugins/ConstraintValidations/ClassMethods.html#method-i-freeze","()","<p>Freeze constraint validations data when freezing model class.\n"],["freeze","Sequel::Plugins::CsvSerializer::ClassMethods","Sequel/Plugins/CsvSerializer/ClassMethods.html#method-i-freeze","()","<p>Freeze csv serializier opts when freezing model class\n"],["freeze","Sequel::Plugins::DefaultsSetter::ClassMethods","Sequel/Plugins/DefaultsSetter/ClassMethods.html#method-i-freeze","()","<p>Freeze default values when freezing model class\n"],["freeze","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-freeze","()","<p>Freeze internal data structures\n"],["freeze","Sequel::Plugins::Finder::ClassMethods","Sequel/Plugins/Finder/ClassMethods.html#method-i-freeze","()",""],["freeze","Sequel::Plugins::HookClassMethods::ClassMethods","Sequel/Plugins/HookClassMethods/ClassMethods.html#method-i-freeze","()","<p>Freeze hooks when freezing model class.\n"],["freeze","Sequel::Plugins::InputTransformer::ClassMethods","Sequel/Plugins/InputTransformer/ClassMethods.html#method-i-freeze","()","<p>Freeze input transformers when freezing model class\n"],["freeze","Sequel::Plugins::InstanceFilters::InstanceMethods","Sequel/Plugins/InstanceFilters/InstanceMethods.html#method-i-freeze","()","<p>Freeze the instance filters when freezing the object\n"],["freeze","Sequel::Plugins::JsonSerializer::ClassMethods","Sequel/Plugins/JsonSerializer/ClassMethods.html#method-i-freeze","()","<p>Freeze json serializier opts when freezing model class\n"],["freeze","Sequel::Plugins::LazyAttributes::ClassMethods","Sequel/Plugins/LazyAttributes/ClassMethods.html#method-i-freeze","()","<p>Freeze lazy attributes module when freezing model class.\n"],["freeze","Sequel::Plugins::NestedAttributes::ClassMethods","Sequel/Plugins/NestedAttributes/ClassMethods.html#method-i-freeze","()","<p>Freeze nested_attributes_module when freezing model class.\n"],["freeze","Sequel::Plugins::PreparedStatementsSafe::ClassMethods","Sequel/Plugins/PreparedStatementsSafe/ClassMethods.html#method-i-freeze","()","<p>Freeze the prepared statements column defaults when freezing the model class.\n"],["freeze","Sequel::Plugins::Serialization::ClassMethods","Sequel/Plugins/Serialization/ClassMethods.html#method-i-freeze","()","<p>Freeze serialization metadata when freezing model class.\n"],["freeze","Sequel::Plugins::Serialization::InstanceMethods","Sequel/Plugins/Serialization/InstanceMethods.html#method-i-freeze","()","<p>Freeze the deserialized values\n"],["freeze","Sequel::Plugins::SerializationModificationDetection::InstanceMethods","Sequel/Plugins/SerializationModificationDetection/InstanceMethods.html#method-i-freeze","()","<p>Freeze the original deserialized values when freezing the instance.\n"],["freeze","Sequel::Plugins::SingleTableInheritance::ClassMethods","Sequel/Plugins/SingleTableInheritance/ClassMethods.html#method-i-freeze","()","<p>Freeze STI information when freezing model class.  Note that because of how STI works, you should not …\n"],["freeze","Sequel::Plugins::Touch::ClassMethods","Sequel/Plugins/Touch/ClassMethods.html#method-i-freeze","()","<p>Freeze the touched associations when freezing the model class.\n"],["freeze","Sequel::Plugins::Tree::ClassMethods","Sequel/Plugins/Tree/ClassMethods.html#method-i-freeze","()","<p>Should freeze tree order if it is an array when freezing the model class.\n"],["freeze","Sequel::Plugins::TypecastOnLoad::ClassMethods","Sequel/Plugins/TypecastOnLoad/ClassMethods.html#method-i-freeze","()","<p>Freeze typecast on load columns when freezing model class.\n"],["freeze","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-freeze","()","<p>Setup the used_association_reflections storage before freezing\n"],["freeze","Sequel::Plugins::UpdateRefresh::ClassMethods","Sequel/Plugins/UpdateRefresh/ClassMethods.html#method-i-freeze","()","<p>Freeze the update refresh columns when freezing the model class.\n"],["freeze","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-freeze","()","<p>Freeze validation metadata when freezing model class.\n"],["freeze","Sequel::Plugins::WhitelistSecurity::ClassMethods","Sequel/Plugins/WhitelistSecurity/ClassMethods.html#method-i-freeze","()","<p>Freeze allowed columns when freezing model class.\n"],["freeze","Sequel::Postgres::PGArray::DatabaseMethods","Sequel/Postgres/PGArray/DatabaseMethods.html#method-i-freeze","()","<p>Freeze the pg array schema types to prevent adding new ones.\n"],["freeze","Sequel::Postgres::PGMultiRange::DatabaseMethods","Sequel/Postgres/PGMultiRange/DatabaseMethods.html#method-i-freeze","()","<p>Freeze the pg multirange schema types to prevent adding new ones.\n"],["freeze","Sequel::Postgres::PGRange::DatabaseMethods","Sequel/Postgres/PGRange/DatabaseMethods.html#method-i-freeze","()","<p>Freeze the pg range schema types to prevent adding new ones.\n"],["freeze","Sequel::Postgres::PGRow::DatabaseMethods","Sequel/Postgres/PGRow/DatabaseMethods.html#method-i-freeze","()","<p>Freeze the row types and row schema types to prevent adding new ones.\n"],["freeze_descendants","Sequel::Plugins::Subclasses::ClassMethods","Sequel/Plugins/Subclasses/ClassMethods.html#method-i-freeze_descendants","()","<p>Freeze all descendent classes.  This also finalizes the associations for those classes before freezing. …\n"],["freeze_descendents","Sequel::Plugins::Subclasses::ClassMethods","Sequel/Plugins/Subclasses/ClassMethods.html#method-i-freeze_descendents","()","<p>SEQUEL6: Remove\n"],["from","Sequel::Dataset::DatasetSourceAlias","Sequel/Dataset/DatasetSourceAlias.html#method-i-from","(*source, &block)","<p>Preprocess the list of sources and attempt to alias any datasets in the sources to the first source of …\n"],["from","Sequel::MSSQL::EmulateLateralWithApply","Sequel/MSSQL/EmulateLateralWithApply.html#method-i-from","(*source, &block)","<p>When a FROM entry uses a LATERAL subquery, convert that entry into a CROSS APPLY.\n"],["from_csv","Sequel::Plugins::CsvSerializer::ClassMethods","Sequel/Plugins/CsvSerializer/ClassMethods.html#method-i-from_csv","(csv, opts = OPTS)","<p>Attempt to parse a single instance from the given CSV string\n"],["from_csv","Sequel::Plugins::CsvSerializer::InstanceMethods","Sequel/Plugins/CsvSerializer/InstanceMethods.html#method-i-from_csv","(csv, opts = OPTS)","<p>Update the object using the data provided in the first line in CSV. Options:\n<p>:headers  &mdash; The headers to …\n\n"],["from_json","Sequel::Plugins::JsonSerializer::ClassMethods","Sequel/Plugins/JsonSerializer/ClassMethods.html#method-i-from_json","(json, opts=OPTS)","<p>Attempt to parse a single instance from the given JSON string, with options passed to InstanceMethods#from_json_node …\n"],["from_json","Sequel::Plugins::JsonSerializer::InstanceMethods","Sequel/Plugins/JsonSerializer/InstanceMethods.html#method-i-from_json","(json, opts=OPTS)","<p>Parse the provided JSON, which should return a hash, and process the hash with from_json_node.\n"],["from_json_node","Sequel::Plugins::JsonSerializer::InstanceMethods","Sequel/Plugins/JsonSerializer/InstanceMethods.html#method-i-from_json_node","(hash, opts=OPTS)","<p>Using the provided hash, update the instance with data contained in the hash. By default, just calls …\n"],["from_range","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-c-from_range","(range, db_type=nil)","<p>Create a new PGRange instance using the beginning and ending of the ruby Range, with the given db_type. …\n"],["from_xml","Sequel::Plugins::XmlSerializer::ClassMethods","Sequel/Plugins/XmlSerializer/ClassMethods.html#method-i-from_xml","(xml, opts=OPTS)","<p>Return an instance of this class based on the provided XML.\n"],["from_xml","Sequel::Plugins::XmlSerializer::InstanceMethods","Sequel/Plugins/XmlSerializer/InstanceMethods.html#method-i-from_xml","(xml, opts=OPTS)","<p>Update the contents of this instance based on the given XML. Accepts the following options:\n<p>:name_proc … &mdash; "],["from_xml_node","Sequel::Plugins::XmlSerializer::ClassMethods","Sequel/Plugins/XmlSerializer/ClassMethods.html#method-i-from_xml_node","(parent, opts=OPTS)","<p>Return an instance of this class based on the given XML node, which should be Nokogiri::XML::Node instance. …\n"],["from_xml_node","Sequel::Plugins::XmlSerializer::InstanceMethods","Sequel/Plugins/XmlSerializer/InstanceMethods.html#method-i-from_xml_node","(parent, opts=OPTS)","<p>Update the contents of this instance based on the given  XML node, which should be a Nokogiri::XML::Node …\n"],["get","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-get","(key)",""],["get","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-get","(key)",""],["get_column_conflict!","Sequel::Plugins::ColumnConflicts::ClassMethods","Sequel/Plugins/ColumnConflicts/ClassMethods.html#method-i-get_column_conflict-21","(column)","<p>Set the given column as one with a getter method conflict.\n"],["get_column_value","Sequel::Plugins::ColumnConflicts::InstanceMethods","Sequel/Plugins/ColumnConflicts/InstanceMethods.html#method-i-get_column_value","(c)","<p>If the given column has a getter method conflict, lookup the value directly in the values hash.\n"],["get_json","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-get_json","(key)","<p>Returns an expression for getting the JSON array element or object field at the specified path as a  …\n"],["get_text","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-get_text","(key)","<p>Get JSON array element or object field as text.  If an array is given, gets the object at the specified …\n"],["handle_silent_modification_failure?","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-handle_silent_modification_failure-3F","()","<p>Handle silent failure of add/remove methods if raise_on_save_failure is false.\n"],["handle_silent_modification_failure?","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-handle_silent_modification_failure-3F","()","<p>Handle silent failure of add/remove methods if raise_on_save_failure is false and save_after_modify is …\n"],["has_hooks?","Sequel::Plugins::HookClassMethods::ClassMethods","Sequel/Plugins/HookClassMethods/ClassMethods.html#method-i-has_hooks-3F","(hook)","<p>Returns true if there are any hook blocks for the given hook.\n"],["has_key?","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-has_key-3F","(key)","<p>Check if the receiver contains the given key:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># (hstore ? &#39;a&#39;)</span>\n</pre>\n"],["has_key?","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-has_key-3F","(key)","<p>Check if the receiver contains the given key:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">has_key?</span>(<span class=\"ruby-string\">&#39;a&#39;</span>) <span class=\"ruby-comment\"># (jsonb ? &#39;a&#39;)</span>\n</pre>\n"],["has_validations?","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-has_validations-3F","()","<p>Returns true if validations are defined.\n"],["hash","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-hash","()","<p>Make sure equal ranges have the same hash.\n"],["hook_blocks","Sequel::Plugins::HookClassMethods::ClassMethods","Sequel/Plugins/HookClassMethods/ClassMethods.html#method-i-hook_blocks","(hook)","<p>Yield every block related to the given hook.\n"],["hook_methods_for","Sequel::Plugins::HookClassMethods::ClassMethods","Sequel/Plugins/HookClassMethods/ClassMethods.html#method-i-hook_methods_for","(hook)","<p>Yield every method related to the given hook.\n"],["hstore","Hash","Hash.html#method-i-hstore","()","<p>Create a new HStore using the receiver as the input hash.  Note that the HStore created will not use …\n"],["hstore","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-hstore","()",""],["hstore","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-hstore","(arg=(no_arg_given=true; nil))","<p>Convert the array into an hstore using the hstore function. If given an argument, use the two array form: …\n"],["hstore","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-hstore","()","<p>Return the receiver.\n"],["hstore","Sequel::Postgres::HStoreOpMethods","Sequel/Postgres/HStoreOpMethods.html#method-i-hstore","()","<p>Wrap the receiver in an HStoreOp so you can easily use the PostgreSQL hstore functions and operators …\n"],["hstore","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-hstore","(v)","<p>Return a Postgres::HStore proxy for the given hash.\n"],["hstore_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-hstore_op","(v)","<p>Return the object wrapped in an Postgres::HStoreOp.\n"],["humanize","String","String.html#method-i-humanize","()","<p>Capitalizes the first word and turns underscores into spaces and strips _id. Like titleize, this is meant …\n"],["identifier","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-identifier","()","<p>Returns receiver wrapped in an <code>Sequel::SQL::Identifier</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:ab</span>.<span class=\"ruby-identifier\">identifier</span> <span class=\"ruby-comment\"># SQL: &quot;a&quot;</span>\n</pre>\n"],["identifier","Symbol","Symbol.html#method-i-identifier","()","<p>Returns receiver wrapped in an <code>Sequel::SQL::Identifier</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:a</span>.<span class=\"ruby-identifier\">identifier</span> <span class=\"ruby-comment\"># SQL: &quot;a&quot;</span>\n</pre>\n"],["identifier_input_method","Sequel::IdentifierMangling::DatasetMethods","Sequel/IdentifierMangling/DatasetMethods.html#method-i-identifier_input_method","()","<p>The String instance method to call on identifiers before sending them to the database.\n"],["identifier_input_method=","Sequel::IdentifierMangling::DatabaseMethods","Sequel/IdentifierMangling/DatabaseMethods.html#method-i-identifier_input_method-3D","(v)","<p>Set the method to call on identifiers going into the database:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>] <span class=\"ruby-comment\"># SELECT * FROM items</span>\n<span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">identifier_input_method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["identifier_output_method","Sequel::IdentifierMangling::DatasetMethods","Sequel/IdentifierMangling/DatasetMethods.html#method-i-identifier_output_method","()","<p>The String instance method to call on identifiers before sending them to the database.\n"],["identifier_output_method=","Sequel::IdentifierMangling::DatabaseMethods","Sequel/IdentifierMangling/DatabaseMethods.html#method-i-identifier_output_method-3D","(v)","<p>Set the method to call on identifiers coming from the database:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>].<span class=\"ruby-identifier\">first</span> <span class=\"ruby-comment\"># {:id=&gt;1, :name=&gt;&#39;foo&#39;} ...</span>\n</pre>\n"],["implicit_table_name","Sequel::Plugins::SingularTableNames::ClassMethods","Sequel/Plugins/SingularTableNames/ClassMethods.html#method-i-implicit_table_name","()","<p>Returns the implicit table name for the model class, which is the demodulized, underscored, name of the …\n"],["include?","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-include-3F","(key)",""],["include?","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-include-3F","(key)",""],["indexes","Sequel::IndexCaching","Sequel/IndexCaching.html#method-i-indexes","(table, opts=OPTS)","<p>If no options are provided and there is cached index information for the table, return the cached information …\n"],["inflections","String","String.html#method-c-inflections","()","<p>Yield the Inflections module if a block is given, and return the Inflections module.\n"],["inherited","Sequel::Migration","Sequel/Migration.html#method-c-inherited","(base)","<p>Adds the new migration class to the list of Migration descendants.\n"],["initial_value","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-initial_value","(column)","<p>The initial value of the given column.  If the column value has not changed, this will be the same as …\n"],["initial_values","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-initial_values","()","<p>A hash with column symbol keys and initial values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">initial_values</span> <span class=\"ruby-comment\"># {:name =&gt; &#39;Initial&#39;}</span>\n</pre>\n"],["initialize_copy","Sequel::Plugins::AccessedColumns::InstanceMethods","Sequel/Plugins/AccessedColumns/InstanceMethods.html#method-i-initialize_copy","(other)","<p>Copy the accessed columns when duping and cloning.\n"],["input_transformer_order","Sequel::Plugins::InputTransformer::ClassMethods","Sequel/Plugins/InputTransformer/ClassMethods.html#method-i-input_transformer_order","()","<p>The order in which to call the input transformers. For backwards compatibility only.\n"],["insert","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-insert","(*)","<p>Return nil without sending a database query.\n"],["insert","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-insert","(path, other, insert_after=false)","<p>Inserts the given jsonb value at the given path in the receiver. The default is to insert the value before …\n"],["insert","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-insert","(path, value, *args)","<p>Returns an expression for creating new entries at the given paths in the JSON array or object, but not …\n"],["insert_conflict","Sequel::Plugins::InsertConflict::InstanceMethods","Sequel/Plugins/InsertConflict/InstanceMethods.html#method-i-insert_conflict","(opts=OPTS)","<p>Set the insert_conflict options to pass to the dataset when inserting.\n"],["inspect","Sequel::SQL::Constant","Sequel/SQL/Constant.html#method-i-inspect","()","<p>Reference the constant in the Sequel module if there is one that matches.\n"],["inspect","Sequel::SQL::Expression","Sequel/SQL/Expression.html#method-i-inspect","()","<p>Attempt to produce a string suitable for eval, such that:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">eval</span>(<span class=\"ruby-identifier\">obj</span>.<span class=\"ruby-identifier\">inspect</span>) <span class=\"ruby-operator\">==</span> <span class=\"ruby-identifier\">obj</span>\n</pre>\n"],["instance_filter","Sequel::Plugins::InstanceFilters::InstanceMethods","Sequel/Plugins/InstanceFilters/InstanceMethods.html#method-i-instance_filter","(*args, &block)","<p>Add an instance filter to the array of instance filters Both the arguments given and the block are passed …\n"],["interval","Sequel::Sequel4DatasetMethods","Sequel/Sequel4DatasetMethods.html#method-i-interval","(column=(no_arg = true), &block)","<p>Returns the interval between minimum and maximum values for the given  column/expression. Uses a virtual …\n"],["irregular","String::Inflections","String/Inflections.html#method-c-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and singularization at the same time. This …\n"],["is_current?","Sequel::IntegerMigrator","Sequel/IntegerMigrator.html#method-i-is_current-3F","()","<p>The integer migrator is current if the current version is the same as the target version.\n"],["is_current?","Sequel::Migrator","Sequel/Migrator.html#method-c-is_current-3F","(db, directory, opts=OPTS)","<p>Return whether the migrator is current (i.e. it does not need to make any changes).  Takes the same arguments …\n"],["is_current?","Sequel::TimestampMigrator","Sequel/TimestampMigrator.html#method-i-is_current-3F","()","<p>The timestamp migrator is current if there are no migrations to apply in either direction.\n"],["is_distinct?","Sequel::SQL::StringAgg","Sequel/SQL/StringAgg.html#method-i-is_distinct-3F","()","<p>Whether the current expression uses distinct expressions\n"],["join","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-join","(joiner=\"\", null=nil)",""],["join_table","Sequel::Dataset::DatasetSourceAlias","Sequel/Dataset/DatasetSourceAlias.html#method-i-join_table","(type, table, expr=nil, options=OPTS)","<p>If a Dataset is given as the table argument, attempt to alias it to its source.\n"],["join_table","Sequel::MSSQL::EmulateLateralWithApply","Sequel/MSSQL/EmulateLateralWithApply.html#method-i-join_table","(type, table, expr=nil, *)","<p>If the table is a dataset that uses LATERAL, convert it to a CROSS APPLY if it is a INNER or CROSS JOIN …\n"],["join_table_alias","Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html#method-i-join_table_alias","()","<p>The alias for the first join table.\n"],["json","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-json","()","<p>Returns an expression for a minified version of the JSON.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">json</span>   <span class=\"ruby-comment\"># json(json)</span>\n</pre>\n"],["json_primitive_wrapper","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-json_primitive_wrapper","(value)","<p>Return the wrapper class for the json type if value is a supported type.\n"],["json_serializer_opts","Sequel::Plugins::JsonSerializer::DatasetMethods","Sequel/Plugins/JsonSerializer/DatasetMethods.html#method-i-json_serializer_opts","(opts=OPTS)","<p>Store default options used when calling to_json on this dataset. These options take precedence over the …\n"],["json_serializer_opts","Sequel::Plugins::JsonSerializer::InstanceMethods","Sequel/Plugins/JsonSerializer/InstanceMethods.html#method-i-json_serializer_opts","(opts=OPTS)","<p>Set the json serialization options that will be used by default in future calls to <code>to_json</code>.  This is …\n"],["json_wrapper","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-json_wrapper","(value)","<p>Return the wrapper class for the json type if value is Hash or Array.\n"],["jsonb_primitive_wrapper","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-jsonb_primitive_wrapper","(value)","<p>Return the wrapper class for the jsonb type if value is a supported type.\n"],["jsonb_wrapper","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-jsonb_wrapper","(value)","<p>Return the wrapper class for the jsonb type if value is Hash or Array.\n"],["key?","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-key-3F","(key)",""],["keys","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-keys","()","<p>Return the keys as a PostgreSQL array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># akeys(hstore)</span>\n</pre>\n"],["keys","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-keys","()","<p>Returns a set of keys AS text in the json object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">keys</span> <span class=\"ruby-comment\"># json_object_keys(json)</span>\n</pre>\n"],["last_page?","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-last_page-3F","()","<p>Returns true if the current page is the last page\n"],["last_position","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-last_position","()","<p>Find the last position in the list containing this instance.\n"],["lazy_attributes","Sequel::Plugins::LazyAttributes::ClassMethods","Sequel/Plugins/LazyAttributes/ClassMethods.html#method-i-lazy_attributes","(*attrs)","<p>Remove the given attributes from the list of columns selected by default. For each attribute given, create …\n"],["length","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-length","(dimension = 1)","<p>Call the array_length method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">length</span>    <span class=\"ruby-comment\"># array_length(array, 1)</span>\n<span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">length</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># array_length(array, ...</span>\n</pre>\n"],["list_dataset","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-list_dataset","()","<p>A dataset that represents the list containing this instance.\n"],["listen_for_static_cache_updates","Sequel::Postgres::StaticCacheUpdater","Sequel/Postgres/StaticCacheUpdater.html#method-i-listen_for_static_cache_updates","(models, opts=OPTS)","<p>Listen on the notification channel for changes to any of tables for the models given in a new thread. …\n"],["lit","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-lit","(*args)","<p>Converts a string into a <code>Sequel::LiteralString</code>, in order to override string literalization, e.g.:\n\n<pre>DB[:items].where(abc: ...</pre>\n"],["lit","String","String.html#method-i-lit","(*args)","<p>Converts a string into a <code>Sequel::LiteralString</code>, in order to override string literalization, e.g.:\n\n<pre>DB[:items].where(abc: ...</pre>\n"],["literal_datetime","Sequel::Dataset::RoundTimestamps","Sequel/Dataset/RoundTimestamps.html#method-i-literal_datetime","(v)","<p>Round DateTime values before literalizing\n"],["literal_duration","Sequel::Postgres::IntervalDatabaseMethods","Sequel/Postgres/IntervalDatabaseMethods.html#method-c-literal_duration","(duration)","<p>Return an unquoted string version of the duration object suitable for use as a bound variable.\n"],["literal_sqltime","Sequel::Dataset::RoundTimestamps","Sequel/Dataset/RoundTimestamps.html#method-i-literal_sqltime","(v)","<p>Round Sequel::SQLTime values before literalizing\n"],["literal_time","Sequel::Dataset::RoundTimestamps","Sequel/Dataset/RoundTimestamps.html#method-i-literal_time","(v)","<p>Round Time values before literalizing\n"],["load_cache","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-load_cache","()","<p>Reload the cache for this model by retrieving all of the instances in the dataset freezing them, and …\n"],["load_index_cache","Sequel::IndexCaching","Sequel/IndexCaching.html#method-i-load_index_cache","(file)","<p>Replace the index cache with the data from the given file, which should be in Marshal format.\n"],["load_index_cache?","Sequel::IndexCaching","Sequel/IndexCaching.html#method-i-load_index_cache-3F","(file)","<p>Replace the index cache with the data from the given file if the file exists.\n"],["load_schema_cache","Sequel::SchemaCaching","Sequel/SchemaCaching.html#method-i-load_schema_cache","(file)","<p>Replace the schema cache with the data from the given file, which should be in Marshal format.\n"],["load_schema_cache?","Sequel::SchemaCaching","Sequel/SchemaCaching.html#method-i-load_schema_cache-3F","(file)","<p>Replace the schema cache with the data from the given file if the file exists.\n"],["load_typecast","Sequel::Plugins::TypecastOnLoad::InstanceMethods","Sequel/Plugins/TypecastOnLoad/InstanceMethods.html#method-i-load_typecast","()","<p>Call the setter method for each of the model&#39;s typecast_on_load_columns with the current value, so …\n"],["log_connection_yield","Sequel::CallerLogging","Sequel/CallerLogging.html#method-i-log_connection_yield","(sql, conn, args=nil)","<p>Include caller information when logging query.\n"],["log_connection_yield","Sequel::ErrorSQL","Sequel/ErrorSQL.html#method-i-log_connection_yield","(sql, conn, args=nil)","<p>If there are no loggers for this database and an exception is raised store the SQL related to the exception …\n"],["log_connection_yield","Sequel::SQLLogNormalizer","Sequel/SQLLogNormalizer.html#method-i-log_connection_yield","(sql, conn, args=nil)","<p>Normalize the SQL before calling super.\n"],["log_exception","Sequel::ErrorSQL","Sequel/ErrorSQL.html#method-i-log_exception","(exception, message)","<p>Store the SQL related to the exception with the exception, so it is available for DatabaseError#sql later. …\n"],["loose_count","Sequel::Postgres::LooseCount","Sequel/Postgres/LooseCount.html#method-i-loose_count","(table)","<p>Look at the table statistics for the given table to get an approximate count of the number of rows.\n"],["lower","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-lower","(dimension = 1)","<p>Call the array_lower method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">lower</span>    <span class=\"ruby-comment\"># array_lower(array, 1)</span>\n<span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">lower</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># array_lower(array, ...</span>\n</pre>\n"],["many_through_many","Sequel::Plugins::ManyThroughMany::ClassMethods","Sequel/Plugins/ManyThroughMany/ClassMethods.html#method-i-many_through_many","(name, through, opts=OPTS, &block)","<p>Create a many_through_many association.  Arguments:\n<p>name  &mdash; Same as associate, the name of the association. …\n"],["many_to_pg_array","Sequel::Plugins::PgArrayAssociations::ClassMethods","Sequel/Plugins/PgArrayAssociations/ClassMethods.html#method-i-many_to_pg_array","(name, opts=OPTS, &block)","<p>Create a many_to_pg_array association, for the case where the associated table contains the array with …\n"],["map","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-map","(column=nil, &block)","<p>Use the cache instead of a query to get the results.\n"],["marshallable!","Sequel::Plugins::TacticalEagerLoading::InstanceMethods","Sequel/Plugins/TacticalEagerLoading/InstanceMethods.html#method-i-marshallable-21","()","<p>Remove retrieved_by and retrieved_with when marshalling.  retrieved_by contains unmarshallable objects, …\n"],["member?","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-member-3F","(key)",""],["merge","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-i-merge","(hash, &block)","<p>Convert the input hash to string keys and values before merging, and return a new HStore instance with …\n"],["merge","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-merge","(other)","<p>Merge a given hstore into the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">merge</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (hstore || a)</span>\n</pre>\n"],["method_missing","Sequel::Database::AsyncThreadPool::BaseProxy","Sequel/Database/AsyncThreadPool/BaseProxy.html#method-i-method_missing","(*args, &block)","<p>Pass all method calls to the returned result.\n"],["method_missing","Sequel::Dataset::Query","Sequel/Dataset/Query.html#method-i-method_missing","(method, *args, &block)","<p>Replace the query&#39;s dataset with dataset returned by the method call.\n"],["method_missing","Sequel::Migration","Sequel/Migration.html#method-i-method_missing","(method_sym, *args, &block)","<p>Intercepts method calls intended for the database and sends them along.\n"],["method_missing","Sequel::Plugins::AssociationProxies::AssociationProxy","Sequel/Plugins/AssociationProxies/AssociationProxy.html#method-i-method_missing","(meth, *args, &block)","<p>Call the method given on the array of associated objects if the method is an array method, otherwise …\n"],["method_missing","Sequel::Plugins::ValidationClassMethods::ClassMethods::Generator","Sequel/Plugins/ValidationClassMethods/ClassMethods/Generator.html#method-i-method_missing","(m, *args, &block)","<p>Delegates method calls to the receiver by calling receiver.validates_xxx.\n"],["migration","Sequel","Sequel.html#method-c-migration","(&block)","<p>The preferred method for writing Sequel migrations, using a DSL:\n\n<pre>Sequel.migration do\n  up do\n    create_table(:artists) ...</pre>\n"],["migrator_class","Sequel::Migrator","Sequel/Migrator.html#method-c-migrator_class","(directory)","<p>Choose the Migrator subclass to use.  Uses the TimestampMigrator if the version number is greater than …\n"],["minify","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-minify","()",""],["model_name","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-model_name","()","<p>Return ::ActiveModel::Name instance for the class.\n"],["move_down","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-move_down","(n = 1)","<p>Move this instance down the given number of places in the list, or 1 place if no argument is specified. …\n"],["move_to","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-move_to","(target, lp = nil)","<p>Move this instance to the given place in the list.  If lp is not given or greater than the last list …\n"],["move_to_bottom","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-move_to_bottom","()","<p>Move this instance to the bottom (last position) of the list.\n"],["move_to_top","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-move_to_top","()","<p>Move this instance to the top (first position, usually position 1) of the list.\n"],["move_up","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-move_up","(n = 1)","<p>Move this instance the given number of places up in the list, or 1 place if no argument is specified. …\n"],["needing_reencryption","Sequel::Plugins::ColumnEncryption::DatasetMethods","Sequel/Plugins/ColumnEncryption/DatasetMethods.html#method-i-needing_reencryption","()","<p>Filter the dataset to exclude rows where all encrypted columns are already encrypted with the current …\n"],["nested_attributes","Sequel::Plugins::NestedAttributes::ClassMethods","Sequel/Plugins/NestedAttributes/ClassMethods.html#method-i-nested_attributes","(*associations, &block)","<p>Allow nested attributes to be set for the given associations.  Options:\n<p>:destroy  &mdash; Allow destruction of …\n"],["new","Sequel::ConstraintValidations::Generator","Sequel/ConstraintValidations/Generator.html#method-c-new","(generator)","<p>Store the schema generator that encloses this validates block.\n"],["new","Sequel::Database::AsyncThreadPool::BaseProxy","Sequel/Database/AsyncThreadPool/BaseProxy.html#method-c-new","(&block)","<p>Store a block that returns the result when called.\n"],["new","Sequel::Database::AsyncThreadPool::PreemptableProxy","Sequel/Database/AsyncThreadPool/PreemptableProxy.html#method-c-new","()",""],["new","Sequel::Database::AsyncThreadPool::Proxy","Sequel/Database/AsyncThreadPool/Proxy.html#method-c-new","()",""],["new","Sequel::Dataset::Query","Sequel/Dataset/Query.html#method-c-new","(dataset)",""],["new","Sequel::IntegerMigrator","Sequel/IntegerMigrator.html#method-c-new","(db, directory, opts=OPTS)","<p>Set up all state for the migrator instance\n"],["new","Sequel::Migration","Sequel/Migration.html#method-c-new","(db)","<p>Set the database associated with this migration.\n"],["new","Sequel::MigrationAlterTableReverser","Sequel/MigrationAlterTableReverser.html#method-c-new","()",""],["new","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-c-new","(&block)","<p>Create a new migration class, and instance_exec the block.\n"],["new","Sequel::MigrationReverser","Sequel/MigrationReverser.html#method-c-new","()",""],["new","Sequel::Migrator","Sequel/Migrator.html#method-c-new","(db, directory, opts=OPTS)","<p>Setup the state for the migrator\n"],["new","Sequel::Plugins::AfterInitialize::InstanceMethods","Sequel/Plugins/AfterInitialize/InstanceMethods.html#method-c-new","(h={})","<p>Call after_initialize for new model objects.\n"],["new","Sequel::Plugins::AssociationProxies::AssociationProxy","Sequel/Plugins/AssociationProxies/AssociationProxy.html#method-c-new","(instance, reflection, proxy_argument, &proxy_block)","<p>Set the association reflection to use, and whether the association should be reloaded if an array method …\n"],["new","Sequel::Plugins::JsonSerializer::Literal","Sequel/Plugins/JsonSerializer/Literal.html#method-c-new","(json)",""],["new","Sequel::Plugins::ValidationClassMethods::ClassMethods::Generator","Sequel/Plugins/ValidationClassMethods/ClassMethods/Generator.html#method-c-new","(receiver ,&block)","<p>Initializes a new generator.\n"],["new","Sequel::Postgres::HStoreSubscriptOp","Sequel/Postgres/HStoreSubscriptOp.html#method-c-new","(expression, sub)","<p>Set the expression and subscript to the given arguments\n"],["new","Sequel::Postgres::InetOp","Sequel/Postgres/InetOp.html#method-c-new","(v)","<p>For String and IPAddr instances, wrap them in a cast to inet, to avoid ambiguity issues when calling …\n"],["new","Sequel::Postgres::JSONBSubscriptOp","Sequel/Postgres/JSONBSubscriptOp.html#method-c-new","(expression, sub)","<p>Set the expression and subscript to the given arguments\n"],["new","Sequel::Postgres::PGArray","Sequel/Postgres/PGArray.html#method-c-new","(array, type=nil)","<p>Set the array to delegate to, and a database type.\n"],["new","Sequel::Postgres::PGArray::Creator","Sequel/Postgres/PGArray/Creator.html#method-c-new","(type, converter=nil)","<p>Set the type and optional converter callable that will be used.\n"],["new","Sequel::Postgres::PGArray::Parser","Sequel/Postgres/PGArray/Parser.html#method-c-new","(source, converter=nil)","<p>Set the source for the input, and any converter callable to call with objects to be created.  For nested …\n"],["new","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-c-new","(ranges, db_type)","<p>Set the array of ranges to delegate to, and the database type.\n"],["new","Sequel::Postgres::PGMultiRange::Creator","Sequel/Postgres/PGMultiRange/Creator.html#method-c-new","(type, converter=nil)",""],["new","Sequel::Postgres::PGMultiRange::Parser","Sequel/Postgres/PGMultiRange/Parser.html#method-c-new","(source, converter)",""],["new","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-c-new","(beg, en, opts=OPTS)","<p>Initialize a new PGRange instance.  Accepts the following options:\n<p>:db_type  &mdash; The PostgreSQL database type …\n"],["new","Sequel::Postgres::PGRange::Parser","Sequel/Postgres/PGRange/Parser.html#method-c-new","(db_type, converter=nil)","<p>Set the db_type and converter on initialization.\n"],["new","Sequel::Postgres::PGRow::Parser","Sequel/Postgres/PGRow/Parser.html#method-c-new","(h=OPTS)","<p>Sets each of the parser&#39;s attributes, using options with the same name (e.g. :columns sets the columns …\n"],["new","Sequel::SQL::DateAdd","Sequel/SQL/DateAdd.html#method-c-new","(expr, interval, opts=OPTS)","<p>Supports two types of intervals:\n<p>Hash  &mdash; Used directly, but values cannot be plain strings.\n<p>ActiveSupport::Duration … &mdash; "],["new","Sequel::SQL::EscapedLikeExpression","Sequel/SQL/EscapedLikeExpression.html#method-c-new","(expr, case_sensitive, placeholder_pattern, placeholder_values)","<p>Initialize the expression. Arguments:\n<p>expr  &mdash; Right hand site of LIKE/ILIKE operator, what you are matching …\n"],["new","Sequel::SQL::StringAgg","Sequel/SQL/StringAgg.html#method-c-new","(expr, separator=nil)","<p>Set the expression and separator\n"],["new","Sequel::SimpleMigration","Sequel/SimpleMigration.html#method-c-new","()","<p>Don&#39;t set transaction use by default.\n"],["new","Sequel::TimestampMigrator","Sequel/TimestampMigrator.html#method-c-new","(db, directory, opts=OPTS)","<p>Set up all state for the migrator instance\n"],["new","Sequel::ToDot","Sequel/ToDot.html#method-c-new","(ds)","<p>Given a <code>Dataset</code>, parse the internal structure to generate a dataset visualization.\n"],["new_entry","Sequel::Postgres::PGArray::Parser","Sequel/Postgres/PGArray/Parser.html#method-i-new_entry","(include_empty=false)","<p>Take the buffer of recorded characters and add it to the array of entries, and use a new buffer for recorded …\n"],["new_using_server","Sequel::Plugins::Sharding::ClassMethods","Sequel/Plugins/Sharding/ClassMethods.html#method-i-new_using_server","(s, values=OPTS, &block)","<p>Return a newly instantiated object that is tied to the given shard s.  When the object is saved, a record …\n"],["next","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-next","(n = 1)","<p>The model instance the given number of places below this model instance in the list, or 1 place below …\n"],["next_page","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-next_page","()","<p>Returns the next page number or nil if the current page is the last page\n"],["no_transaction","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-no_transaction","()","<p>Disable the use of transactions for the related migration\n"],["normalize_logged_sql","Sequel::SQLLogNormalizer","Sequel/SQLLogNormalizer.html#method-i-normalize_logged_sql","(sql)","<p>Replace literal strings and numbers in SQL with question mark placeholders.\n"],["nullify","Sequel::Dataset::Nullifiable","Sequel/Dataset/Nullifiable.html#method-i-nullify","()","<p>Return a cloned nullified dataset.\n"],["object_to_json_data","Sequel::Plugins::JsonSerializer","Sequel/Plugins/JsonSerializer.html#method-c-object_to_json_data","(obj, *args, &block)","<p>Convert the given object to a JSON data structure using the given arguments.\n"],["on_duplicate_columns","Sequel::DuplicateColumnsHandler","Sequel/DuplicateColumnsHandler.html#method-i-on_duplicate_columns","(handler = (raise Error, \"Must provide either an argument or a block to on_duplicate_columns\" unless defined?(yield); nil), &block)","<p>Customize handling of duplicate columns for this dataset.\n"],["one_through_many","Sequel::Plugins::ManyThroughMany::ClassMethods","Sequel/Plugins/ManyThroughMany/ClassMethods.html#method-i-one_through_many","(name, through, opts=OPTS, &block)","<p>Creates a one_through_many association.  See many_through_many for arguments.\n"],["op","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-i-op","()","<p>Wrap the receiver in an HStoreOp so you can easily use the PostgreSQL hstore functions and operators …\n"],["op","Sequel::Postgres::JSONArray","Sequel/Postgres/JSONArray.html#method-i-op","()","<p>Wrap the JSONArray instance in an JSONOp, allowing you to easily use the PostgreSQL json functions and …\n"],["op","Sequel::Postgres::JSONBArray","Sequel/Postgres/JSONBArray.html#method-i-op","()","<p>Wrap the JSONBArray instance in an JSONBOp, allowing you to easily use the PostgreSQL jsonb functions …\n"],["op","Sequel::Postgres::JSONBHash","Sequel/Postgres/JSONBHash.html#method-i-op","()","<p>Wrap the JSONBHash instance in an JSONBOp, allowing you to easily use the PostgreSQL jsonb functions …\n"],["op","Sequel::Postgres::JSONHash","Sequel/Postgres/JSONHash.html#method-i-op","()","<p>Wrap the JSONHash instance in an JSONOp, allowing you to easily use the PostgreSQL json functions and …\n"],["op","Sequel::Postgres::PGArray","Sequel/Postgres/PGArray.html#method-i-op","()","<p>Wrap the PGArray instance in an ArrayOp, allowing you to easily use the PostgreSQL array functions and …\n"],["op","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-op","()","<p>Wrap the PGRange instance in an RangeOp, allowing you to easily use the PostgreSQL range functions and …\n"],["op","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-op","()","<p>Wrap the PGRange instance in an RangeOp, allowing you to easily use the PostgreSQL range functions and …\n"],["op","Sequel::Postgres::PGRow::ArrayRow","Sequel/Postgres/PGRow/ArrayRow.html#method-i-op","()","<p>Wrap the PGRow::ArrayRow instance in an PGRowOp, allowing you to easily use the PostgreSQL row functions …\n"],["op","Sequel::Postgres::PGRow::HashRow","Sequel/Postgres/PGRow/HashRow.html#method-i-op","()","<p>Wrap the PGRow::ArrayRow instance in an PGRowOp, allowing you to easily use the PostgreSQL row functions …\n"],["operator","Sequel::ConstraintValidations::Generator","Sequel/ConstraintValidations/Generator.html#method-i-operator","(op, arg, columns, opts=OPTS)","<p>Create operator validation.  The op should be either <code>:&gt;</code>, +:&gt;=+, <code>:&lt;</code>, or +:&lt;=+, and the arg …\n"],["order","Sequel::SQL::StringAgg","Sequel/SQL/StringAgg.html#method-i-order","(*o)","<p>Return a modified StringAgg with the given order\n"],["output","Sequel::ToDot","Sequel/ToDot.html#method-i-output","()","<p>Output the dataset visualization as a string in <code>dot</code> format.\n"],["output","Sequel::ToDot","Sequel/ToDot.html#method-c-output","(ds)","<p>Given a <code>Dataset</code>, return a string in <code>dot</code> format that will generate a visualization of the dataset.\n"],["overlaps","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-overlaps","(other)","<p>Use the overlaps (&amp;&amp;) operator:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">overlaps</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (array &amp;&amp; a)</span>\n</pre>\n"],["page_count","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-page_count","()","<p>The number of pages in the dataset before pagination, of which this paginated dataset is one.  Empty …\n"],["page_range","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-page_range","()","<p>Returns the page range\n"],["page_size","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-page_size","()","<p>The number of records per page (the final page may have fewer than this number of records).\n"],["paginate","Sequel::DatasetPagination","Sequel/DatasetPagination.html#method-i-paginate","(page_no, page_size, record_count=nil)","<p>Returns a paginated dataset. The returned dataset is limited to the page size at the correct offset, …\n"],["pagination_record_count","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-pagination_record_count","()","<p>The total number of records in the dataset before pagination.\n"],["parse","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-c-parse","(str)","<p>Parse the given string into an HStore, assuming the str is in PostgreSQL hstore output format.\n"],["parse","Sequel::Postgres::HStore::Parser","Sequel/Postgres/HStore/Parser.html#method-i-parse","()","<p>Parse the output format that PostgreSQL uses for hstore columns.  Note that this does not attempt to …\n"],["parse","Sequel::Postgres::PGArray::Parser","Sequel/Postgres/PGArray/Parser.html#method-i-parse","()","<p>Parse the input character by character, returning an array of parsed (and potentially converted) objects. …\n"],["parse","Sequel::Postgres::PGMultiRange::Parser","Sequel/Postgres/PGMultiRange/Parser.html#method-i-parse","()","<p>Parse the multirange type input string into a PGMultiRange value.\n"],["parse","Sequel::Postgres::PGRow::Splitter","Sequel/Postgres/PGRow/Splitter.html#method-i-parse","()","<p>Split the stored string into an array of strings, handling the different types of quoting.\n"],["parse_json","Sequel::Postgres::JSONDatabaseMethods","Sequel/Postgres/JSONDatabaseMethods.html#method-c-parse_json","(s, jsonb=false)","<p>Deprecated\n"],["patch","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-patch","(json_patch)","<p>Returns an expression for updating the JSON object using the RFC 7396 MergePatch algorithm\n\n<pre>json_op.patch(&#39;{&quot;a&quot;: ...</pre>\n"],["path_exists","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_exists","(path)","<p>Returns whether the JSON path returns any item for the json object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">path_exists</span>(<span class=\"ruby-string\">&quot;$.foo&quot;</span>) <span class=\"ruby-comment\"># (json ...</span>\n</pre>\n"],["path_exists!","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_exists-21","(path, vars=nil, silent=nil)","<p>Returns whether the JSON path returns any item for the json object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">path_exists!</span>(<span class=\"ruby-string\">&quot;$.foo&quot;</span>)\n<span class=\"ruby-comment\"># jsonb_path_exists(json, ...</span>\n</pre>\n"],["path_exists_tz!","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_exists_tz-21","(path, vars=nil, silent=nil)","<p>The same as #path_exists!, except that timezone-aware conversions are used for date/time values.\n"],["path_match","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_match","(path)","<p>Returns the first item of the result of JSON path predicate check for the json object. Returns nil if …\n"],["path_match!","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_match-21","(path, vars=nil, silent=nil)","<p>Returns the first item of the result of JSON path predicate check for the json object. Returns nil if …\n"],["path_match_tz!","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_match_tz-21","(path, vars=nil, silent=nil)","<p>The same as #path_match!, except that timezone-aware conversions are used for date/time values.\n"],["path_query","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_query","(path, vars=nil, silent=nil)","<p>Returns a set of all jsonb values specified by the JSON path for the json object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">path_query</span>(<span class=\"ruby-string\">&quot;$.foo&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path_query_array","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_query_array","(path, vars=nil, silent=nil)","<p>Returns a jsonb array of all values specified by the JSON path for the json object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">path_query_array</span>(<span class=\"ruby-string\">&quot;$.foo&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path_query_array_tz","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_query_array_tz","(path, vars=nil, silent=nil)","<p>The same as #path_query_array, except that timezone-aware conversions are used for date/time values. …\n"],["path_query_first","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_query_first","(path, vars=nil, silent=nil)","<p>Returns the first item of the result specified by the JSON path for the json object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">path_query_first</span>(<span class=\"ruby-string\">&quot;$.foo&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["path_query_first_tz","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_query_first_tz","(path, vars=nil, silent=nil)","<p>The same as #path_query_first, except that timezone-aware conversions are used for date/time values. …\n"],["path_query_tz","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-path_query_tz","(path, vars=nil, silent=nil)","<p>The same as #path_query, except that timezone-aware conversions are used for date/time values.\n"],["persisted?","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-persisted-3F","()","<p>False if the object is new? or has been destroyed, true otherwise.\n"],["pg_array","Array","Array.html#method-i-pg_array","(type=nil)","<p>Return a PGArray proxy to the receiver, using a specific database type if given.  This is mostly useful …\n"],["pg_array","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-pg_array","(type=nil)",""],["pg_array","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-pg_array","()","<p>Return the receiver.\n"],["pg_array","Sequel::Postgres::ArrayOpMethods","Sequel/Postgres/ArrayOpMethods.html#method-i-pg_array","()","<p>Wrap the receiver in an ArrayOp so you can easily use the PostgreSQL array functions and operators with …\n"],["pg_array","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_array","(v, array_type=nil)","<p>Return a Postgres::PGArray proxy for the given array and database array type.\n"],["pg_array_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_array_op","(v)","<p>Return the object wrapped in an Postgres::ArrayOp.\n"],["pg_array_to_many","Sequel::Plugins::PgArrayAssociations::ClassMethods","Sequel/Plugins/PgArrayAssociations/ClassMethods.html#method-i-pg_array_to_many","(name, opts=OPTS, &block)","<p>Create a pg_array_to_many association, for the case where the current table contains the array with foreign …\n"],["pg_auto_constraint_validation_override","Sequel::Plugins::PgAutoConstraintValidations::ClassMethods","Sequel/Plugins/PgAutoConstraintValidations/ClassMethods.html#method-i-pg_auto_constraint_validation_override","(constraint, columns, message)","<p>Override the constraint validation columns and message for a given constraint\n"],["pg_inet","Sequel::Postgres::InetOp","Sequel/Postgres/InetOp.html#method-i-pg_inet","()","<p>Return the receiver.\n"],["pg_inet","Sequel::Postgres::InetOpMethods","Sequel/Postgres/InetOpMethods.html#method-i-pg_inet","()","<p>Wrap the receiver in an InetOp so you can easily use the PostgreSQL inet functions and operators with …\n"],["pg_inet_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_inet_op","(v)","<p>Return the expression wrapped in the Postgres::InetOp.\n"],["pg_json","Array","Array.html#method-i-pg_json","()","<p>Return a Sequel::Postgres::JSONArray proxy to the receiver. This is mostly useful as a short cut for …\n"],["pg_json","Hash","Hash.html#method-i-pg_json","()","<p>Return a Sequel::Postgres::JSONHash proxy to the receiver. This is mostly useful as a short cut for creating …\n"],["pg_json","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-pg_json","()",""],["pg_json","Sequel::Postgres::JSONOp","Sequel/Postgres/JSONOp.html#method-i-pg_json","()","<p>Return the receiver, since it is already a JSONOp.\n"],["pg_json","Sequel::Postgres::JSONOpMethods","Sequel/Postgres/JSONOpMethods.html#method-i-pg_json","()","<p>Wrap the receiver in an JSONOp so you can easily use the PostgreSQL json functions and operators with …\n"],["pg_json","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_json","(v)","<p>Wrap the array or hash in a Postgres::JSONArray or Postgres::JSONHash. Also handles Postgres::JSONObject …\n"],["pg_json_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_json_op","(v)","<p>Return the object wrapped in an Postgres::JSONOp.\n"],["pg_json_wrap","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_json_wrap","(v)","<p>Wraps Ruby array, hash, string, integer, float, true, false, and nil values with the appropriate JSON …\n"],["pg_jsonb","Array","Array.html#method-i-pg_jsonb","()","<p>Return a Sequel::Postgres::JSONArray proxy to the receiver. This is mostly useful as a short cut for …\n"],["pg_jsonb","Hash","Hash.html#method-i-pg_jsonb","()","<p>Return a Sequel::Postgres::JSONHash proxy to the receiver. This is mostly useful as a short cut for creating …\n"],["pg_jsonb","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-pg_jsonb","()",""],["pg_jsonb","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-pg_jsonb","()","<p>Return the receiver, since it is already a JSONBOp.\n"],["pg_jsonb","Sequel::Postgres::JSONOpMethods","Sequel/Postgres/JSONOpMethods.html#method-i-pg_jsonb","()","<p>Wrap the receiver in an JSONBOp so you can easily use the PostgreSQL jsonb functions and operators with …\n"],["pg_jsonb","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_jsonb","(v)","<p>Wrap the array or hash in a Postgres::JSONBArray or Postgres::JSONBHash. Also handles Postgres::JSONObject …\n"],["pg_jsonb_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_jsonb_op","(v)","<p>Return the object wrapped in an Postgres::JSONBOp.\n"],["pg_jsonb_wrap","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_jsonb_wrap","(v)","<p>Wraps Ruby array, hash, string, integer, float, true, false, and nil values with the appropriate JSONB …\n"],["pg_multirange","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_multirange","(v, db_type)","<p>Convert the object to a Postgres::PGMultiRange.\n"],["pg_range","Range","Range.html#method-i-pg_range","(db_type=nil)","<p>Create a new PGRange using the receiver as the input range, with the given database type.\n"],["pg_range","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-pg_range","(db_type=nil)",""],["pg_range","Sequel::Postgres::RangeOp","Sequel/Postgres/RangeOp.html#method-i-pg_range","()","<p>Return the receiver.\n"],["pg_range","Sequel::Postgres::RangeOpMethods","Sequel/Postgres/RangeOpMethods.html#method-i-pg_range","()","<p>Wrap the receiver in an RangeOp so you can easily use the PostgreSQL range functions and operators with …\n"],["pg_range","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_range","(v, db_type=nil)","<p>Convert the object to a Postgres::PGRange.\n"],["pg_range_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_range_op","(v)","<p>Return the expression wrapped in the Postgres::RangeOp.\n"],["pg_row","Array","Array.html#method-i-pg_row","()","<p>Wraps the receiver in an anonymous Sequel::Postgres::PGRow::ArrayRow instance.\n"],["pg_row","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-pg_row","()",""],["pg_row","Sequel::Postgres::PGRowOp::ExpressionMethods","Sequel/Postgres/PGRowOp/ExpressionMethods.html#method-i-pg_row","()","<p>Return a PGRowOp wrapping the receiver.\n"],["pg_row","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_row","(expr)","<p>Wraps the expr array in an anonymous Postgres::PGRow::ArrayRow instance.\n"],["pg_row_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-pg_row_op","(expr)","<p>Return a PGRowOp wrapping the given expression.\n"],["pk_hash","Sequel::Plugins::UpdatePrimaryKey::InstanceMethods","Sequel/Plugins/UpdatePrimaryKey/InstanceMethods.html#method-i-pk_hash","()","<p>Use the cached primary key if one is present.\n"],["plural","String::Inflections","String/Inflections.html#method-c-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular …\n"],["pluralize","String","String.html#method-i-pluralize","()","<p>Returns the plural form of the word in the string.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;post&quot;</span>.<span class=\"ruby-identifier\">pluralize</span> <span class=\"ruby-comment\">#=&gt; &quot;posts&quot;</span>\n<span class=\"ruby-string\">&quot;octopus&quot;</span>.<span class=\"ruby-identifier\">pluralize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["populate","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-populate","(record)","<p>Create a new record populated with entries from the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">populate</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># populate_record(a, ...</span>\n</pre>\n"],["populate","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-populate","(arg)","<p>Expands the given argument using the columns in the json.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">populate</span>(<span class=\"ruby-identifier\">arg</span>) <span class=\"ruby-comment\"># json_populate_record(arg, ...</span>\n</pre>\n"],["populate_set","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-populate_set","(arg)","<p>Expands the given argument using the columns in the json.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">populate_set</span>(<span class=\"ruby-identifier\">arg</span>) <span class=\"ruby-comment\"># json_populate_recordset(arg, ...</span>\n</pre>\n"],["position_value","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-position_value","()","<p>The value of the model&#39;s position field for this instance.\n"],["predicate_key","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-predicate_key","()","<p>The hash key to use for the eager loading predicate (left side of IN (1, 2, 3))\n"],["predicate_key","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-predicate_key","()","<p>A qualified version of the associated primary key.\n"],["prepared_finder","Sequel::Plugins::Finder::ClassMethods","Sequel/Plugins/Finder/ClassMethods.html#method-i-prepared_finder","(meth=OPTS, opts=OPTS, &block)","<p>Similar to finder, but uses a prepared statement instead of a placeholder literalizer. This makes the …\n"],["pretty","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-pretty","()","<p>Return a pretty printed version of the receiver as a string expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">jsonb_op</span>.<span class=\"ruby-identifier\">pretty</span> <span class=\"ruby-comment\"># jsonb_pretty(jsonb)</span>\n</pre>\n"],["prev","Sequel::Plugins::List::InstanceMethods","Sequel/Plugins/List/InstanceMethods.html#method-i-prev","(n = 1)","<p>The model instance the given number of places below this model instance in the list, or 1 place below …\n"],["prev_page","Sequel::Dataset::Pagination","Sequel/Dataset/Pagination.html#method-i-prev_page","()","<p>Returns the previous page number or nil if the current page is the first\n"],["primary_key","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-primary_key","()","<p>The column in the current table that the keys in the array column in the associated table reference. …\n"],["primary_key","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-primary_key","()","<p>The primary key of the associated model.\n"],["primary_key_method","Sequel::Plugins::PgArrayAssociations::PgArrayToManyAssociationReflection","Sequel/Plugins/PgArrayAssociations/PgArrayToManyAssociationReflection.html#method-i-primary_key_method","()","<p>The method to call to get value of the primary key of the associated model.\n"],["print","Sequel::DatasetPrinter","Sequel/DatasetPrinter.html#method-i-print","(*cols)","<p>Pretty prints the records in the dataset as plain-text table.\n"],["print","Sequel::PrettyTable","Sequel/PrettyTable.html#method-c-print","(records, columns=nil)","<p>Prints nice-looking plain-text tables via puts\n\n<pre>+--+-------+\n|id|name   |\n|--+-------|\n|1 |fasdfas|\n|2 ...</pre>\n"],["probable_columns","Sequel::ColumnsIntrospection","Sequel/ColumnsIntrospection.html#method-i-probable_columns","()","<p>Return an array of probable column names for the dataset, or nil if it is not possible to determine that …\n"],["process","Sequel::ConstraintValidations::Generator","Sequel/ConstraintValidations/Generator.html#method-i-process","(&block)","<p>Alias of instance_exec for a nicer API.\n"],["process_csv_serializer_opts","Sequel::Plugins::CsvSerializer::ClassMethods","Sequel/Plugins/CsvSerializer/ClassMethods.html#method-i-process_csv_serializer_opts","(opts)","<p>Convert the options hash to one that can be passed to CSV.\n"],["push","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-push","(other)","<p>Use the concatentation (||) operator:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">push</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (array || a)</span>\n<span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">concat</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (array || ...</span>\n</pre>\n"],["query","Sequel::DatabaseQuery","Sequel/DatabaseQuery.html#method-i-query","(&block)","<p>Return a dataset modified by the query block\n"],["query","Sequel::DatasetQuery","Sequel/DatasetQuery.html#method-i-query","(&block)","<p>Translates a query block into a dataset. Query blocks are an alternative to Sequel&#39;s usual method …\n"],["quote_identifiers=","Sequel::IdentifierMangling::DatabaseMethods","Sequel/IdentifierMangling/DatabaseMethods.html#method-i-quote_identifiers-3D","(v)","<p>Set whether to quote identifiers (columns and tables) for this database:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:items</span>] <span class=\"ruby-comment\"># SELECT * FROM items ...</span>\n</pre>\n"],["quote_identifiers?","Sequel::IdentifierMangling::DatabaseMethods","Sequel/IdentifierMangling/DatabaseMethods.html#method-i-quote_identifiers-3F","()","<p>Returns true if the database quotes identifiers.\n"],["quote_identifiers?","Sequel::IdentifierMangling::DatasetMethods","Sequel/IdentifierMangling/DatasetMethods.html#method-i-quote_identifiers-3F","()","<p>Check with the database to see if identifier quoting is enabled\n"],["range","Sequel::Sequel4DatasetMethods","Sequel/Sequel4DatasetMethods.html#method-i-range","(column=(no_arg = true), &block)","<p>Returns a <code>Range</code> instance made from the minimum and maximum values for the given column/expression.   …\n"],["reciprocal","Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html#method-i-reciprocal","()","<p>Many through many associations don&#39;t have a reciprocal\n"],["record_set","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-record_set","(record)","<p>Update the values in a record using entries in the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">record_set</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (a #= hstore)</span>\n</pre>\n"],["reencrypt","Sequel::Plugins::ColumnEncryption::InstanceMethods","Sequel/Plugins/ColumnEncryption/InstanceMethods.html#method-i-reencrypt","()","<p>Reencrypt the model if needed.  Looks at all of the models encrypted columns and if any were encypted …\n"],["refresh","Sequel::Plugins::AssociationPks::InstanceMethods","Sequel/Plugins/AssociationPks/InstanceMethods.html#method-i-refresh","()","<p>Clear the associated pks if explicitly refreshing.\n"],["register_array_type","Sequel::Postgres::PGArray::DatabaseMethods","Sequel/Postgres/PGArray/DatabaseMethods.html#method-i-register_array_type","(db_type, opts=OPTS, &block)","<p>Register a database specific array type.  Options:\n<p>:array_type  &mdash; The type to automatically cast the array …\n"],["register_format","Sequel::Plugins::Serialization","Sequel/Plugins/Serialization.html#method-c-register_format","(format, serializer, deserializer)","<p>Register a serializer/deserializer pair with a format symbol, to allow models to pick this format by …\n"],["register_multirange_type","Sequel::Postgres::PGMultiRange::DatabaseMethods","Sequel/Postgres/PGMultiRange/DatabaseMethods.html#method-i-register_multirange_type","(db_type, opts=OPTS, &block)","<p>Register a database specific multirange type.  This can be used to support different multirange types …\n"],["register_range_type","Sequel::Postgres::PGRange::DatabaseMethods","Sequel/Postgres/PGRange/DatabaseMethods.html#method-i-register_range_type","(db_type, opts=OPTS, &block)","<p>Register a database specific range type.  This can be used to support different range types per Database …\n"],["register_row_type","Sequel::Plugins::PgRow::ClassMethods","Sequel/Plugins/PgRow/ClassMethods.html#method-i-register_row_type","()","<p>Register the model&#39;s row type with the database.\n"],["register_row_type","Sequel::Postgres::PGRow::DatabaseMethods","Sequel/Postgres/PGRow/DatabaseMethods.html#method-i-register_row_type","(db_type, opts=OPTS)","<p>Register a new row type for the Database instance. db_type should be the type symbol.  This parses the …\n"],["remove","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-remove","(element)","<p>Remove the given element from the array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">remove</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-comment\"># array_remove(array, 1)</span>\n</pre>\n"],["remove","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-remove","(path, *paths)","<p>Returns an expression for removing entries at the given paths from the JSON array or object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">remove</span>(<span class=\"ruby-string\">&#39;$.a&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remove_before_destroy?","Sequel::Plugins::PgArrayAssociations::ManyToPgArrayAssociationReflection","Sequel/Plugins/PgArrayAssociations/ManyToPgArrayAssociationReflection.html#method-i-remove_before_destroy-3F","()","<p>Destroying the associated object automatically removes the association, since the association is stored …\n"],["rename_enum","Sequel::Postgres::EnumDatabaseMethods","Sequel/Postgres/EnumDatabaseMethods.html#method-i-rename_enum","(enum, new_name)","<p>Run the SQL to rename the enum type with the given name to the another given name.\n"],["rename_enum_value","Sequel::Postgres::EnumDatabaseMethods","Sequel/Postgres/EnumDatabaseMethods.html#method-i-rename_enum_value","(enum, old_name, new_name)","<p>Run the SQL to rename the enum value with the given name to the another given name.\n"],["replace","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-replace","(element, replacement)","<p>Replace the given element in the array with another element:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">replace</span>(<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>) <span class=\"ruby-comment\"># array_replace(array, ...</span>\n</pre>\n"],["replace","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-replace","(path, value, *args)","<p>Returns an expression for replacing entries at the given paths in the JSON array or object, but not creating …\n"],["reset_column","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-reset_column","(column)","<p>Reset the column to its initial value.  If the column was not set initial, removes it from the values. …\n"],["respond_to_missing?","Sequel::Database::AsyncThreadPool::BaseProxy","Sequel/Database/AsyncThreadPool/BaseProxy.html#method-i-respond_to_missing-3F","(*args)","<p>Delegate respond_to? calls to the returned result.\n"],["respond_to_missing?","Sequel::Migration","Sequel/Migration.html#method-i-respond_to_missing-3F","(meth, include_private)","<p>This object responds to all methods the database responds to.\n"],["respond_to_missing?","Sequel::Plugins::ValidationClassMethods::ClassMethods::Generator","Sequel/Plugins/ValidationClassMethods/ClassMethods/Generator.html#method-i-respond_to_missing-3F","(meth, include_private)","<p>This object responds to all validates_* methods the model responds to.\n"],["reverse","Sequel::MigrationAlterTableReverser","Sequel/MigrationAlterTableReverser.html#method-i-reverse","(&block)",""],["reverse","Sequel::MigrationReverser","Sequel/MigrationReverser.html#method-i-reverse","(&block)","<p>Reverse the actions for the given block.  Takes the block given and returns a new block that reverses …\n"],["root","Sequel::Plugins::Tree::InstanceMethods","Sequel/Plugins/Tree/InstanceMethods.html#method-i-root","()","<p>Returns the root node of the tree that this node descends from. This node is returned if it is a root …\n"],["root","Sequel::Plugins::Tree::SingleRoot::ClassMethods","Sequel/Plugins/Tree/SingleRoot/ClassMethods.html#method-i-root","()","<p>Returns the single root node.\n"],["root?","Sequel::Plugins::Tree::InstanceMethods","Sequel/Plugins/Tree/InstanceMethods.html#method-i-root-3F","()","<p>Returns true if this is a root node, false otherwise.\n"],["roots","Sequel::Plugins::Tree::DatasetMethods","Sequel/Plugins/Tree/DatasetMethods.html#method-i-roots","()","<p>Returns list of all root nodes (those with no parent nodes).\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">TreeClass</span>.<span class=\"ruby-identifier\">roots</span> <span class=\"ruby-comment\"># =&gt; [root1, root2]</span>\n</pre>\n"],["roots_dataset","Sequel::Plugins::Tree::DatasetMethods","Sequel/Plugins/Tree/DatasetMethods.html#method-i-roots_dataset","()","<p>Returns the dataset for retrieval of all root nodes\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">TreeClass</span>.<span class=\"ruby-identifier\">roots_dataset</span> <span class=\"ruby-comment\"># =&gt; Sequel::Dataset instance</span>\n</pre>\n"],["row_proc","Sequel::Plugins::Sharding::DatasetMethods","Sequel/Plugins/Sharding/DatasetMethods.html#method-i-row_proc","()","<p>If a row proc exists on the dataset, replace it with one that calls the previous row_proc, but calls …\n"],["row_type","Sequel::Plugins::PgRow::DatabaseMethods","Sequel/Plugins/PgRow/DatabaseMethods.html#method-i-row_type","(db_type, v)","<p>If a Sequel::Model instance is given, return it as-is instead of attempting to convert it.\n"],["row_type","Sequel::Postgres::PGRow::DatabaseMethods","Sequel/Postgres/PGRow/DatabaseMethods.html#method-i-row_type","(db_type, obj)","<p>Handle typecasting of the given object to the given database type. In general, the given database type …\n"],["run","Sequel::IntegerMigrator","Sequel/IntegerMigrator.html#method-i-run","()","<p>Apply all migrations on the database\n"],["run","Sequel::Migrator","Sequel/Migrator.html#method-c-run","(db, directory, opts=OPTS)","<p>Migrates the supplied database using the migration files in the specified directory. Options:\n<p>:allow_missing_migration_files … &mdash; "],["run","Sequel::TimestampMigrator","Sequel/TimestampMigrator.html#method-i-run","()","<p>Apply all migration tuples on the database\n"],["run_after_commit_hooks","Database::RunTransactionHooks","Database/RunTransactionHooks.html#method-i-run_after_commit_hooks","(opts=OPTS)","<p>Run all savepoint and transaction after_commit hooks for the current transaction, and remove the hooks …\n"],["run_after_rollback_hooks","Database::RunTransactionHooks","Database/RunTransactionHooks.html#method-i-run_after_rollback_hooks","(opts=OPTS)","<p>Run all savepoint and transaction after_rollback hooks for the current transaction, and remove the hooks …\n"],["save_changes","Sequel::Plugins::PreparedStatementsSafe::InstanceMethods","Sequel/Plugins/PreparedStatementsSafe/InstanceMethods.html#method-i-save_changes","(opts=OPTS)","<p>Always do a full save of all columns to reduce the number of prepared statements that can be used.\n"],["select_remove","Sequel::SelectRemove","Sequel/SelectRemove.html#method-i-select_remove","(*cols)","<p>Remove columns from the list of selected columns.  If any of the currently selected columns use expressions/aliases …\n"],["self_and_siblings","Sequel::Plugins::Tree::InstanceMethods","Sequel/Plugins/Tree/InstanceMethods.html#method-i-self_and_siblings","()","<p>Returns all siblings and a reference to the current node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">subchild1</span>.<span class=\"ruby-identifier\">self_and_siblings</span> <span class=\"ruby-comment\"># =&gt; [subchild1, ...</span>\n</pre>\n"],["separate_query_per_table?","Sequel::Plugins::ManyThroughMany::ManyThroughManyAssociationReflection","Sequel/Plugins/ManyThroughMany/ManyThroughManyAssociationReflection.html#method-i-separate_query_per_table-3F","()","<p>Whether a separate query should be used for each join table.\n"],["sequel_ast_transform","Sequel::Postgres::HStoreSubscriptOp","Sequel/Postgres/HStoreSubscriptOp.html#method-i-sequel_ast_transform","(transformer)","<p>Support transforming of hstore subscripts\n"],["sequel_ast_transform","Sequel::Postgres::JSONBSubscriptOp","Sequel/Postgres/JSONBSubscriptOp.html#method-i-sequel_ast_transform","(transformer)","<p>Support transforming of jsonb subscripts\n"],["serialize_attributes","Sequel::Plugins::Serialization::ClassMethods","Sequel/Plugins/Serialization/ClassMethods.html#method-i-serialize_attributes","(format, *columns)","<p>Create instance level reader that deserializes column values on request, and instance level writer that …\n"],["set","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-set","(path, other, create_missing=true)","<p>Set the given jsonb value at the given path in the receiver. By default, this will create the value if …\n"],["set","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-set","(path, value, *args)","<p>Returns an expression for creating or replacing entries at the given paths in the JSON array or object. …\n"],["set_all","Sequel::Plugins::WhitelistSecurity::InstanceMethods","Sequel/Plugins/WhitelistSecurity/InstanceMethods.html#method-i-set_all","(hash)","<p>Set all values using the entries in the hash, ignoring any setting of allowed_columns in the model.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Artist</span>.<span class=\"ruby-identifier\">set_allowed_columns</span>(<span class=\"ruby-value\">:num_albums</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_allowed_columns","Sequel::Plugins::WhitelistSecurity::ClassMethods","Sequel/Plugins/WhitelistSecurity/ClassMethods.html#method-i-set_allowed_columns","(*cols)","<p>Set the columns to allow when using mass assignment (e.g. <code>set</code>).  Using this means that any columns not …\n"],["set_cache_ttl","Sequel::Plugins::Caching::ClassMethods","Sequel/Plugins/Caching/ClassMethods.html#method-i-set_cache_ttl","(ttl)","<p>Set the time to live for the cache store, in seconds (default is 3600, # so 1 hour).\n"],["set_column_conflict!","Sequel::Plugins::ColumnConflicts::ClassMethods","Sequel/Plugins/ColumnConflicts/ClassMethods.html#method-i-set_column_conflict-21","(column)","<p>Set the given column as one with a setter method conflict.\n"],["set_column_value","Sequel::Plugins::ColumnConflicts::InstanceMethods","Sequel/Plugins/ColumnConflicts/InstanceMethods.html#method-i-set_column_value","(c, v)","<p>If the given column has a setter method conflict, set the value directly in the values hash.\n"],["set_constant_sql","Sequel::ConstantSqlOverride::DatabaseMethods","Sequel/ConstantSqlOverride/DatabaseMethods.html#method-i-set_constant_sql","(constant, override)","<p>Set the SQL to use for the given Sequel::SQL::Constant\n"],["set_except","Sequel::Plugins::BlacklistSecurity::InstanceMethods","Sequel/Plugins/BlacklistSecurity/InstanceMethods.html#method-i-set_except","(hash, *except)","<p>Set all values using the entries in the hash, except for the keys given in except.  You should probably …\n"],["set_lax","Sequel::Postgres::JSONBOp","Sequel/Postgres/JSONBOp.html#method-i-set_lax","(path, other, create_missing=true, null_value_treatment='use_json_null')","<p>The same as #set, except if <code>other</code> is <code>nil</code>, then behaves according to <code>null_value_treatment</code>, which can be …\n"],["set_masklen","Sequel::Postgres::InetOp","Sequel/Postgres/InetOp.html#method-i-set_masklen","(v)","<p>Return an expression for the calling of the set_masklen function with the receiver and the given argument …\n"],["set_nested_attributes","Sequel::Plugins::NestedAttributes::InstanceMethods","Sequel/Plugins/NestedAttributes/InstanceMethods.html#method-i-set_nested_attributes","(assoc, obj, opts=OPTS)","<p>Set the nested attributes for the given association.  obj should be an enumerable of multiple objects …\n"],["set_only","Sequel::Plugins::WhitelistSecurity::InstanceMethods","Sequel/Plugins/WhitelistSecurity/InstanceMethods.html#method-i-set_only","(hash, *only)","<p>Set the values using the entries in the hash, only if the key is included in only.  It may be a better …\n"],["set_restricted_columns","Sequel::Plugins::BlacklistSecurity::ClassMethods","Sequel/Plugins/BlacklistSecurity/ClassMethods.html#method-i-set_restricted_columns","(*cols)","<p>Set the columns to restrict when using mass assignment (e.g. <code>set</code>).  Using this means that attempts to …\n"],["set_server?","Sequel::Plugins::Sharding::InstanceMethods","Sequel/Plugins/Sharding/InstanceMethods.html#method-i-set_server-3F","(s)","<p>Set the server that this object is tied to, unless it has already been set.  Returns self.\n"],["set_update_timestamp_on_create?","Sequel::Plugins::Timestamps::ClassMethods","Sequel/Plugins/Timestamps/ClassMethods.html#method-i-set_update_timestamp_on_create-3F","()","<p>Whether to set the update timestamp to the create timestamp when creating\n"],["siblings","Sequel::Plugins::Tree::InstanceMethods","Sequel/Plugins/Tree/InstanceMethods.html#method-i-siblings","()","<p>Returns all siblings of the current node.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">subchild1</span>.<span class=\"ruby-identifier\">siblings</span> <span class=\"ruby-comment\"># =&gt; [subchild2]</span>\n</pre>\n"],["single_record!","Sequel::Plugins::EagerEach::DatasetMethods","Sequel/Plugins/EagerEach/DatasetMethods.html#method-i-single_record-21","()","<p>Handle eager loading when calling first and related methods.  For eager_graph, this does an additional …\n"],["singular","String::Inflections","String/Inflections.html#method-c-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can either be a string or a regular …\n"],["singularize","String","String.html#method-i-singularize","()","<p>The reverse of pluralize, returns the singular form of a word in a string.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;posts&quot;</span>.<span class=\"ruby-identifier\">singularize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["skeys","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-skeys","()","<p>Return the keys as a PostgreSQL set:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">skeys</span> <span class=\"ruby-comment\"># skeys(hstore)</span>\n</pre>\n"],["skip_auto_validations","Sequel::Plugins::AutoValidations::ClassMethods","Sequel/Plugins/AutoValidations/ClassMethods.html#method-i-skip_auto_validations","(type)","<p>Skip automatic validations for the given validation type (:not_null, :types, :unique, :max_length, :no_null_byte). …\n"],["skip_auto_validations","Sequel::Plugins::AutoValidations::InstanceMethods","Sequel/Plugins/AutoValidations/InstanceMethods.html#method-i-skip_auto_validations","(*types)","<p>Skip the given types of auto validations on this instance inside the block.\n"],["skip_input_transformer","Sequel::Plugins::InputTransformer::ClassMethods","Sequel/Plugins/InputTransformer/ClassMethods.html#method-i-skip_input_transformer","(transformer_name, *columns)","<p>Set columns that the transformer should skip.\n"],["skip_input_transformer?","Sequel::Plugins::InputTransformer::ClassMethods","Sequel/Plugins/InputTransformer/ClassMethods.html#method-i-skip_input_transformer-3F","(transformer_name, column)","<p>Return true if the transformer should not be called for the given column.\n"],["skip_saving_columns=","Sequel::Plugins::SkipSavingColumns::ClassMethods","Sequel/Plugins/SkipSavingColumns/ClassMethods.html#method-i-skip_saving_columns-3D","(v)","<p>Over the default array of columns to skip.  Once overridden, future changes to the class&#39;s dataset …\n"],["skip_string_stripping","Sequel::Plugins::StringStripper::ClassMethods","Sequel/Plugins/StringStripper/ClassMethods.html#method-i-skip_string_stripping","(*columns)","<p>Skip stripping for the given columns.\n"],["skip_string_stripping?","Sequel::Plugins::StringStripper::ClassMethods","Sequel/Plugins/StringStripper/ClassMethods.html#method-i-skip_string_stripping-3F","(column)","<p>Return true if the column should not have values stripped.\n"],["skip_superclass_validations","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-skip_superclass_validations","()","<p>Instructs the model to skip validations defined in superclasses\n"],["skip_superclass_validations?","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-skip_superclass_validations-3F","()","<p>Instructs the model to skip validations defined in superclasses\n"],["slice","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-slice","(keys)","<p>Return an hstore with only the keys in the given array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">slice</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># slice(hstore, a)</span>\n</pre>\n"],["splat","Sequel::Postgres::PGRowOp","Sequel/Postgres/PGRowOp.html#method-i-splat","(cast_to=nil)","<p>Use the (identifier.*) syntax to indicate that this expression represents the composite type of one of …\n"],["split_noncolumn_values","Sequel::Plugins::SplitValues::InstanceMethods","Sequel/Plugins/SplitValues/InstanceMethods.html#method-i-split_noncolumn_values","()","<p>Check all entries in the values hash.  If any of the keys are not columns, move the entry into the noncolumn_values …\n"],["sql","Sequel::DatabaseError","Sequel/DatabaseError.html#method-i-sql","()","<p>Get the SQL code that caused this error to be raised.\n"],["sql_comments_class_methods","Sequel::Plugins::SqlComments::ClassMethods","Sequel/Plugins/SqlComments/ClassMethods.html#method-i-sql_comments_class_methods","(*meths)","<p>Use automatic SQL comments for the given class methods.\n"],["sql_comments_dataset_methods","Sequel::Plugins::SqlComments::ClassMethods","Sequel/Plugins/SqlComments/ClassMethods.html#method-i-sql_comments_dataset_methods","(*meths)","<p>Use automatic SQL comments for the given dataset methods.\n"],["sql_comments_instance_methods","Sequel::Plugins::SqlComments::ClassMethods","Sequel/Plugins/SqlComments/ClassMethods.html#method-i-sql_comments_instance_methods","(*meths)","<p>Use automatic SQL comments for the given instance methods.\n"],["sql_expr","Array","Array.html#method-i-sql_expr","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, matching all of the conditions.  Rarely …\n"],["sql_expr","Hash","Hash.html#method-i-sql_expr","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching all of the conditions.  Rarely …\n"],["sql_expr","Object","Object.html#method-i-sql_expr","()","<p>Return the object wrapper in an appropriate Sequel expression object.\n"],["sql_expr","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-sql_expr","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, matching all of the conditions.  Rarely …\n"],["sql_function","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-sql_function","(*args)","<p>Returns a <code>Sequel::SQL::Function</code> with this as the function name, and the given arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:now</span>.<span class=\"ruby-identifier\">sql_function</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sql_function","Symbol","Symbol.html#method-i-sql_function","(*args)","<p>Returns a <code>Sequel::SQL::Function</code> with this as the function name, and the given arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:now</span>.<span class=\"ruby-identifier\">sql_function</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sql_literal_append","Sequel::Plugins::PgRow::InstanceMethods","Sequel/Plugins/PgRow/InstanceMethods.html#method-i-sql_literal_append","(ds, sql)","<p>Literalize the model instance and append it to the sql.\n"],["sql_literal_append","Sequel::Postgres","Sequel/Postgres.html#method-i-sql_literal_append","(ds, sql)",""],["sql_literal_append","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-i-sql_literal_append","(ds, sql)","<p>Append a literalize version of the hstore to the sql.\n"],["sql_literal_append","Sequel::Postgres::PGArray","Sequel/Postgres/PGArray.html#method-i-sql_literal_append","(ds, sql)","<p>Append the array SQL to the given sql string.  If the receiver has a type, add a cast to the database …\n"],["sql_literal_append","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-sql_literal_append","(ds, sql)","<p>Append the multirange SQL to the given sql string.\n"],["sql_literal_append","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-sql_literal_append","(ds, sql)","<p>Append a literalize version of the receiver to the sql.\n"],["sql_literal_append","Sequel::Postgres::PGRow::ArrayRow","Sequel/Postgres/PGRow/ArrayRow.html#method-i-sql_literal_append","(ds, sql)","<p>Append SQL fragment related to this object to the sql.\n"],["sql_literal_append","Sequel::Postgres::PGRow::HashRow","Sequel/Postgres/PGRow/HashRow.html#method-i-sql_literal_append","(ds, sql)","<p>Append SQL fragment related to this object to the sql.\n"],["sql_negate","Array","Array.html#method-i-sql_negate","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, matching none of the conditions.\n\n<pre>[[:a, ...</pre>\n"],["sql_negate","Hash","Hash.html#method-i-sql_negate","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching none of the conditions.\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>}.<span class=\"ruby-identifier\">sql_negate</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sql_negate","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-sql_negate","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, matching none of the conditions.\n\n<pre>[[:a, ...</pre>\n"],["sql_or","Array","Array.html#method-i-sql_or","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, matching any of the conditions.\n\n<pre>[[:a, ...</pre>\n"],["sql_or","Hash","Hash.html#method-i-sql_or","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching any of the conditions.\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>}.<span class=\"ruby-identifier\">sql_or</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["sql_or","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-sql_or","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, matching any of the conditions.\n\n<pre>[[:a, ...</pre>\n"],["sql_string_join","Array","Array.html#method-i-sql_string_join","(joiner=nil)","<p>Return a <code>Sequel::SQL::StringExpression</code> representing an SQL string made up of the concatenation of this …\n"],["sql_string_join","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-sql_string_join","(joiner=nil)","<p>Return a <code>Sequel::SQL::StringExpression</code> representing an SQL string made up of the concatenation of this …\n"],["sql_value_list","Array","Array.html#method-i-sql_value_list","()","<p>Return a <code>Sequel::SQL::ValueList</code> created from this array.  Used if this array contains all two element …\n"],["sql_value_list","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-sql_value_list","()","<p>Return a <code>Sequel::SQL::ValueList</code> created from this array.  Used if this array contains all two element …\n"],["sqlite_json_op","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-sqlite_json_op","(v)","<p>Return the object wrapped in an SQLite::JSONOp.\n"],["sqlite_json_op","Sequel::SQLite::JSONOpMethods","Sequel/SQLite/JSONOpMethods.html#method-i-sqlite_json_op","()","<p>Wrap the receiver in an JSONOp so you can easily use the SQLite json functions and operators with it. …\n"],["static_cache_allow_modifications?","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-static_cache_allow_modifications-3F","()","<p>Ask whether modifications to this class are allowed.\n"],["sti_class_from_key","Sequel::Plugins::ClassTableInheritance::ClassMethods","Sequel/Plugins/ClassTableInheritance/ClassMethods.html#method-i-sti_class_from_key","(key)","<p>The model class for the given key value.\n"],["sti_class_from_sti_key","Sequel::Plugins::SingleTableInheritance::ClassMethods","Sequel/Plugins/SingleTableInheritance/ClassMethods.html#method-i-sti_class_from_sti_key","(key)","<p>Return the sti class based on one of the keys from sti_model_map.\n"],["sti_load","Sequel::Plugins::SingleTableInheritance::ClassMethods","Sequel/Plugins/SingleTableInheritance/ClassMethods.html#method-i-sti_load","(r)","<p>Return an instance of the class specified by sti_key, used by the row_proc.\n"],["sti_subclass_added","Sequel::Plugins::SingleTableInheritance::ClassMethods","Sequel/Plugins/SingleTableInheritance/ClassMethods.html#method-i-sti_subclass_added","(key)","<p>Make sure that all subclasses of the parent class correctly include  keys for all of their descendant …\n"],["string","Sequel::PrettyTable","Sequel/PrettyTable.html#method-c-string","(records, columns = nil)","<p>Return the string that #print will print via puts.\n"],["string_agg","Sequel::SQL::Builders","Sequel/SQL/Builders.html#method-i-string_agg","(*a)","<p>Return a StringAgg expression for an aggregate string concatentation.\n"],["string_agg_sql_append","Sequel::SQL::StringAgg::DatasetMethods","Sequel/SQL/StringAgg/DatasetMethods.html#method-i-string_agg_sql_append","(sql, sa)","<p>Append the SQL fragment for the StringAgg expression to the SQL query.\n"],["string_to_date","Sequel::DateParseInputHandler","Sequel/DateParseInputHandler.html#method-i-string_to_date","(string)","<p>Call date parse input handler with input string.\n"],["string_to_datetime","Sequel::DateParseInputHandler","Sequel/DateParseInputHandler.html#method-i-string_to_datetime","(string)","<p>Call date parse input handler with input string.\n"],["string_to_time","Sequel::DateParseInputHandler","Sequel/DateParseInputHandler.html#method-i-string_to_time","(string)","<p>Call date parse input handler with input string.\n"],["strip_nulls","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-strip_nulls","()","<p>Returns a json value stripped of all internal null values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">strip_nulls</span> <span class=\"ruby-comment\"># json_strip_nulls(json)</span>\n</pre>\n"],["subclass","Sequel::Postgres::PGRow::ArrayRow","Sequel/Postgres/PGRow/ArrayRow.html#method-c-subclass","(db_type)","<p>Create a subclass associated with a specific database type. This is done so that instances of this subclass …\n"],["subclass","Sequel::Postgres::PGRow::HashRow","Sequel/Postgres/PGRow/HashRow.html#method-c-subclass","(db_type, columns)","<p>Create a new subclass of this class with the given database type and columns.\n"],["subset","Sequel::Plugins::DefDatasetMethod::ClassMethods","Sequel/Plugins/DefDatasetMethod/ClassMethods.html#method-i-subset","(*args, &block)","<p>Sets up a dataset method that returns a filtered dataset. Sometimes thought of as a scope, and like most …\n"],["supports_lateral_subqueries?","Sequel::MSSQL::EmulateLateralWithApply","Sequel/MSSQL/EmulateLateralWithApply.html#method-i-supports_lateral_subqueries-3F","()","<p>MSSQL can emulate lateral subqueries via CROSS/OUTER APPLY when using this extension.\n"],["svals","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-svals","()","<p>Return the values as a PostgreSQL set:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">svals</span> <span class=\"ruby-comment\"># svals(hstore)</span>\n</pre>\n"],["sync","Sequel::Database::AsyncThreadPool::DatasetMethods","Sequel/Database/AsyncThreadPool/DatasetMethods.html#method-i-sync","()","<p>Return a cloned dataset that will not load results using the async thread pool. Only used if the current …\n"],["table_name","Sequel::Plugins::ClassTableInheritance::ClassMethods","Sequel/Plugins/ClassTableInheritance/ClassMethods.html#method-i-table_name","()","<p>The table name for the current model class&#39;s main table.\n"],["tableize","String","String.html#method-i-tableize","()","<p>Underscores and pluralizes the string.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;RawScaledScorer&quot;</span>.<span class=\"ruby-identifier\">tableize</span> <span class=\"ruby-comment\">#=&gt; &quot;raw_scaled_scorers&quot;</span>\n<span class=\"ruby-string\">&quot;egg_and_ham&quot;</span>.<span class=\"ruby-identifier\">tableize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["timezone=","Sequel::NamedTimezones::DatabaseMethods","Sequel/NamedTimezones/DatabaseMethods.html#method-i-timezone-3D","(tz)",""],["titlecase","String","String.html#method-i-titlecase","()",""],["titleize","String","String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. …\n"],["to_application_timestamp","Sequel::Postgres::ExtendedDateSupport","Sequel/Postgres/ExtendedDateSupport.html#method-i-to_application_timestamp","(value)","<p>Handle BC dates in timestamps by moving the BC from after the time to after the date, to appease ruby&#39;s …\n"],["to_array","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-to_array","()","<p>Return a flattened array of the receiver with alternating keys and values:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">to_array</span> <span class=\"ruby-comment\"># hstore_to_array(hstore)</span>\n</pre>\n"],["to_csv","Sequel::Plugins::CsvSerializer::DatasetMethods","Sequel/Plugins/CsvSerializer/DatasetMethods.html#method-i-to_csv","(opts = OPTS)","<p>Return a CSV string representing an array of all objects in this dataset.  Takes the same options as …\n"],["to_csv","Sequel::Plugins::CsvSerializer::InstanceMethods","Sequel/Plugins/CsvSerializer/InstanceMethods.html#method-i-to_csv","(opts = OPTS)","<p>Return a string in CSV format.  Accepts the same options as CSV.new, as well as the following options: …\n"],["to_date","String","String.html#method-i-to_date","()","<p>Converts a string into a Date object.\n"],["to_datetime","String","String.html#method-i-to_datetime","()","<p>Converts a string into a DateTime object.\n"],["to_dot","Sequel::ToDot::DatasetMethods","Sequel/ToDot/DatasetMethods.html#method-i-to_dot","()","<p>Return a string that can be processed by the <code>dot</code> program (included with graphviz) in order to see a visualization …\n"],["to_hash","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-to_hash","(*a)","<p>Alias of as_hash for backwards compatibility.\n"],["to_hash_groups","Sequel::Plugins::StaticCache::ClassMethods","Sequel/Plugins/StaticCache/ClassMethods.html#method-i-to_hash_groups","(key_column, value_column = nil, opts = OPTS)","<p>Use the cache instead of a query to get the results\n"],["to_json","Sequel::Plugins::JsonSerializer::DatasetMethods","Sequel/Plugins/JsonSerializer/DatasetMethods.html#method-i-to_json","(*a)","<p>Return a JSON string representing an array of all objects in this dataset.  Takes the same options as …\n"],["to_json","Sequel::Plugins::JsonSerializer::InstanceMethods","Sequel/Plugins/JsonSerializer/InstanceMethods.html#method-i-to_json","(*a)","<p>Return a string in JSON format.  Accepts the following options:\n<p>:except  &mdash; Symbol or Array of Symbols of …\n"],["to_json","Sequel::Plugins::JsonSerializer::Literal","Sequel/Plugins/JsonSerializer/Literal.html#method-i-to_json","(*a)",""],["to_json_data","Sequel::Plugins::JsonSerializer::InstanceMethods","Sequel/Plugins/JsonSerializer/InstanceMethods.html#method-i-to_json_data","(*args, &block)","<p>Convert the receiver to a JSON data structure using the given arguments.\n"],["to_key","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-to_key","()","<p>An array of primary key values, or nil if the object is not persisted.\n"],["to_matrix","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-to_matrix","()","<p>Return a nested array of the receiver, with arrays of 2 element (key/value) arrays:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">to_matrix</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_model","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-to_model","()","<p>With the active_model plugin, Sequel model objects are already compliant, so this returns self.\n"],["to_param","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-to_param","()","<p>An string representing the object&#39;s primary key.  For composite primary keys, joins them with to_param_joiner. …\n"],["to_partial_path","Sequel::Plugins::ActiveModel::InstanceMethods","Sequel/Plugins/ActiveModel/InstanceMethods.html#method-i-to_partial_path","()","<p>Returns a string identifying the path associated with the object.\n"],["to_range","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-to_range","()","<p>Return a ruby Range object for this instance, if one can be created.\n"],["to_record","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-to_record","()","<p>Builds arbitrary record from json object.  You need to define the structure of the record using #as on …\n"],["to_recordset","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-to_recordset","()","<p>Builds arbitrary set of records from json array of objects.  You need to define the structure of the …\n"],["to_s_append","Sequel::Postgres::HStoreSubscriptOp","Sequel/Postgres/HStoreSubscriptOp.html#method-i-to_s_append","(ds, sql)","<p>Use subscripts instead of -&gt; operator on PostgreSQL 14+\n"],["to_s_append","Sequel::Postgres::JSONBSubscriptOp","Sequel/Postgres/JSONBSubscriptOp.html#method-i-to_s_append","(ds, sql)","<p>Use subscripts instead of -&gt; operator on PostgreSQL 14+\n"],["to_s_append","Sequel::SQL::EscapedLikeExpression","Sequel/SQL/EscapedLikeExpression.html#method-i-to_s_append","(ds, sql)","<p>Interpolate the pattern values into the placeholder pattern to get the final pattern, now that we have …\n"],["to_sequel_blob","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-to_sequel_blob","()","<p>Returns a <code>Sequel::SQL::Blob</code> that holds the same data as this string. Blobs provide proper escaping of …\n"],["to_sequel_blob","String","String.html#method-i-to_sequel_blob","()","<p>Returns a <code>Sequel::SQL::Blob</code> that holds the same data as this string. Blobs provide proper escaping of …\n"],["to_sequel_time","String","String.html#method-i-to_sequel_time","()","<p>Converts a string into a Time or DateTime object, depending on the value of Sequel.datetime_class\n"],["to_string","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-to_string","(joiner=\"\", null=nil)","<p>Call the array_to_string method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">join</span>           <span class=\"ruby-comment\"># array_to_string(array, &#39;&#39;)</span>\n<span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">to_string</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_time","String","String.html#method-i-to_time","()","<p>Converts a string into a Time object.\n"],["to_xml","Sequel::Plugins::XmlSerializer::DatasetMethods","Sequel/Plugins/XmlSerializer/DatasetMethods.html#method-i-to_xml","(opts=OPTS)","<p>Return an XML string containing all model objects specified with this dataset.  Takes all of the options …\n"],["to_xml","Sequel::Plugins::XmlSerializer::InstanceMethods","Sequel/Plugins/XmlSerializer/InstanceMethods.html#method-i-to_xml","(opts=OPTS)","<p>Return a string in XML format.  If a block is given, yields the XML builder object so you can add additional …\n"],["touch","Sequel::Plugins::Touch::InstanceMethods","Sequel/Plugins/Touch/InstanceMethods.html#method-i-touch","(column=nil)","<p>Touch the model object.  If a column is not given, use the model&#39;s touch_column as the column.   …\n"],["touch_associations","Sequel::Plugins::Touch::ClassMethods","Sequel/Plugins/Touch/ClassMethods.html#method-i-touch_associations","(*associations)","<p>Add additional associations to be touched.  See the :association option of the Sequel::Plugin::Touch.configure …\n"],["transaction","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-transaction","()","<p>Enable the use of transactions for the related migration\n"],["tree","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-tree","(*args)","<p>Returns an expression for a set of information extracted from the JSON array or object, or the JSON array …\n"],["truncate","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-truncate","()","<p>Return nil without sending a database query.\n"],["type","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-type","(*args)","<p>Returns an expression for the type of the JSON value or the JSON value at the given path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">type</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["typecast","Sequel::Postgres::PGRow::Parser","Sequel/Postgres/PGRow/Parser.html#method-i-typecast","(obj)","<p>Typecast the given object to the appropriate type using the typecaster.  Note that this does not conversion …\n"],["typeof","Sequel::Postgres::JSONBaseOp","Sequel/Postgres/JSONBaseOp.html#method-i-typeof","()","<p>Returns the type of the outermost json value as text.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">json_op</span>.<span class=\"ruby-identifier\">typeof</span> <span class=\"ruby-comment\"># json_typeof(json)</span>\n</pre>\n"],["typeof","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-typeof","(*args)",""],["unbounded_begin?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-unbounded_begin-3F","()","<p>Whether the beginning of the range is unbounded.\n"],["unbounded_end?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-unbounded_end-3F","()","<p>Whether the end of the range is unbounded.\n"],["uncountable","String::Inflections","String/Inflections.html#method-c-uncountable","(*words)","<p>Add uncountable words that shouldn&#39;t be attempted inflected.\n<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">uncountable</span> <span class=\"ruby-string\">&quot;money&quot;</span>\n<span class=\"ruby-identifier\">uncountable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["underscore","String","String.html#method-i-underscore","()","<p>The reverse of camelize. Makes an underscored form from the expression in the string. Also changes &#39;::&#39; …\n"],["unique","Sequel::ConstraintValidations::AlterTableGeneratorMethods","Sequel/ConstraintValidations/AlterTableGeneratorMethods.html#method-i-unique","(*args)","<p>Alias of add_unique_constraint for similarity to create_table generator.\n"],["unnest","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-unnest","(*args)","<p>Call the unnest method:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">unnest</span> <span class=\"ruby-comment\"># unnest(array)</span>\n</pre>\n"],["unquoted_literal","Sequel::Postgres::HStore","Sequel/Postgres/HStore.html#method-i-unquoted_literal","()","<p>Return a string containing the unquoted, unstring-escaped literal version of the hstore.  Separated out …\n"],["unquoted_literal","Sequel::Postgres::PGMultiRange","Sequel/Postgres/PGMultiRange.html#method-i-unquoted_literal","(ds)","<p>Return a string containing the unescaped version of the multirange. Separated out for use by the bound …\n"],["unquoted_literal","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-unquoted_literal","(ds)","<p>Return a string containing the unescaped version of the range. Separated out for use by the bound argument …\n"],["unshift","Sequel::Postgres::ArrayOp","Sequel/Postgres/ArrayOp.html#method-i-unshift","(other)","<p>Use the concatentation (||) operator, reversing the order:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array_op</span>.<span class=\"ruby-identifier\">unshift</span>(<span class=\"ruby-value\">:a</span>) <span class=\"ruby-comment\"># (a || array)</span>\n</pre>\n"],["unused_association_options","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-unused_association_options","(opts=OPTS)","<p>Return an array of unused association options.  These are associations some but not all of the association …\n"],["unused_associations","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-unused_associations","(opts=OPTS)","<p>Return an array of unused associations.  These are associations where none of the association methods …\n"],["up","Sequel::Migration","Sequel/Migration.html#method-i-up","()","<p>The default up action does nothing\n"],["up","Sequel::MigrationDSL","Sequel/MigrationDSL.html#method-i-up","(&block)","<p>Defines the migration&#39;s up action.\n"],["update","Sequel::Dataset::NullDataset","Sequel/Dataset/NullDataset.html#method-i-update","(v=OPTS)","<p>Return 0 without sending a database query.\n"],["update_all","Sequel::Plugins::WhitelistSecurity::InstanceMethods","Sequel/Plugins/WhitelistSecurity/InstanceMethods.html#method-i-update_all","(hash)","<p>Update all values using the entries in the hash, ignoring any setting of <code>allowed_columns</code> in the model. …\n"],["update_associations_coverage","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-update_associations_coverage","(opts=OPTS)","<p>Parse the coverage result, and return the coverage data for the associations for descendants of this …\n"],["update_except","Sequel::Plugins::BlacklistSecurity::InstanceMethods","Sequel/Plugins/BlacklistSecurity/InstanceMethods.html#method-i-update_except","(hash, *except)","<p>Update all values using the entries in the hash, except for the keys given in except.  You should probably …\n"],["update_only","Sequel::Plugins::WhitelistSecurity::InstanceMethods","Sequel/Plugins/WhitelistSecurity/InstanceMethods.html#method-i-update_only","(hash, *only)","<p>Update the values using the entries in the hash, only if the key is included in only.  It may be a better …\n"],["update_or_create","Sequel::Plugins::UpdateOrCreate::ClassMethods","Sequel/Plugins/UpdateOrCreate/ClassMethods.html#method-i-update_or_create","(attrs, set_attrs=nil, &block)","<p>Attempt to find an record with the <code>attrs</code>, which should be a hash with column symbol keys.  If such an …\n"],["update_sql","Sequel::Dataset::AutoLiteralStrings","Sequel/Dataset/AutoLiteralStrings.html#method-i-update_sql","(values=OPTS)","<p>Treat plain strings as literal strings.\n"],["update_unused_associations_data","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-update_unused_associations_data","(options=OPTS)","<p>Parse the coverage data returned by #update_associations_coverage, and return data on unused associations …\n"],["use_transactions","Sequel::Migration","Sequel/Migration.html#method-c-use_transactions","()","<p>Don&#39;t allow transaction overriding in old migrations.\n"],["used_association_reflections","Sequel::Plugins::UnusedAssociations::ClassMethods","Sequel/Plugins/UnusedAssociations/ClassMethods.html#method-i-used_association_reflections","()","<p>Synchronize access to the used association reflections.\n"],["uuid_overwrite?","Sequel::Plugins::Uuid::ClassMethods","Sequel/Plugins/Uuid/ClassMethods.html#method-i-uuid_overwrite-3F","()","<p>Whether to overwrite the create uuid if it already exists\n"],["valid","Sequel::SQLite::JSONOp","Sequel/SQLite/JSONOp.html#method-i-valid","()","<p>Returns a boolean expression for whether the JSON is valid or not.\n"],["valid?","Sequel::Plugins::ThrowFailures::InstanceMethods","Sequel/Plugins/ThrowFailures/InstanceMethods.html#method-i-valid-3F","(opts = OPTS)","<p>Catch any thrown HookFailed exceptions.\n"],["valid_ruby_range?","Sequel::Postgres::PGRange","Sequel/Postgres/PGRange.html#method-i-valid_ruby_range-3F","()","<p>Whether or not this PGRange is a valid ruby range.  In order to be a valid ruby range, it must have a …\n"],["validate","Sequel::ConstraintValidations::CreateTableGeneratorMethods","Sequel/ConstraintValidations/CreateTableGeneratorMethods.html#method-i-validate","(&block)","<p>Call into the validate DSL for creating constraint validations.\n"],["validate","Sequel::Plugins::AutoValidations::InstanceMethods","Sequel/Plugins/AutoValidations/InstanceMethods.html#method-i-validate","()","<p>Validate the model&#39;s auto validations columns\n"],["validate","Sequel::Plugins::ConstraintValidations::InstanceMethods","Sequel/Plugins/ConstraintValidations/InstanceMethods.html#method-i-validate","()","<p>Run all of the constraint validations parsed from the database when validating the instance.\n"],["validate","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validate","(o)","<p>Validates the given instance.\n"],["validate","Sequel::Plugins::ValidationClassMethods::InstanceMethods","Sequel/Plugins/ValidationClassMethods/InstanceMethods.html#method-i-validate","()","<p>Validates the object.\n"],["validates","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates","(&block)","<p>Defines validations by converting a longhand block into a series of  shorthand definitions. For example: …\n"],["validates_acceptance_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_acceptance_of","(*atts)","<p>Validates acceptance of an attribute.  Just checks that the value is equal to the :accept option. This …\n"],["validates_confirmation_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_confirmation_of","(*atts)","<p>Validates confirmation of an attribute. Checks that the object has a _confirmation value matching the …\n"],["validates_each","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_each","(*atts, &block)","<p>Adds a validation for each of the given attributes using the supplied block. The block must accept three …\n"],["validates_exact_length","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_exact_length","(exact, atts, opts=OPTS)","<p>Check that the attribute values are the given exact length.\n"],["validates_format","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_format","(with, atts, opts=OPTS)","<p>Check the string representation of the attribute value(s) against the regular expression with.\n"],["validates_format_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_format_of","(*atts)","<p>Validates the format of an attribute, checking the string representation of the value against the regular …\n"],["validates_includes","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_includes","(set, atts, opts=OPTS)","<p>Check attribute value(s) is included in the given set.\n"],["validates_inclusion_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_inclusion_of","(*atts)","<p>Validates that an attribute is within a specified range or set of values.\n<p>Possible Options:\n<p>:in  &mdash; An array …\n"],["validates_integer","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_integer","(atts, opts=OPTS)","<p>Check attribute value(s) string representation is a valid integer.\n"],["validates_length_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_length_of","(*atts)","<p>Validates the length of an attribute.\n<p>Possible Options:\n<p>:is  &mdash; The exact size required for the value to be …\n"],["validates_length_range","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_length_range","(range, atts, opts=OPTS)","<p>Check that the attribute values length is in the specified range.\n"],["validates_max_length","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_max_length","(max, atts, opts=OPTS)","<p>Check that the attribute values are not longer than the given max length.\n<p>Accepts a :nil_message option …\n"],["validates_min_length","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_min_length","(min, atts, opts=OPTS)","<p>Check that the attribute values are not shorter than the given min length.\n"],["validates_no_null_byte","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_no_null_byte","(atts, opts=OPTS)","<p>Check attribute value(s) does not contain a null (“0”, ASCII NUL) byte.\n"],["validates_not_null","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_not_null","(atts, opts=OPTS)","<p>Check attribute value(s) are not NULL/nil.\n"],["validates_numeric","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_numeric","(atts, opts=OPTS)","<p>Check attribute value(s) string representation is a valid float.\n"],["validates_numericality_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_numericality_of","(*atts)","<p>Validates whether an attribute is a number.\n<p>Possible Options:\n<p>:message  &mdash; The message to use (default: &#39;is …\n"],["validates_operator","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_operator","(operator, rhs, atts, opts=OPTS)","<p>Check attribute value(s) against a specified value and operation, e.g. validates_operator(:&gt;, 3, :value) …\n"],["validates_presence","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_presence","(atts, opts=OPTS)","<p>Check attribute value(s) is not considered blank by the database, but allow false values.\n"],["validates_presence_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_presence_of","(*atts)","<p>Validates the presence of an attribute.  Requires the value not be blank, with false considered present …\n"],["validates_schema_type","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_schema_type","(*atts)","<p>Validates whether an attribute has the correct ruby type for the associated database type.  This is generally …\n"],["validates_schema_types","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_schema_types","(atts=keys, opts=OPTS)","<p>Validates for all of the model columns (or just the given columns) that the column value is an instance …\n"],["validates_type","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_type","(klass, atts, opts=OPTS)","<p>Check if value is an instance of a class.  If <code>klass</code> is an array, the value must be an instance of one …\n"],["validates_unique","Sequel::Plugins::ValidationHelpers::InstanceMethods","Sequel/Plugins/ValidationHelpers/InstanceMethods.html#method-i-validates_unique","(*atts)","<p>Checks that there are no duplicate values in the database for the given attributes.  Pass an array of …\n"],["validates_uniqueness_of","Sequel::Plugins::ValidationClassMethods::ClassMethods","Sequel/Plugins/ValidationClassMethods/ClassMethods.html#method-i-validates_uniqueness_of","(*atts)","<p>Validates only if the fields in the model (specified by atts) are unique in the database.  Pass an array …\n"],["validation","Sequel::ConstraintValidations::CreateTableGeneratorMethods","Sequel/ConstraintValidations/CreateTableGeneratorMethods.html#method-i-validation","(opts)","<p>Add a validation metadata hash to the stored array.\n"],["values","Sequel::Postgres::HStoreOp","Sequel/Postgres/HStoreOp.html#method-i-values","()","<p>Return the values as a PostgreSQL array:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hstore_op</span>.<span class=\"ruby-identifier\">values</span> <span class=\"ruby-comment\"># avals(hstore)</span>\n</pre>\n"],["where","Sequel::Plugins::InvertedSubsets::DatasetModuleMethods","Sequel/Plugins/InvertedSubsets/DatasetModuleMethods.html#method-i-where","(name, *args, &block)","<p>Define a not_ prefixed subset which inverts the subset condition.\n"],["where","Sequel::Plugins::SubsetConditions::DatasetModuleMethods","Sequel/Plugins/SubsetConditions/DatasetModuleMethods.html#method-i-where","(name, *args, &block)","<p>Also create a method that returns the conditions the filter uses.\n"],["will_change_column","Sequel::Plugins::Dirty::InstanceMethods","Sequel/Plugins/Dirty/InstanceMethods.html#method-i-will_change_column","(column)","<p>Manually specify that a column will change.  This should only be used if you plan to modify a column …\n"],["with_comments","Database::SQLComments","Database/SQLComments.html#method-i-with_comments","(comment_hash)","<p>Store the comment hash and use it to create comments inside the block\n"],["with_encrypted_value","Sequel::Plugins::ColumnEncryption::DatasetMethods","Sequel/Plugins/ColumnEncryption/DatasetMethods.html#method-i-with_encrypted_value","(column, value)","<p>Filter the dataset to only match rows where the column contains an encrypted version of value.  Only …\n"],["with_identifier_input_method","Sequel::IdentifierMangling::DatasetMethods","Sequel/IdentifierMangling/DatasetMethods.html#method-i-with_identifier_input_method","(meth)","<p>Return a modified dataset with identifier_input_method set.\n"],["with_identifier_output_method","Sequel::IdentifierMangling::DatasetMethods","Sequel/IdentifierMangling/DatasetMethods.html#method-i-with_identifier_output_method","(meth)","<p>Return a modified dataset with identifier_output_method set.\n"],["with_server","Sequel::ServerBlock","Sequel/ServerBlock.html#method-i-with_server","(default_server, read_only_server=default_server, &block)","<p>Delegate to the connection pool\n"],["with_server","Sequel::ThreadedServerBlock","Sequel/ThreadedServerBlock.html#method-i-with_server","(default_server, read_only_server=default_server)","<p>Set a default server/shard to use inside the block for the current thread.\n"],["with_server","Sequel::UnthreadedServerBlock","Sequel/UnthreadedServerBlock.html#method-i-with_server","(default_server, read_only_server=default_server)","<p>Set a default server/shard to use inside the block.\n"],["with_sql_each","Sequel::GraphEach","Sequel/GraphEach.html#method-i-with_sql_each","(sql)","<p>Call graph_each for graphed datasets that are not being eager graphed.\n"],["with_sql_each","Sequel::Plugins::ForbidLazyLoad::DatasetMethods","Sequel/Plugins/ForbidLazyLoad/DatasetMethods.html#method-i-with_sql_each","(sql)","<p>Mark model instances retrieved in this call as forbidding lazy loading.\n"],["with_sql_first","Sequel::Plugins::ForbidLazyLoad::DatasetMethods","Sequel/Plugins/ForbidLazyLoad/DatasetMethods.html#method-i-with_sql_first","(sql)","<p>Mark model instances retrieved in this call as allowing lazy loading.\n"],["wrap","Sequel::Postgres::PGRowOp","Sequel/Postgres/PGRowOp.html#method-c-wrap","(expr)","<p>Wrap the expression in a PGRowOp, without changing the SQL it would use.\n"],["xml_builder","Sequel::Plugins::XmlSerializer::ClassMethods","Sequel/Plugins/XmlSerializer/ClassMethods.html#method-i-xml_builder","(opts=OPTS)","<p>Return an appropriate Nokogiri::XML::Builder instance used to create the XML.  This should not be used …\n"],["xml_deserialize_name_proc","Sequel::Plugins::XmlSerializer::ClassMethods","Sequel/Plugins/XmlSerializer/ClassMethods.html#method-i-xml_deserialize_name_proc","(opts=OPTS)","<p>Return a proc (or any other object that responds to []), used for formatting XML tag names when serializing …\n"],["xml_serialize_name_proc","Sequel::Plugins::XmlSerializer::ClassMethods","Sequel/Plugins/XmlSerializer/ClassMethods.html#method-i-xml_serialize_name_proc","(opts=OPTS)","<p>Return a proc (or any other object that responds to []), used for formatting XML tag names when serializing …\n"],["|","Hash","Hash.html#method-i-7C","(ce)","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching all of the conditions in this …\n"],["|","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-7C","(ce)","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, matching all of the conditions in this …\n"],["~","Array","Array.html#method-i-~","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, not matching all of the conditions. …\n"],["~","Hash","Hash.html#method-i-~","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this hash, not matching all of the conditions.\n\n<pre>~{a: ...</pre>\n"],["~","Sequel::CoreRefinements","Sequel/CoreRefinements.html#method-i-~","()","<p>Return a <code>Sequel::SQL::BooleanExpression</code> created from this array, not matching all of the conditions. …\n"],["~","Sequel::Postgres::InetOp","Sequel/Postgres/InetOp.html#method-i-~","()","<p>Return an expression for the bitwise NOT of the receiver\n"],["core_extensions","","doc/core_extensions_rdoc.html","","<p>Sequel&#39;s Core Extensions\n<p>Background\n<p>Historically, Sequel added methods to many of the core classes, …\n"]]}}