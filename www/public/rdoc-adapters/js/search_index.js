var search_data = {"index":{"searchIndex":["sequel","ado","access","adoschema","column","databasemethods","dataset","database","dataset","mssql","databasemethods","dataset","access","databasemethods","datasetmethods","amalgalite","database","dataset","sequeltypemap","db2","databasemethods","datasetmethods","database","splitaltertable","dataset","columnslimit1","replace","storedproceduremethods","storedprocedures","emulateoffsetwithreverseandcount","emulateoffsetwithrownumber","ibmdb","connection","error","database","dataset","callablestatementmethods","statement","jdbc","db2","databasemethods","database","dataset","derby","databasemethods","dataset","h2","databasemethods","dataset","hsqldb","databasemethods","dataset","jtds","databasemethods","javasql","mssql","databasemethods","mysql","databasemethods","oracle","databasemethods","dataset","postgres","databasemethods","dataset","sqlserver","databasemethods","metadatadatasetmethods","sqlite","databasemethods","foreignkeylistpragmaconvertorfix","tableinfopragmaconvertorfix","sqlanywhere","databasemethods","dataset","transactions","typeconvertor","mssql","databasemethods","datasetmethods","mock","connection","database","dataset","mysql","database","databasemethods","dataset","datasetmethods","mysqlmysql2","databasemethods","datasetmethods","preparedstatements","databasemethods","datasetmethods","callablestatementmethods","mysql2","database","dataset","odbc","database","dataset","mssql","databasemethods","dataset","oracle","database","databasemethods","dataset","argumentmapper","datasetmethods","postgres","adapter","pgresult","altertablegenerator","createpartitionoftablegenerator","createtablegenerator","database","databasemethods","dataset","argumentmapper","datasetmethods","exclusionconstraintviolation","mockadapterdatabasemethods","sqlite","database","databasemethods","dataset","argumentmapper","datasetmethods","sqlanywhere","database","databasemethods","dataset","datasetmethods","sqlanywhereexception","tinytds","database","dataset","argumentmapper","unmodifiedidentifiers","databasemethods","datasetmethods","[]()","_fetch()","_import()","_import()","add_conversion_proc()","add_conversion_proc()","add_exclusion_constraint()","add_named_conversion_proc()","affected()","allow_null()","allow_regexp?()","alter_table()","analyze()","async_exec()","async_exec_params()","autocommit()","autocommit=()","autoid()","autoid=()","basic_type_convertor()","blob()","block()","boolean()","bound_variable_arg()","bound_variable_arg()","bound_variable_modules()","calc_found_rows()","call()","call_mssql_sproc()","call_procedure()","call_sproc()","call_sproc()","call_sproc()","case_expression_sql_append()","case_expression_sql_append()","cast_sql_append()","cast_sql_append()","cast_sql_append()","cast_sql_append()","cast_type_literal()","cast_type_literal()","check_constraints()","check_disconnect_errors()","close()","columns()","columns!()","commit()","commit_prepared_transaction()","commit_prepared_transaction()","commit_prepared_transaction()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","complex_expression_sql_append()","compound_from_self()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","constant_sql_append()","constant_sql_append()","constant_sql_append()","constant_sql_append()","constant_sql_append()","constant_sql_append()","convert_infinite_timestamps()","convert_infinite_timestamps=()","convert_invalid_date_time=()","convert_serial_to_identity()","convert_smallint_to_bool()","convert_smallint_to_bool()","convert_tinyint_to_bool=()","copy_into()","copy_into()","copy_table()","copy_table()","create_function()","create_language()","create_schema()","create_sequence()","create_table()","create_table?()","create_trigger()","create_trigger()","cross_apply()","cross_apply()","cross_join()","current_user()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","database_type()","datetime()","db2_version()","db_type()","db_version()","decimal()","default()","default()","delete()","delete_from()","disable_insert_output()","disable_insert_returning()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","disconnect_connection()","distinct()","do()","drop_function()","drop_language()","drop_schema()","drop_sequence()","drop_trigger()","empty?()","empty?()","empty?()","error_info()","error_msg()","error_sqlstate()","escape_bytea()","escape_like()","escape_like()","escape_like()","escape_string()","except()","exclude()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute_ddl()","execute_ddl()","execute_ddl()","execute_ddl()","execute_ddl()","execute_ddl()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_dui()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_insert()","execute_prepared()","execute_prepared_statement()","explain()","explain()","explain()","extended()","extended()","fetch_array()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","fetch_rows()","field_name()","field_precision()","field_type()","for_share()","for_share()","foreign_key_list()","foreign_key_list()","foreign_key_list()","foreign_key_list()","foreign_key_list()","foreign_key_list()","foreign_key_list()","foreign_key_list()","foreign_key_list()","free()","free_result()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","from()","full_text_search()","full_text_search()","full_text_search()","full_text_sql()","global_index_namespace?()","global_index_namespace?()","global_index_namespace?()","graph()","h2_version()","hash_values()","having()","indexes()","indexes()","indexes()","indexes()","indexes()","indexes()","indexes()","indexes()","indexes()","insert()","insert()","insert_conflict()","insert_conflict()","insert_ignore()","insert_ignore()","insert_ignore()","insert_select()","insert_select()","insert_select()","insert_select_sql()","insert_select_sql()","insert_select_sql()","inspect()","int()","into()","into()","into()","jndi?()","join_table()","list()","listen()","load_driver()","load_gem()","lock()","locks()","map_to_prepared_args()","map_to_prepared_args()","map_to_prepared_args()","map_to_prepared_args()","mariadb?()","maximum_length()","maxvalue()","minvalue()","mock_adapter_setup()","mock_adapter_setup()","mock_adapter_setup()","mock_adapter_setup()","mock_adapter_setup()","modulus()","mssql_unicode_strings()","multi_replace()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nolock()","notify()","num_fields()","numrows()","offset_strategy()","oid_convertor_proc()","on_duplicate_key_update()","outer_apply()","output()","overriding_system_value()","overriding_user_value()","paged_each()","paged_each()","partition_type()","precision()","prepare()","prepare_sproc()","prepared_arg_placeholder()","prepared_statement_modules()","primary_key()","primary_key()","primary_key_sequence()","provides_accurate_rows_matched?()","provides_accurate_rows_matched?()","quote_identifiers?()","quote_identifiers?()","quoted_identifier_append()","quoted_identifier_append()","quoted_identifier_append()","quoted_identifier_append()","range()","recursive_cte_requires_column_aliases?()","recursive_cte_requires_column_aliases?()","recursive_cte_requires_column_aliases?()","refresh_view()","remainder()","rename_table()","rename_tables()","replace()","replace_sql()","requires_placeholder_type_specifiers?()","requires_sql_standard_datetimes?()","requires_sql_standard_datetimes?()","requires_sql_standard_datetimes?()","reset_primary_key_sequence()","result_value_of()","returning()","returning()","rollback()","rollback_prepared_transaction()","rollback_prepared_transaction()","rollback_prepared_transaction()","run()","scale()","schema_parse_table()","schema_parse_table()","schema_parse_table()","select()","select_sql()","select_sql()","select_sql()","select_sql()","sequel_pg_version_supported?()","sequence()","serial_primary_key_options()","serial_primary_key_options()","serial_primary_key_options()","serial_primary_key_options()","serial_primary_key_options()","server_version()","server_version()","server_version()","server_version()","server_version()","server_version()","server_version()","server_version()","set_integer_booleans()","setup_type_convertor_map()","single_value()","split_multiple_result_sets()","sproc_name()","sqlite_version()","sqls()","status()","stream()","subselect_sql_append()","subselect_sql_append()","supports_create_table_if_not_exists?()","supports_create_table_if_not_exists?()","supports_create_table_if_not_exists?()","supports_create_table_if_not_exists?()","supports_cte?()","supports_cte?()","supports_cte?()","supports_cte?()","supports_cte?()","supports_cte?()","supports_cte?()","supports_cte?()","supports_cte_in_subqueries?()","supports_cte_in_subqueries?()","supports_deferrable_constraints?()","supports_deferrable_constraints?()","supports_deferrable_foreign_key_constraints?()","supports_deferrable_foreign_key_constraints?()","supports_deleting_joins?()","supports_derived_column_lists?()","supports_derived_column_lists?()","supports_derived_column_lists?()","supports_derived_column_lists?()","supports_derived_column_lists?()","supports_distinct_on?()","supports_distinct_on?()","supports_drop_table_if_exists?()","supports_drop_table_if_exists?()","supports_fetch_next_rows?()","supports_generated_columns?()","supports_group_cube?()","supports_group_cube?()","supports_group_cube?()","supports_group_cube?()","supports_group_rollup?()","supports_group_rollup?()","supports_group_rollup?()","supports_group_rollup?()","supports_group_rollup?()","supports_group_rollup?()","supports_grouping_sets?()","supports_grouping_sets?()","supports_grouping_sets?()","supports_grouping_sets?()","supports_grouping_sets?()","supports_insert_conflict?()","supports_insert_select?()","supports_insert_select?()","supports_intersect_except?()","supports_intersect_except?()","supports_intersect_except?()","supports_intersect_except_all?()","supports_intersect_except_all?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_is_true?()","supports_join_using?()","supports_join_using?()","supports_join_using?()","supports_join_using?()","supports_lateral_subqueries?()","supports_lateral_subqueries?()","supports_lateral_subqueries?()","supports_limits_in_correlated_subqueries?()","supports_limits_in_correlated_subqueries?()","supports_modifying_joins?()","supports_modifying_joins?()","supports_modifying_joins?()","supports_modifying_joins?()","supports_multiple_column_in?()","supports_multiple_column_in?()","supports_multiple_column_in?()","supports_multiple_column_in?()","supports_multiple_column_in?()","supports_multiple_column_in?()","supports_multiple_column_in?()","supports_nowait?()","supports_nowait?()","supports_nowait?()","supports_nowait?()","supports_offsets_in_correlated_subqueries?()","supports_offsets_in_correlated_subqueries?()","supports_offsets_in_correlated_subqueries?()","supports_offsets_in_correlated_subqueries?()","supports_ordered_distinct_on?()","supports_output_clause?()","supports_partial_indexes?()","supports_partial_indexes?()","supports_partial_indexes?()","supports_prepared_transactions?()","supports_prepared_transactions?()","supports_prepared_transactions?()","supports_regexp?()","supports_regexp?()","supports_regexp?()","supports_regexp?()","supports_replace?()","supports_returning?()","supports_returning?()","supports_returning?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints_in_prepared_transactions?()","supports_select_all_and_column?()","supports_select_all_and_column?()","supports_skip_locked?()","supports_skip_locked?()","supports_skip_locked?()","supports_skip_locked?()","supports_timestamp_timezones?()","supports_timestamp_timezones?()","supports_timestamp_timezones?()","supports_timestamp_usecs?()","supports_timestamp_usecs?()","supports_timestamp_usecs?()","supports_transaction_isolation_levels?()","supports_transaction_isolation_levels?()","supports_transaction_isolation_levels?()","supports_transaction_isolation_levels?()","supports_transaction_isolation_levels?()","supports_transaction_isolation_levels?()","supports_transactional_ddl?()","supports_transactional_ddl?()","supports_transactional_ddl?()","supports_trigger_conditions?()","supports_where_true?()","supports_where_true?()","supports_where_true?()","supports_where_true?()","supports_where_true?()","supports_window_clause?()","supports_window_clause?()","supports_window_clause?()","supports_window_clause?()","supports_window_function_frame_option?()","supports_window_function_frame_option?()","supports_window_functions?()","supports_window_functions?()","supports_window_functions?()","supports_window_functions?()","supports_window_functions?()","supports_window_functions?()","supports_window_functions?()","svn_version()","table_exists?()","tables()","tables()","tables()","tables()","tables()","tables()","tables()","tables()","tables()","time()","to()","to_application_timestamp()","to_application_timestamp_sa()","to_prepared_statement()","transaction_mode=()","truncate()","truncate()","type_convertor()","type_convertor()","type_convertor()","type_convertor()","type_supported?()","update_ignore()","uri()","use_cursor()","use_timestamp_timezones?()","validate_constraint()","values()","values()","values_in()","view_exists?()","views()","views()","views()","views()","views()","views()","views()","views()","views()","where_current_of()","with_autoid()","with_convert_smallint_to_bool()","with_convert_smallint_to_bool()","with_convert_types()","with_fetch()","with_fetch_size()","with_fetch_size()","with_mssql_unicode_strings()","with_numrows()","with_ties()","with_ties()"],"longSearchIndex":["sequel","sequel::ado","sequel::ado::access","sequel::ado::access::adoschema","sequel::ado::access::adoschema::column","sequel::ado::access::databasemethods","sequel::ado::access::dataset","sequel::ado::database","sequel::ado::dataset","sequel::ado::mssql","sequel::ado::mssql::databasemethods","sequel::ado::mssql::dataset","sequel::access","sequel::access::databasemethods","sequel::access::datasetmethods","sequel::amalgalite","sequel::amalgalite::database","sequel::amalgalite::dataset","sequel::amalgalite::sequeltypemap","sequel::db2","sequel::db2::databasemethods","sequel::db2::datasetmethods","sequel::database","sequel::database::splitaltertable","sequel::dataset","sequel::dataset::columnslimit1","sequel::dataset::replace","sequel::dataset::storedproceduremethods","sequel::dataset::storedprocedures","sequel::emulateoffsetwithreverseandcount","sequel::emulateoffsetwithrownumber","sequel::ibmdb","sequel::ibmdb::connection","sequel::ibmdb::connection::error","sequel::ibmdb::database","sequel::ibmdb::dataset","sequel::ibmdb::dataset::callablestatementmethods","sequel::ibmdb::statement","sequel::jdbc","sequel::jdbc::db2","sequel::jdbc::db2::databasemethods","sequel::jdbc::database","sequel::jdbc::dataset","sequel::jdbc::derby","sequel::jdbc::derby::databasemethods","sequel::jdbc::derby::dataset","sequel::jdbc::h2","sequel::jdbc::h2::databasemethods","sequel::jdbc::h2::dataset","sequel::jdbc::hsqldb","sequel::jdbc::hsqldb::databasemethods","sequel::jdbc::hsqldb::dataset","sequel::jdbc::jtds","sequel::jdbc::jtds::databasemethods","sequel::jdbc::javasql","sequel::jdbc::mssql","sequel::jdbc::mssql::databasemethods","sequel::jdbc::mysql","sequel::jdbc::mysql::databasemethods","sequel::jdbc::oracle","sequel::jdbc::oracle::databasemethods","sequel::jdbc::oracle::dataset","sequel::jdbc::postgres","sequel::jdbc::postgres::databasemethods","sequel::jdbc::postgres::dataset","sequel::jdbc::sqlserver","sequel::jdbc::sqlserver::databasemethods","sequel::jdbc::sqlserver::databasemethods::metadatadatasetmethods","sequel::jdbc::sqlite","sequel::jdbc::sqlite::databasemethods","sequel::jdbc::sqlite::foreignkeylistpragmaconvertorfix","sequel::jdbc::sqlite::tableinfopragmaconvertorfix","sequel::jdbc::sqlanywhere","sequel::jdbc::sqlanywhere::databasemethods","sequel::jdbc::sqlanywhere::dataset","sequel::jdbc::transactions","sequel::jdbc::typeconvertor","sequel::mssql","sequel::mssql::databasemethods","sequel::mssql::datasetmethods","sequel::mock","sequel::mock::connection","sequel::mock::database","sequel::mock::dataset","sequel::mysql","sequel::mysql::database","sequel::mysql::databasemethods","sequel::mysql::dataset","sequel::mysql::datasetmethods","sequel::mysql::mysqlmysql2","sequel::mysql::mysqlmysql2::databasemethods","sequel::mysql::mysqlmysql2::datasetmethods","sequel::mysql::preparedstatements","sequel::mysql::preparedstatements::databasemethods","sequel::mysql::preparedstatements::datasetmethods","sequel::mysql::preparedstatements::datasetmethods::callablestatementmethods","sequel::mysql2","sequel::mysql2::database","sequel::mysql2::dataset","sequel::odbc","sequel::odbc::database","sequel::odbc::dataset","sequel::odbc::mssql","sequel::odbc::mssql::databasemethods","sequel::odbc::mssql::dataset","sequel::oracle","sequel::oracle::database","sequel::oracle::databasemethods","sequel::oracle::dataset","sequel::oracle::dataset::argumentmapper","sequel::oracle::datasetmethods","sequel::postgres","sequel::postgres::adapter","sequel::postgres::adapter::pgresult","sequel::postgres::altertablegenerator","sequel::postgres::createpartitionoftablegenerator","sequel::postgres::createtablegenerator","sequel::postgres::database","sequel::postgres::databasemethods","sequel::postgres::dataset","sequel::postgres::dataset::argumentmapper","sequel::postgres::datasetmethods","sequel::postgres::exclusionconstraintviolation","sequel::postgres::mockadapterdatabasemethods","sequel::sqlite","sequel::sqlite::database","sequel::sqlite::databasemethods","sequel::sqlite::dataset","sequel::sqlite::dataset::argumentmapper","sequel::sqlite::datasetmethods","sequel::sqlanywhere","sequel::sqlanywhere::database","sequel::sqlanywhere::databasemethods","sequel::sqlanywhere::dataset","sequel::sqlanywhere::datasetmethods","sequel::sqlanywhere::sqlanywhereexception","sequel::tinytds","sequel::tinytds::database","sequel::tinytds::dataset","sequel::tinytds::dataset::argumentmapper","sequel::unmodifiedidentifiers","sequel::unmodifiedidentifiers::databasemethods","sequel::unmodifiedidentifiers::datasetmethods","sequel::ado::access::adoschema::column#[]()","sequel::mock::dataset#_fetch()","sequel::mssql::datasetmethods#_import()","sequel::postgres::datasetmethods#_import()","sequel::jdbc::postgres::databasemethods#add_conversion_proc()","sequel::postgres::databasemethods#add_conversion_proc()","sequel::postgres::altertablegenerator#add_exclusion_constraint()","sequel::postgres::databasemethods#add_named_conversion_proc()","sequel::ibmdb::statement#affected()","sequel::ado::access::adoschema::column#allow_null()","sequel::sqlite::database#allow_regexp?()","sequel::ado::access::databasemethods#alter_table()","sequel::postgres::datasetmethods#analyze()","sequel::postgres::adapter#async_exec()","sequel::postgres::adapter#async_exec_params()","sequel::ibmdb::connection#autocommit()","sequel::ibmdb::connection#autocommit=()","sequel::mock::dataset#autoid()","sequel::mock::database#autoid=()","sequel::jdbc::sqlserver::databasemethods::metadatadatasetmethods#basic_type_convertor()","sequel::amalgalite::sequeltypemap#blob()","sequel::postgres::adapter#block()","sequel::ibmdb#boolean()","sequel::postgres::database#bound_variable_arg()","sequel::postgres::mockadapterdatabasemethods#bound_variable_arg()","sequel::postgres::dataset#bound_variable_modules()","sequel::mysql::datasetmethods#calc_found_rows()","sequel::dataset::storedproceduremethods#call()","sequel::mssql::databasemethods#call_mssql_sproc()","sequel::postgres::database#call_procedure()","sequel::dataset::storedprocedures#call_sproc()","sequel::jdbc::database#call_sproc()","sequel::mysql::mysqlmysql2::databasemethods#call_sproc()","sequel::access::datasetmethods#case_expression_sql_append()","sequel::jdbc::derby::dataset#case_expression_sql_append()","sequel::access::datasetmethods#cast_sql_append()","sequel::db2::datasetmethods#cast_sql_append()","sequel::jdbc::derby::dataset#cast_sql_append()","sequel::sqlite::datasetmethods#cast_sql_append()","sequel::jdbc::derby::databasemethods#cast_type_literal()","sequel::mysql::databasemethods#cast_type_literal()","sequel::postgres::databasemethods#check_constraints()","sequel::postgres::adapter#check_disconnect_errors()","sequel::ibmdb::connection#close()","sequel::mock::dataset#columns()","sequel::dataset::columnslimit1#columns!()","sequel::ibmdb::connection#commit()","sequel::jdbc::h2::databasemethods#commit_prepared_transaction()","sequel::mysql::databasemethods#commit_prepared_transaction()","sequel::postgres::databasemethods#commit_prepared_transaction()","sequel::access::datasetmethods#complex_expression_sql_append()","sequel::db2::datasetmethods#complex_expression_sql_append()","sequel::jdbc::derby::dataset#complex_expression_sql_append()","sequel::jdbc::h2::dataset#complex_expression_sql_append()","sequel::jdbc::hsqldb::dataset#complex_expression_sql_append()","sequel::mssql::datasetmethods#complex_expression_sql_append()","sequel::mysql::datasetmethods#complex_expression_sql_append()","sequel::oracle::datasetmethods#complex_expression_sql_append()","sequel::postgres::datasetmethods#complex_expression_sql_append()","sequel::sqlite::dataset#complex_expression_sql_append()","sequel::sqlite::datasetmethods#complex_expression_sql_append()","sequel::sqlanywhere::datasetmethods#complex_expression_sql_append()","sequel::mssql::datasetmethods#compound_from_self()","sequel::ado::database#connect()","sequel::amalgalite::database#connect()","sequel::ibmdb::database#connect()","sequel::jdbc::database#connect()","sequel::mock::database#connect()","sequel::mysql::database#connect()","sequel::mysql2::database#connect()","sequel::odbc::database#connect()","sequel::oracle::database#connect()","sequel::postgres::database#connect()","sequel::sqlite::database#connect()","sequel::sqlanywhere::database#connect()","sequel::tinytds::database#connect()","sequel::access::datasetmethods#constant_sql_append()","sequel::mssql::datasetmethods#constant_sql_append()","sequel::mysql::datasetmethods#constant_sql_append()","sequel::oracle::datasetmethods#constant_sql_append()","sequel::sqlite::datasetmethods#constant_sql_append()","sequel::sqlanywhere::datasetmethods#constant_sql_append()","sequel::postgres::database#convert_infinite_timestamps()","sequel::postgres::database#convert_infinite_timestamps=()","sequel::mysql::database#convert_invalid_date_time=()","sequel::postgres::databasemethods#convert_serial_to_identity()","sequel::ibmdb::dataset#convert_smallint_to_bool()","sequel::sqlanywhere::datasetmethods#convert_smallint_to_bool()","sequel::mysql::database#convert_tinyint_to_bool=()","sequel::jdbc::postgres::databasemethods#copy_into()","sequel::postgres::database#copy_into()","sequel::jdbc::postgres::databasemethods#copy_table()","sequel::postgres::database#copy_table()","sequel::postgres::databasemethods#create_function()","sequel::postgres::databasemethods#create_language()","sequel::postgres::databasemethods#create_schema()","sequel::oracle::databasemethods#create_sequence()","sequel::postgres::databasemethods#create_table()","sequel::postgres::databasemethods#create_table?()","sequel::oracle::databasemethods#create_trigger()","sequel::postgres::databasemethods#create_trigger()","sequel::mssql::datasetmethods#cross_apply()","sequel::sqlanywhere::datasetmethods#cross_apply()","sequel::access::datasetmethods#cross_join()","sequel::oracle::databasemethods#current_user()","sequel::access::databasemethods#database_type()","sequel::amalgalite::database#database_type()","sequel::db2::databasemethods#database_type()","sequel::jdbc::derby::databasemethods#database_type()","sequel::jdbc::h2::databasemethods#database_type()","sequel::jdbc::hsqldb::databasemethods#database_type()","sequel::mssql::databasemethods#database_type()","sequel::mysql::databasemethods#database_type()","sequel::oracle::databasemethods#database_type()","sequel::postgres::databasemethods#database_type()","sequel::sqlite::databasemethods#database_type()","sequel::sqlanywhere::databasemethods#database_type()","sequel::amalgalite::sequeltypemap#datetime()","sequel::db2::databasemethods#db2_version()","sequel::ado::access::adoschema::column#db_type()","sequel::jdbc::hsqldb::databasemethods#db_version()","sequel::amalgalite::sequeltypemap#decimal()","sequel::ado::access::adoschema::column#default()","sequel::postgres::createpartitionoftablegenerator#default()","sequel::sqlite::datasetmethods#delete()","sequel::mysql::datasetmethods#delete_from()","sequel::mssql::datasetmethods#disable_insert_output()","sequel::postgres::datasetmethods#disable_insert_returning()","sequel::ado::access::databasemethods#disconnect_connection()","sequel::ado::database#disconnect_connection()","sequel::jdbc::database#disconnect_connection()","sequel::mock::database#disconnect_connection()","sequel::mysql::database#disconnect_connection()","sequel::odbc::database#disconnect_connection()","sequel::oracle::database#disconnect_connection()","sequel::postgres::database#disconnect_connection()","sequel::sqlite::database#disconnect_connection()","sequel::sqlanywhere::database#disconnect_connection()","sequel::mysql::datasetmethods#distinct()","sequel::postgres::databasemethods#do()","sequel::postgres::databasemethods#drop_function()","sequel::postgres::databasemethods#drop_language()","sequel::postgres::databasemethods#drop_schema()","sequel::oracle::databasemethods#drop_sequence()","sequel::postgres::databasemethods#drop_trigger()","sequel::emulateoffsetwithreverseandcount#empty?()","sequel::emulateoffsetwithrownumber#empty?()","sequel::oracle::datasetmethods#empty?()","sequel::postgres::database#error_info()","sequel::ibmdb::connection#error_msg()","sequel::ibmdb::connection#error_sqlstate()","sequel::postgres::adapter#escape_bytea()","sequel::access::datasetmethods#escape_like()","sequel::mssql::datasetmethods#escape_like()","sequel::sqlanywhere::datasetmethods#escape_like()","sequel::postgres::adapter#escape_string()","sequel::oracle::datasetmethods#except()","sequel::postgres::createtablegenerator#exclude()","sequel::ado::database#execute()","sequel::amalgalite::database#execute()","sequel::ibmdb::connection#execute()","sequel::ibmdb::database#execute()","sequel::ibmdb::statement#execute()","sequel::jdbc::database#execute()","sequel::mock::connection#execute()","sequel::mock::database#execute()","sequel::mysql::mysqlmysql2::databasemethods#execute()","sequel::odbc::database#execute()","sequel::oracle::database#execute()","sequel::postgres::adapter#execute()","sequel::postgres::database#execute()","sequel::sqlite::database#execute()","sequel::sqlanywhere::database#execute()","sequel::tinytds::database#execute()","sequel::ado::database#execute_ddl()","sequel::amalgalite::database#execute_ddl()","sequel::jdbc::database#execute_ddl()","sequel::mock::database#execute_ddl()","sequel::sqlite::database#execute_ddl()","sequel::tinytds::database#execute_ddl()","sequel::ado::database#execute_dui()","sequel::ado::mssql::databasemethods#execute_dui()","sequel::amalgalite::database#execute_dui()","sequel::jdbc::database#execute_dui()","sequel::mock::database#execute_dui()","sequel::mysql::database#execute_dui()","sequel::mysql2::database#execute_dui()","sequel::odbc::database#execute_dui()","sequel::sqlite::database#execute_dui()","sequel::sqlanywhere::database#execute_dui()","sequel::tinytds::database#execute_dui()","sequel::ado::access::databasemethods#execute_insert()","sequel::ado::database#execute_insert()","sequel::amalgalite::database#execute_insert()","sequel::ibmdb::database#execute_insert()","sequel::jdbc::database#execute_insert()","sequel::mock::database#execute_insert()","sequel::mysql::database#execute_insert()","sequel::mysql2::database#execute_insert()","sequel::odbc::mssql::databasemethods#execute_insert()","sequel::oracle::database#execute_insert()","sequel::sqlite::database#execute_insert()","sequel::sqlanywhere::database#execute_insert()","sequel::tinytds::database#execute_insert()","sequel::ibmdb::connection#execute_prepared()","sequel::ibmdb::database#execute_prepared_statement()","sequel::mysql::datasetmethods#explain()","sequel::postgres::datasetmethods#explain()","sequel::sqlite::datasetmethods#explain()","sequel::jdbc::oracle::databasemethods::extended()","sequel::jdbc::postgres::databasemethods::extended()","sequel::ibmdb::statement#fetch_array()","sequel::ado::dataset#fetch_rows()","sequel::amalgalite::dataset#fetch_rows()","sequel::ibmdb::dataset#fetch_rows()","sequel::jdbc::dataset#fetch_rows()","sequel::mock::dataset#fetch_rows()","sequel::mysql::dataset#fetch_rows()","sequel::mysql2::dataset#fetch_rows()","sequel::odbc::dataset#fetch_rows()","sequel::oracle::dataset#fetch_rows()","sequel::postgres::dataset#fetch_rows()","sequel::sqlite::dataset#fetch_rows()","sequel::sqlanywhere::dataset#fetch_rows()","sequel::tinytds::dataset#fetch_rows()","sequel::ibmdb::statement#field_name()","sequel::ibmdb::statement#field_precision()","sequel::ibmdb::statement#field_type()","sequel::mysql::datasetmethods#for_share()","sequel::postgres::datasetmethods#for_share()","sequel::ado::access::databasemethods#foreign_key_list()","sequel::jdbc::database#foreign_key_list()","sequel::jdbc::sqlite::databasemethods#foreign_key_list()","sequel::mssql::databasemethods#foreign_key_list()","sequel::mysql::databasemethods#foreign_key_list()","sequel::oracle::databasemethods#foreign_key_list()","sequel::postgres::databasemethods#foreign_key_list()","sequel::sqlite::databasemethods#foreign_key_list()","sequel::sqlanywhere::databasemethods#foreign_key_list()","sequel::ibmdb::statement#free()","sequel::ibmdb::statement#free_result()","sequel::ado::database#freeze()","sequel::db2::databasemethods#freeze()","sequel::ibmdb::database#freeze()","sequel::jdbc::database#freeze()","sequel::jdbc::derby::databasemethods#freeze()","sequel::jdbc::h2::databasemethods#freeze()","sequel::jdbc::hsqldb::databasemethods#freeze()","sequel::jdbc::transactions#freeze()","sequel::mssql::databasemethods#freeze()","sequel::mysql::database#freeze()","sequel::mysql::databasemethods#freeze()","sequel::mysql2::database#freeze()","sequel::oracle::database#freeze()","sequel::oracle::databasemethods#freeze()","sequel::postgres::databasemethods#freeze()","sequel::sqlite::database#freeze()","sequel::sqlite::databasemethods#freeze()","sequel::sqlanywhere::database#freeze()","sequel::sqlanywhere::databasemethods#freeze()","sequel::postgres::createpartitionoftablegenerator#from()","sequel::mssql::datasetmethods#full_text_search()","sequel::mysql::datasetmethods#full_text_search()","sequel::postgres::datasetmethods#full_text_search()","sequel::mysql::datasetmethods#full_text_sql()","sequel::mssql::databasemethods#global_index_namespace?()","sequel::mysql::databasemethods#global_index_namespace?()","sequel::oracle::databasemethods#global_index_namespace?()","sequel::mysql::dataset#graph()","sequel::jdbc::h2::databasemethods#h2_version()","sequel::postgres::createpartitionoftablegenerator#hash_values()","sequel::sqlite::datasetmethods#having()","sequel::ado::access::databasemethods#indexes()","sequel::db2::databasemethods#indexes()","sequel::jdbc::database#indexes()","sequel::jdbc::sqlite::databasemethods#indexes()","sequel::mssql::databasemethods#indexes()","sequel::mysql::databasemethods#indexes()","sequel::postgres::databasemethods#indexes()","sequel::sqlite::databasemethods#indexes()","sequel::sqlanywhere::databasemethods#indexes()","sequel::ado::mssql::dataset#insert()","sequel::postgres::datasetmethods#insert()","sequel::postgres::datasetmethods#insert_conflict()","sequel::sqlite::datasetmethods#insert_conflict()","sequel::mysql::datasetmethods#insert_ignore()","sequel::postgres::datasetmethods#insert_ignore()","sequel::sqlite::datasetmethods#insert_ignore()","sequel::mssql::datasetmethods#insert_select()","sequel::postgres::datasetmethods#insert_select()","sequel::sqlite::datasetmethods#insert_select()","sequel::mssql::datasetmethods#insert_select_sql()","sequel::postgres::datasetmethods#insert_select_sql()","sequel::sqlite::datasetmethods#insert_select_sql()","sequel::dataset::storedproceduremethods#inspect()","sequel::ibmdb#int()","sequel::access::datasetmethods#into()","sequel::mssql::datasetmethods#into()","sequel::sqlanywhere::datasetmethods#into()","sequel::jdbc::database#jndi?()","sequel::postgres::datasetmethods#join_table()","sequel::postgres::createpartitionoftablegenerator#list()","sequel::postgres::database#listen()","sequel::jdbc::load_driver()","sequel::jdbc::load_gem()","sequel::postgres::datasetmethods#lock()","sequel::postgres::databasemethods#locks()","sequel::oracle::dataset::argumentmapper#map_to_prepared_args()","sequel::postgres::dataset::argumentmapper#map_to_prepared_args()","sequel::sqlite::dataset::argumentmapper#map_to_prepared_args()","sequel::tinytds::dataset::argumentmapper#map_to_prepared_args()","sequel::mysql::databasemethods#mariadb?()","sequel::ado::access::adoschema::column#maximum_length()","sequel::postgres::createpartitionoftablegenerator#maxvalue()","sequel::postgres::createpartitionoftablegenerator#minvalue()","sequel::mssql::mock_adapter_setup()","sequel::mysql::mock_adapter_setup()","sequel::oracle::mock_adapter_setup()","sequel::postgres::mock_adapter_setup()","sequel::sqlite::mock_adapter_setup()","sequel::postgres::createpartitionoftablegenerator#modulus()","sequel::mssql::datasetmethods#mssql_unicode_strings()","sequel::dataset::replace#multi_replace()","sequel::ado::access::adoschema::new()","sequel::ado::access::adoschema::column::new()","sequel::amalgalite::sequeltypemap::new()","sequel::ibmdb::connection::new()","sequel::ibmdb::connection::error::new()","sequel::ibmdb::statement::new()","sequel::mock::connection::new()","sequel::postgres::createpartitionoftablegenerator::new()","sequel::sqlite::database::new()","sequel::sqlanywhere::sqlanywhereexception::new()","sequel::mssql::datasetmethods#nolock()","sequel::postgres::databasemethods#notify()","sequel::ibmdb::statement#num_fields()","sequel::mock::dataset#numrows()","sequel::db2::databasemethods#offset_strategy()","sequel::jdbc::postgres::databasemethods#oid_convertor_proc()","sequel::mysql::datasetmethods#on_duplicate_key_update()","sequel::mssql::datasetmethods#outer_apply()","sequel::mssql::datasetmethods#output()","sequel::postgres::datasetmethods#overriding_system_value()","sequel::postgres::datasetmethods#overriding_user_value()","sequel::mysql2::dataset#paged_each()","sequel::postgres::dataset#paged_each()","sequel::postgres::createpartitionoftablegenerator#partition_type()","sequel::ado::access::adoschema::column#precision()","sequel::ibmdb::connection#prepare()","sequel::dataset::storedprocedures#prepare_sproc()","sequel::postgres::dataset#prepared_arg_placeholder()","sequel::postgres::dataset#prepared_statement_modules()","sequel::postgres::databasemethods#primary_key()","sequel::postgres::mockadapterdatabasemethods#primary_key()","sequel::postgres::databasemethods#primary_key_sequence()","sequel::ado::dataset#provides_accurate_rows_matched?()","sequel::ado::mssql::dataset#provides_accurate_rows_matched?()","sequel::db2::datasetmethods#quote_identifiers?()","sequel::mock::dataset#quote_identifiers?()","sequel::access::datasetmethods#quoted_identifier_append()","sequel::mssql::datasetmethods#quoted_identifier_append()","sequel::mysql::datasetmethods#quoted_identifier_append()","sequel::sqlite::datasetmethods#quoted_identifier_append()","sequel::postgres::createpartitionoftablegenerator#range()","sequel::jdbc::hsqldb::dataset#recursive_cte_requires_column_aliases?()","sequel::oracle::datasetmethods#recursive_cte_requires_column_aliases?()","sequel::sqlanywhere::datasetmethods#recursive_cte_requires_column_aliases?()","sequel::postgres::databasemethods#refresh_view()","sequel::postgres::createpartitionoftablegenerator#remainder()","sequel::access::databasemethods#rename_table()","sequel::mysql::databasemethods#rename_tables()","sequel::dataset::replace#replace()","sequel::dataset::replace#replace_sql()","sequel::oracle::dataset#requires_placeholder_type_specifiers?()","sequel::jdbc::h2::dataset#requires_sql_standard_datetimes?()","sequel::jdbc::hsqldb::dataset#requires_sql_standard_datetimes?()","sequel::oracle::datasetmethods#requires_sql_standard_datetimes?()","sequel::postgres::databasemethods#reset_primary_key_sequence()","sequel::amalgalite::sequeltypemap#result_value_of()","sequel::mssql::datasetmethods#returning()","sequel::sqlite::datasetmethods#returning()","sequel::ibmdb::connection#rollback()","sequel::jdbc::h2::databasemethods#rollback_prepared_transaction()","sequel::mysql::databasemethods#rollback_prepared_transaction()","sequel::postgres::databasemethods#rollback_prepared_transaction()","sequel::dataset::storedproceduremethods#run()","sequel::ado::access::adoschema::column#scale()","sequel::db2::databasemethods#schema_parse_table()","sequel::sqlite#schema_parse_table()","sequel::sqlanywhere::databasemethods#schema_parse_table()","sequel::sqlite::datasetmethods#select()","sequel::emulateoffsetwithreverseandcount#select_sql()","sequel::emulateoffsetwithrownumber#select_sql()","sequel::mssql::datasetmethods#select_sql()","sequel::oracle::datasetmethods#select_sql()","sequel::postgres::sequel_pg_version_supported?()","sequel::oracle::datasetmethods#sequence()","sequel::access::databasemethods#serial_primary_key_options()","sequel::jdbc::derby::databasemethods#serial_primary_key_options()","sequel::jdbc::h2::databasemethods#serial_primary_key_options()","sequel::jdbc::hsqldb::databasemethods#serial_primary_key_options()","sequel::postgres::databasemethods#serial_primary_key_options()","sequel::db2::databasemethods#server_version()","sequel::mssql::databasemethods#server_version()","sequel::mssql::datasetmethods#server_version()","sequel::mysql::databasemethods#server_version()","sequel::mysql2::database#server_version()","sequel::oracle::databasemethods#server_version()","sequel::oracle::datasetmethods#server_version()","sequel::postgres::databasemethods#server_version()","sequel::sqlite::databasemethods#set_integer_booleans()","sequel::jdbc::sqlserver::databasemethods#setup_type_convertor_map()","sequel::amalgalite::database#single_value()","sequel::mysql::dataset#split_multiple_result_sets()","sequel::dataset::storedproceduremethods#sproc_name()","sequel::sqlite::databasemethods#sqlite_version()","sequel::mock::database#sqls()","sequel::postgres::adapter#status()","sequel::mysql2::dataset#stream()","sequel::ibmdb::dataset::callablestatementmethods#subselect_sql_append()","sequel::mysql::preparedstatements::datasetmethods::callablestatementmethods#subselect_sql_append()","sequel::jdbc::h2::databasemethods#supports_create_table_if_not_exists?()","sequel::mysql::databasemethods#supports_create_table_if_not_exists?()","sequel::postgres::databasemethods#supports_create_table_if_not_exists?()","sequel::sqlite::databasemethods#supports_create_table_if_not_exists?()","sequel::db2::datasetmethods#supports_cte?()","sequel::jdbc::hsqldb::dataset#supports_cte?()","sequel::mssql::datasetmethods#supports_cte?()","sequel::mysql::datasetmethods#supports_cte?()","sequel::oracle::datasetmethods#supports_cte?()","sequel::postgres::datasetmethods#supports_cte?()","sequel::sqlite::datasetmethods#supports_cte?()","sequel::sqlanywhere::datasetmethods#supports_cte?()","sequel::postgres::datasetmethods#supports_cte_in_subqueries?()","sequel::sqlite::datasetmethods#supports_cte_in_subqueries?()","sequel::oracle::databasemethods#supports_deferrable_constraints?()","sequel::postgres::databasemethods#supports_deferrable_constraints?()","sequel::postgres::databasemethods#supports_deferrable_foreign_key_constraints?()","sequel::sqlite::databasemethods#supports_deferrable_foreign_key_constraints?()","sequel::sqlite::datasetmethods#supports_deleting_joins?()","sequel::access::datasetmethods#supports_derived_column_lists?()","sequel::jdbc::h2::dataset#supports_derived_column_lists?()","sequel::mysql::datasetmethods#supports_derived_column_lists?()","sequel::oracle::datasetmethods#supports_derived_column_lists?()","sequel::sqlite::datasetmethods#supports_derived_column_lists?()","sequel::mysql::datasetmethods#supports_distinct_on?()","sequel::postgres::datasetmethods#supports_distinct_on?()","sequel::jdbc::hsqldb::databasemethods#supports_drop_table_if_exists?()","sequel::postgres::databasemethods#supports_drop_table_if_exists?()","sequel::oracle::datasetmethods#supports_fetch_next_rows?()","sequel::mysql::databasemethods#supports_generated_columns?()","sequel::db2::datasetmethods#supports_group_cube?()","sequel::mssql::datasetmethods#supports_group_cube?()","sequel::oracle::datasetmethods#supports_group_cube?()","sequel::postgres::datasetmethods#supports_group_cube?()","sequel::db2::datasetmethods#supports_group_rollup?()","sequel::jdbc::derby::dataset#supports_group_rollup?()","sequel::mssql::datasetmethods#supports_group_rollup?()","sequel::mysql::datasetmethods#supports_group_rollup?()","sequel::oracle::datasetmethods#supports_group_rollup?()","sequel::postgres::datasetmethods#supports_group_rollup?()","sequel::db2::datasetmethods#supports_grouping_sets?()","sequel::mssql::datasetmethods#supports_grouping_sets?()","sequel::oracle::datasetmethods#supports_grouping_sets?()","sequel::postgres::datasetmethods#supports_grouping_sets?()","sequel::sqlanywhere::datasetmethods#supports_grouping_sets?()","sequel::postgres::datasetmethods#supports_insert_conflict?()","sequel::mssql::datasetmethods#supports_insert_select?()","sequel::postgres::datasetmethods#supports_insert_select?()","sequel::access::datasetmethods#supports_intersect_except?()","sequel::mssql::datasetmethods#supports_intersect_except?()","sequel::mysql::datasetmethods#supports_intersect_except?()","sequel::oracle::datasetmethods#supports_intersect_except_all?()","sequel::sqlite::datasetmethods#supports_intersect_except_all?()","sequel::access::datasetmethods#supports_is_true?()","sequel::db2::datasetmethods#supports_is_true?()","sequel::jdbc::derby::dataset#supports_is_true?()","sequel::jdbc::h2::dataset#supports_is_true?()","sequel::jdbc::hsqldb::dataset#supports_is_true?()","sequel::mssql::datasetmethods#supports_is_true?()","sequel::oracle::datasetmethods#supports_is_true?()","sequel::sqlite::datasetmethods#supports_is_true?()","sequel::sqlanywhere::datasetmethods#supports_is_true?()","sequel::access::datasetmethods#supports_join_using?()","sequel::jdbc::h2::dataset#supports_join_using?()","sequel::mssql::datasetmethods#supports_join_using?()","sequel::sqlanywhere::datasetmethods#supports_join_using?()","sequel::db2::datasetmethods#supports_lateral_subqueries?()","sequel::jdbc::hsqldb::dataset#supports_lateral_subqueries?()","sequel::postgres::datasetmethods#supports_lateral_subqueries?()","sequel::mysql::datasetmethods#supports_limits_in_correlated_subqueries?()","sequel::oracle::datasetmethods#supports_limits_in_correlated_subqueries?()","sequel::mssql::datasetmethods#supports_modifying_joins?()","sequel::mysql::datasetmethods#supports_modifying_joins?()","sequel::postgres::datasetmethods#supports_modifying_joins?()","sequel::sqlite::datasetmethods#supports_modifying_joins?()","sequel::access::datasetmethods#supports_multiple_column_in?()","sequel::db2::datasetmethods#supports_multiple_column_in?()","sequel::jdbc::derby::dataset#supports_multiple_column_in?()","sequel::jdbc::h2::dataset#supports_multiple_column_in?()","sequel::mssql::datasetmethods#supports_multiple_column_in?()","sequel::sqlite::datasetmethods#supports_multiple_column_in?()","sequel::sqlanywhere::datasetmethods#supports_multiple_column_in?()","sequel::mssql::datasetmethods#supports_nowait?()","sequel::mysql::datasetmethods#supports_nowait?()","sequel::oracle::datasetmethods#supports_nowait?()","sequel::postgres::datasetmethods#supports_nowait?()","sequel::emulateoffsetwithreverseandcount#supports_offsets_in_correlated_subqueries?()","sequel::emulateoffsetwithrownumber#supports_offsets_in_correlated_subqueries?()","sequel::mssql::datasetmethods#supports_offsets_in_correlated_subqueries?()","sequel::oracle::datasetmethods#supports_offsets_in_correlated_subqueries?()","sequel::mysql::datasetmethods#supports_ordered_distinct_on?()","sequel::mssql::datasetmethods#supports_output_clause?()","sequel::mssql::databasemethods#supports_partial_indexes?()","sequel::postgres::databasemethods#supports_partial_indexes?()","sequel::sqlite::databasemethods#supports_partial_indexes?()","sequel::jdbc::h2::databasemethods#supports_prepared_transactions?()","sequel::mysql::databasemethods#supports_prepared_transactions?()","sequel::postgres::databasemethods#supports_prepared_transactions?()","sequel::mysql::datasetmethods#supports_regexp?()","sequel::oracle::datasetmethods#supports_regexp?()","sequel::postgres::datasetmethods#supports_regexp?()","sequel::sqlite::dataset#supports_regexp?()","sequel::dataset::replace#supports_replace?()","sequel::mssql::datasetmethods#supports_returning?()","sequel::postgres::datasetmethods#supports_returning?()","sequel::sqlite::datasetmethods#supports_returning?()","sequel::jdbc::h2::databasemethods#supports_savepoints?()","sequel::jdbc::transactions#supports_savepoints?()","sequel::mssql::databasemethods#supports_savepoints?()","sequel::mock::database#supports_savepoints?()","sequel::mysql::databasemethods#supports_savepoints?()","sequel::postgres::databasemethods#supports_savepoints?()","sequel::sqlite::databasemethods#supports_savepoints?()","sequel::mysql::databasemethods#supports_savepoints_in_prepared_transactions?()","sequel::db2::datasetmethods#supports_select_all_and_column?()","sequel::oracle::datasetmethods#supports_select_all_and_column?()","sequel::mssql::datasetmethods#supports_skip_locked?()","sequel::mysql::datasetmethods#supports_skip_locked?()","sequel::oracle::datasetmethods#supports_skip_locked?()","sequel::postgres::datasetmethods#supports_skip_locked?()","sequel::oracle::datasetmethods#supports_timestamp_timezones?()","sequel::postgres::datasetmethods#supports_timestamp_timezones?()","sequel::sqlite::datasetmethods#supports_timestamp_timezones?()","sequel::mysql::databasemethods#supports_timestamp_usecs?()","sequel::mysql::datasetmethods#supports_timestamp_usecs?()","sequel::sqlanywhere::datasetmethods#supports_timestamp_usecs?()","sequel::db2::databasemethods#supports_transaction_isolation_levels?()","sequel::jdbc::transactions#supports_transaction_isolation_levels?()","sequel::mssql::databasemethods#supports_transaction_isolation_levels?()","sequel::mysql::databasemethods#supports_transaction_isolation_levels?()","sequel::oracle::databasemethods#supports_transaction_isolation_levels?()","sequel::postgres::databasemethods#supports_transaction_isolation_levels?()","sequel::jdbc::derby::databasemethods#supports_transactional_ddl?()","sequel::mssql::databasemethods#supports_transactional_ddl?()","sequel::postgres::databasemethods#supports_transactional_ddl?()","sequel::postgres::databasemethods#supports_trigger_conditions?()","sequel::db2::datasetmethods#supports_where_true?()","sequel::mssql::datasetmethods#supports_where_true?()","sequel::oracle::datasetmethods#supports_where_true?()","sequel::sqlite::datasetmethods#supports_where_true?()","sequel::sqlanywhere::datasetmethods#supports_where_true?()","sequel::mysql::datasetmethods#supports_window_clause?()","sequel::postgres::datasetmethods#supports_window_clause?()","sequel::sqlite::datasetmethods#supports_window_clause?()","sequel::sqlanywhere::datasetmethods#supports_window_clause?()","sequel::postgres::datasetmethods#supports_window_function_frame_option?()","sequel::sqlite::datasetmethods#supports_window_function_frame_option?()","sequel::db2::datasetmethods#supports_window_functions?()","sequel::mssql::datasetmethods#supports_window_functions?()","sequel::mysql::datasetmethods#supports_window_functions?()","sequel::oracle::datasetmethods#supports_window_functions?()","sequel::postgres::datasetmethods#supports_window_functions?()","sequel::sqlite::datasetmethods#supports_window_functions?()","sequel::sqlanywhere::datasetmethods#supports_window_functions?()","sequel::jdbc::derby::databasemethods#svn_version()","sequel::db2::databasemethods#table_exists?()","sequel::ado::access::databasemethods#tables()","sequel::db2::databasemethods#tables()","sequel::jdbc::database#tables()","sequel::mssql::databasemethods#tables()","sequel::mysql::databasemethods#tables()","sequel::oracle::databasemethods#tables()","sequel::postgres::databasemethods#tables()","sequel::sqlite::databasemethods#tables()","sequel::sqlanywhere::databasemethods#tables()","sequel::amalgalite::sequeltypemap#time()","sequel::postgres::createpartitionoftablegenerator#to()","sequel::sqlite::database#to_application_timestamp()","sequel::sqlanywhere::databasemethods#to_application_timestamp_sa()","sequel::postgres::datasetmethods#to_prepared_statement()","sequel::sqlite::databasemethods#transaction_mode=()","sequel::access::datasetmethods#truncate()","sequel::postgres::datasetmethods#truncate()","sequel::jdbc::oracle::dataset#type_convertor()","sequel::jdbc::sqlserver::databasemethods::metadatadatasetmethods#type_convertor()","sequel::jdbc::sqlite::foreignkeylistpragmaconvertorfix#type_convertor()","sequel::jdbc::sqlite::tableinfopragmaconvertorfix#type_convertor()","sequel::postgres::databasemethods#type_supported?()","sequel::mysql::datasetmethods#update_ignore()","sequel::jdbc::database#uri()","sequel::postgres::dataset#use_cursor()","sequel::sqlite::databasemethods#use_timestamp_timezones?()","sequel::postgres::altertablegenerator#validate_constraint()","sequel::postgres::databasemethods#values()","sequel::sqlite::databasemethods#values()","sequel::postgres::createpartitionoftablegenerator#values_in()","sequel::oracle::databasemethods#view_exists?()","sequel::ado::access::databasemethods#views()","sequel::db2::databasemethods#views()","sequel::jdbc::database#views()","sequel::mssql::databasemethods#views()","sequel::mysql::databasemethods#views()","sequel::oracle::databasemethods#views()","sequel::postgres::databasemethods#views()","sequel::sqlite::databasemethods#views()","sequel::sqlanywhere::databasemethods#views()","sequel::postgres::dataset#where_current_of()","sequel::mock::dataset#with_autoid()","sequel::ibmdb::dataset#with_convert_smallint_to_bool()","sequel::sqlanywhere::datasetmethods#with_convert_smallint_to_bool()","sequel::jdbc::dataset#with_convert_types()","sequel::mock::dataset#with_fetch()","sequel::jdbc::dataset#with_fetch_size()","sequel::jdbc::postgres::dataset#with_fetch_size()","sequel::mssql::datasetmethods#with_mssql_unicode_strings()","sequel::mock::dataset#with_numrows()","sequel::mssql::datasetmethods#with_ties()","sequel::postgres::datasetmethods#with_ties()"],"info":[["Sequel","","Sequel.html","",""],["Sequel::ADO","","Sequel/ADO.html","","<p>The ADO adapter provides connectivity to ADO databases in Windows.\n"],["Sequel::ADO::Access","","Sequel/ADO/Access.html","","<p>Database and Dataset instance methods for Access specific support via ADO.\n"],["Sequel::ADO::Access::AdoSchema","","Sequel/ADO/Access/AdoSchema.html","",""],["Sequel::ADO::Access::AdoSchema::Column","","Sequel/ADO/Access/AdoSchema/Column.html","",""],["Sequel::ADO::Access::DatabaseMethods","","Sequel/ADO/Access/DatabaseMethods.html","",""],["Sequel::ADO::Access::Dataset","","Sequel/ADO/Access/Dataset.html","",""],["Sequel::ADO::Database","","Sequel/ADO/Database.html","",""],["Sequel::ADO::Dataset","","Sequel/ADO/Dataset.html","",""],["Sequel::ADO::MSSQL","","Sequel/ADO/MSSQL.html","",""],["Sequel::ADO::MSSQL::DatabaseMethods","","Sequel/ADO/MSSQL/DatabaseMethods.html","",""],["Sequel::ADO::MSSQL::Dataset","","Sequel/ADO/MSSQL/Dataset.html","",""],["Sequel::Access","","Sequel/Access.html","",""],["Sequel::Access::DatabaseMethods","","Sequel/Access/DatabaseMethods.html","",""],["Sequel::Access::DatasetMethods","","Sequel/Access/DatasetMethods.html","",""],["Sequel::Amalgalite","","Sequel/Amalgalite.html","",""],["Sequel::Amalgalite::Database","","Sequel/Amalgalite/Database.html","",""],["Sequel::Amalgalite::Dataset","","Sequel/Amalgalite/Dataset.html","",""],["Sequel::Amalgalite::SequelTypeMap","","Sequel/Amalgalite/SequelTypeMap.html","","<p>Type conversion map class for Sequel&#39;s use of Amalgamite\n"],["Sequel::DB2","","Sequel/DB2.html","",""],["Sequel::DB2::DatabaseMethods","","Sequel/DB2/DatabaseMethods.html","",""],["Sequel::DB2::DatasetMethods","","Sequel/DB2/DatasetMethods.html","",""],["Sequel::Database","","Sequel/Database.html","",""],["Sequel::Database::SplitAlterTable","","Sequel/Database/SplitAlterTable.html","",""],["Sequel::Dataset","","Sequel/Dataset.html","",""],["Sequel::Dataset::ColumnsLimit1","","Sequel/Dataset/ColumnsLimit1.html","",""],["Sequel::Dataset::Replace","","Sequel/Dataset/Replace.html","",""],["Sequel::Dataset::StoredProcedureMethods","","Sequel/Dataset/StoredProcedureMethods.html","",""],["Sequel::Dataset::StoredProcedures","","Sequel/Dataset/StoredProcedures.html","",""],["Sequel::EmulateOffsetWithReverseAndCount","","Sequel/EmulateOffsetWithReverseAndCount.html","",""],["Sequel::EmulateOffsetWithRowNumber","","Sequel/EmulateOffsetWithRowNumber.html","",""],["Sequel::IBMDB","","Sequel/IBMDB.html","",""],["Sequel::IBMDB::Connection","","Sequel/IBMDB/Connection.html","","<p>Wraps an underlying connection to DB2 using IBM_DB, to provide a more rubyish API.\n"],["Sequel::IBMDB::Connection::Error","","Sequel/IBMDB/Connection/Error.html","","<p>Error class for exceptions raised by the connection.\n"],["Sequel::IBMDB::Database","","Sequel/IBMDB/Database.html","",""],["Sequel::IBMDB::Dataset","","Sequel/IBMDB/Dataset.html","",""],["Sequel::IBMDB::Dataset::CallableStatementMethods","","Sequel/IBMDB/Dataset/CallableStatementMethods.html","",""],["Sequel::IBMDB::Statement","","Sequel/IBMDB/Statement.html","","<p>Wraps results returned by queries on IBM_DB.\n"],["Sequel::JDBC","","Sequel/JDBC.html","",""],["Sequel::JDBC::DB2","","Sequel/JDBC/DB2.html","",""],["Sequel::JDBC::DB2::DatabaseMethods","","Sequel/JDBC/DB2/DatabaseMethods.html","",""],["Sequel::JDBC::Database","","Sequel/JDBC/Database.html","",""],["Sequel::JDBC::Dataset","","Sequel/JDBC/Dataset.html","",""],["Sequel::JDBC::Derby","","Sequel/JDBC/Derby.html","",""],["Sequel::JDBC::Derby::DatabaseMethods","","Sequel/JDBC/Derby/DatabaseMethods.html","",""],["Sequel::JDBC::Derby::Dataset","","Sequel/JDBC/Derby/Dataset.html","",""],["Sequel::JDBC::H2","","Sequel/JDBC/H2.html","",""],["Sequel::JDBC::H2::DatabaseMethods","","Sequel/JDBC/H2/DatabaseMethods.html","",""],["Sequel::JDBC::H2::Dataset","","Sequel/JDBC/H2/Dataset.html","",""],["Sequel::JDBC::HSQLDB","","Sequel/JDBC/HSQLDB.html","",""],["Sequel::JDBC::HSQLDB::DatabaseMethods","","Sequel/JDBC/HSQLDB/DatabaseMethods.html","",""],["Sequel::JDBC::HSQLDB::Dataset","","Sequel/JDBC/HSQLDB/Dataset.html","",""],["Sequel::JDBC::JTDS","","Sequel/JDBC/JTDS.html","",""],["Sequel::JDBC::JTDS::DatabaseMethods","","Sequel/JDBC/JTDS/DatabaseMethods.html","",""],["Sequel::JDBC::JavaSQL","","Sequel/JDBC/JavaSQL.html","","<p>Make it accesing the java.sql hierarchy more ruby friendly.\n"],["Sequel::JDBC::MSSQL","","Sequel/JDBC/MSSQL.html","",""],["Sequel::JDBC::MSSQL::DatabaseMethods","","Sequel/JDBC/MSSQL/DatabaseMethods.html","",""],["Sequel::JDBC::MySQL","","Sequel/JDBC/MySQL.html","",""],["Sequel::JDBC::MySQL::DatabaseMethods","","Sequel/JDBC/MySQL/DatabaseMethods.html","",""],["Sequel::JDBC::Oracle","","Sequel/JDBC/Oracle.html","",""],["Sequel::JDBC::Oracle::DatabaseMethods","","Sequel/JDBC/Oracle/DatabaseMethods.html","",""],["Sequel::JDBC::Oracle::Dataset","","Sequel/JDBC/Oracle/Dataset.html","",""],["Sequel::JDBC::Postgres","","Sequel/JDBC/Postgres.html","",""],["Sequel::JDBC::Postgres::DatabaseMethods","","Sequel/JDBC/Postgres/DatabaseMethods.html","",""],["Sequel::JDBC::Postgres::Dataset","","Sequel/JDBC/Postgres/Dataset.html","",""],["Sequel::JDBC::SQLServer","","Sequel/JDBC/SQLServer.html","",""],["Sequel::JDBC::SQLServer::DatabaseMethods","","Sequel/JDBC/SQLServer/DatabaseMethods.html","",""],["Sequel::JDBC::SQLServer::DatabaseMethods::MetadataDatasetMethods","","Sequel/JDBC/SQLServer/DatabaseMethods/MetadataDatasetMethods.html","","<p>Work around a bug in SQL Server JDBC Driver 3.0, where the metadata for the getColumns result set specifies …\n"],["Sequel::JDBC::SQLite","","Sequel/JDBC/SQLite.html","",""],["Sequel::JDBC::SQLite::DatabaseMethods","","Sequel/JDBC/SQLite/DatabaseMethods.html","",""],["Sequel::JDBC::SQLite::ForeignKeyListPragmaConvertorFix","","Sequel/JDBC/SQLite/ForeignKeyListPragmaConvertorFix.html","",""],["Sequel::JDBC::SQLite::TableInfoPragmaConvertorFix","","Sequel/JDBC/SQLite/TableInfoPragmaConvertorFix.html","",""],["Sequel::JDBC::SqlAnywhere","","Sequel/JDBC/SqlAnywhere.html","",""],["Sequel::JDBC::SqlAnywhere::DatabaseMethods","","Sequel/JDBC/SqlAnywhere/DatabaseMethods.html","",""],["Sequel::JDBC::SqlAnywhere::Dataset","","Sequel/JDBC/SqlAnywhere/Dataset.html","",""],["Sequel::JDBC::Transactions","","Sequel/JDBC/Transactions.html","",""],["Sequel::JDBC::TypeConvertor","","Sequel/JDBC/TypeConvertor.html","",""],["Sequel::MSSQL","","Sequel/MSSQL.html","",""],["Sequel::MSSQL::DatabaseMethods","","Sequel/MSSQL/DatabaseMethods.html","",""],["Sequel::MSSQL::DatasetMethods","","Sequel/MSSQL/DatasetMethods.html","",""],["Sequel::Mock","","Sequel/Mock.html","",""],["Sequel::Mock::Connection","","Sequel/Mock/Connection.html","",""],["Sequel::Mock::Database","","Sequel/Mock/Database.html","",""],["Sequel::Mock::Dataset","","Sequel/Mock/Dataset.html","",""],["Sequel::MySQL","","Sequel/MySQL.html","",""],["Sequel::MySQL::Database","","Sequel/MySQL/Database.html","",""],["Sequel::MySQL::DatabaseMethods","","Sequel/MySQL/DatabaseMethods.html","",""],["Sequel::MySQL::Dataset","","Sequel/MySQL/Dataset.html","",""],["Sequel::MySQL::DatasetMethods","","Sequel/MySQL/DatasetMethods.html","","<p>Dataset methods shared by datasets that use MySQL databases.\n"],["Sequel::MySQL::MysqlMysql2","","Sequel/MySQL/MysqlMysql2.html","","<p>This module is used by the mysql and mysql2 adapters to support prepared statements and stored procedures. …\n"],["Sequel::MySQL::MysqlMysql2::DatabaseMethods","","Sequel/MySQL/MysqlMysql2/DatabaseMethods.html","",""],["Sequel::MySQL::MysqlMysql2::DatasetMethods","","Sequel/MySQL/MysqlMysql2/DatasetMethods.html","",""],["Sequel::MySQL::PreparedStatements","","Sequel/MySQL/PreparedStatements.html","",""],["Sequel::MySQL::PreparedStatements::DatabaseMethods","","Sequel/MySQL/PreparedStatements/DatabaseMethods.html","",""],["Sequel::MySQL::PreparedStatements::DatasetMethods","","Sequel/MySQL/PreparedStatements/DatasetMethods.html","",""],["Sequel::MySQL::PreparedStatements::DatasetMethods::CallableStatementMethods","","Sequel/MySQL/PreparedStatements/DatasetMethods/CallableStatementMethods.html","",""],["Sequel::Mysql2","","Sequel/Mysql2.html","",""],["Sequel::Mysql2::Database","","Sequel/Mysql2/Database.html","",""],["Sequel::Mysql2::Dataset","","Sequel/Mysql2/Dataset.html","",""],["Sequel::ODBC","","Sequel/ODBC.html","",""],["Sequel::ODBC::Database","","Sequel/ODBC/Database.html","",""],["Sequel::ODBC::Dataset","","Sequel/ODBC/Dataset.html","",""],["Sequel::ODBC::MSSQL","","Sequel/ODBC/MSSQL.html","",""],["Sequel::ODBC::MSSQL::DatabaseMethods","","Sequel/ODBC/MSSQL/DatabaseMethods.html","",""],["Sequel::ODBC::MSSQL::Dataset","","Sequel/ODBC/MSSQL/Dataset.html","",""],["Sequel::Oracle","","Sequel/Oracle.html","",""],["Sequel::Oracle::Database","","Sequel/Oracle/Database.html","",""],["Sequel::Oracle::DatabaseMethods","","Sequel/Oracle/DatabaseMethods.html","",""],["Sequel::Oracle::Dataset","","Sequel/Oracle/Dataset.html","",""],["Sequel::Oracle::Dataset::ArgumentMapper","","Sequel/Oracle/Dataset/ArgumentMapper.html","","<p>Oracle already supports named bind arguments, so use directly.\n"],["Sequel::Oracle::DatasetMethods","","Sequel/Oracle/DatasetMethods.html","",""],["Sequel::Postgres","","Sequel/Postgres.html","","<p>Top level module for holding all PostgreSQL-related modules and classes for Sequel.  All adapters that …\n"],["Sequel::Postgres::Adapter","","Sequel/Postgres/Adapter.html","","<p>PGconn subclass for connection specific methods used with the pg or postgres-pr driver.\n"],["Sequel::Postgres::Adapter::PGresult","","Sequel/Postgres/Adapter/PGresult.html","",""],["Sequel::Postgres::AlterTableGenerator","","Sequel/Postgres/AlterTableGenerator.html","",""],["Sequel::Postgres::CreatePartitionOfTableGenerator","","Sequel/Postgres/CreatePartitionOfTableGenerator.html","","<p>Generator used for creating tables that are partitions of other tables.\n"],["Sequel::Postgres::CreateTableGenerator","","Sequel/Postgres/CreateTableGenerator.html","",""],["Sequel::Postgres::Database","","Sequel/Postgres/Database.html","",""],["Sequel::Postgres::DatabaseMethods","","Sequel/Postgres/DatabaseMethods.html","",""],["Sequel::Postgres::Dataset","","Sequel/Postgres/Dataset.html","",""],["Sequel::Postgres::Dataset::ArgumentMapper","","Sequel/Postgres/Dataset/ArgumentMapper.html","","<p>PostgreSQL specific argument mapper used for mapping the named argument hash to a array with numbered …\n"],["Sequel::Postgres::DatasetMethods","","Sequel/Postgres/DatasetMethods.html","",""],["Sequel::Postgres::ExclusionConstraintViolation","","Sequel/Postgres/ExclusionConstraintViolation.html","","<p>Error raised when Sequel determines a PostgreSQL exclusion constraint has been violated.\n"],["Sequel::Postgres::MockAdapterDatabaseMethods","","Sequel/Postgres/MockAdapterDatabaseMethods.html","",""],["Sequel::SQLite","","Sequel/SQLite.html","",""],["Sequel::SQLite::Database","","Sequel/SQLite/Database.html","",""],["Sequel::SQLite::DatabaseMethods","","Sequel/SQLite/DatabaseMethods.html","","<p>No matter how you connect to SQLite, the following Database options can be used to set PRAGMAs on connections …\n"],["Sequel::SQLite::Dataset","","Sequel/SQLite/Dataset.html","",""],["Sequel::SQLite::Dataset::ArgumentMapper","","Sequel/SQLite/Dataset/ArgumentMapper.html","",""],["Sequel::SQLite::DatasetMethods","","Sequel/SQLite/DatasetMethods.html","",""],["Sequel::SqlAnywhere","","Sequel/SqlAnywhere.html","",""],["Sequel::SqlAnywhere::Database","","Sequel/SqlAnywhere/Database.html","",""],["Sequel::SqlAnywhere::DatabaseMethods","","Sequel/SqlAnywhere/DatabaseMethods.html","",""],["Sequel::SqlAnywhere::Dataset","","Sequel/SqlAnywhere/Dataset.html","",""],["Sequel::SqlAnywhere::DatasetMethods","","Sequel/SqlAnywhere/DatasetMethods.html","",""],["Sequel::SqlAnywhere::SQLAnywhereException","","Sequel/SqlAnywhere/SQLAnywhereException.html","",""],["Sequel::TinyTDS","","Sequel/TinyTDS.html","",""],["Sequel::TinyTDS::Database","","Sequel/TinyTDS/Database.html","",""],["Sequel::TinyTDS::Dataset","","Sequel/TinyTDS/Dataset.html","",""],["Sequel::TinyTDS::Dataset::ArgumentMapper","","Sequel/TinyTDS/Dataset/ArgumentMapper.html","",""],["Sequel::UnmodifiedIdentifiers","","Sequel/UnmodifiedIdentifiers.html","",""],["Sequel::UnmodifiedIdentifiers::DatabaseMethods","","Sequel/UnmodifiedIdentifiers/DatabaseMethods.html","",""],["Sequel::UnmodifiedIdentifiers::DatasetMethods","","Sequel/UnmodifiedIdentifiers/DatasetMethods.html","",""],["[]","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-5B-5D","(col)",""],["_fetch","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-_fetch","()","<p>The fetch setting for this dataset, if it has been overridden\n"],["_import","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-_import","(columns, values, opts=OPTS)","<p>If returned primary keys are requested, use OUTPUT unless already set on the dataset.  If OUTPUT is already …\n"],["_import","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-_import","(columns, values, opts=OPTS)","<p>If returned primary keys are requested, use RETURNING unless already set on the dataset.  If RETURNING …\n"],["add_conversion_proc","Sequel::JDBC::Postgres::DatabaseMethods","Sequel/JDBC/Postgres/DatabaseMethods.html#method-i-add_conversion_proc","(oid, *)","<p>Remove any current entry for the oid in the oid_convertor_map.\n"],["add_conversion_proc","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-add_conversion_proc","(oid, callable=nil, &block)","<p>Set a conversion proc for the given oid.  The callable can be passed either as a argument or a block. …\n"],["add_exclusion_constraint","Sequel::Postgres::AlterTableGenerator","Sequel/Postgres/AlterTableGenerator.html#method-i-add_exclusion_constraint","(elements, opts=OPTS)","<p>Adds an exclusion constraint to an existing table, see CreateTableGenerator#exclude.\n"],["add_named_conversion_proc","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-add_named_conversion_proc","(name, &block)","<p>Add a conversion proc for a named type, using the given block. This should be used for types without …\n"],["affected","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-affected","()","<p>Return the number of rows affected.\n"],["allow_null","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-allow_null","()",""],["allow_regexp?","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-allow_regexp-3F","()","<p>Whether this Database instance is setup to allow regexp matching. True if the :setup_regexp_function …\n"],["alter_table","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-alter_table","(name, *)","<p>Remove cached schema after altering a table, since otherwise it can be cached incorrectly in the rename …\n"],["analyze","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-analyze","()","<p>Return the results of an EXPLAIN ANALYZE query as a string\n"],["async_exec","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-async_exec","(sql)",""],["async_exec_params","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-async_exec_params","(sql)",""],["autocommit","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-autocommit","()","<p>Check whether the connection is in autocommit state or not.\n"],["autocommit=","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-autocommit-3D","(value)","<p>Turn autocommit on or off for the connection.\n"],["autoid","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-autoid","()","<p>The autoid setting for this dataset, if it has been overridden\n"],["autoid=","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-autoid-3D","(v)","<p>Set the autogenerated primary key integer to be returned when running an insert query. Argument types …\n"],["basic_type_convertor","Sequel::JDBC::SQLServer::DatabaseMethods::MetadataDatasetMethods","Sequel/JDBC/SQLServer/DatabaseMethods/MetadataDatasetMethods.html#method-i-basic_type_convertor","(map, meta, type, i)",""],["blob","Sequel::Amalgalite::SequelTypeMap","Sequel/Amalgalite/SequelTypeMap.html#method-i-blob","(s)","<p>Return blobs as instances of Sequel::SQL::Blob instead of Amalgamite::Blob\n"],["block","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-block","(timeout=nil)",""],["boolean","Sequel::IBMDB","Sequel/IBMDB.html#method-i-boolean","(s)",""],["bound_variable_arg","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-bound_variable_arg","(arg, conn)","<p>Convert given argument so that it can be used directly by pg.  Currently, pg doesn&#39;t handle fractional …\n"],["bound_variable_arg","Sequel::Postgres::MockAdapterDatabaseMethods","Sequel/Postgres/MockAdapterDatabaseMethods.html#method-i-bound_variable_arg","(arg, conn)",""],["bound_variable_modules","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-bound_variable_modules","()",""],["calc_found_rows","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-calc_found_rows","()","<p>Sets up the select methods to use SQL_CALC_FOUND_ROWS option.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">dataset</span>.<span class=\"ruby-identifier\">calc_found_rows</span>.<span class=\"ruby-identifier\">limit</span>(<span class=\"ruby-value\">10</span>)\n<span class=\"ruby-comment\"># SELECT ...</span>\n</pre>\n"],["call","Sequel::Dataset::StoredProcedureMethods","Sequel/Dataset/StoredProcedureMethods.html#method-i-call","(*args, &block)","<p>Call the stored procedure with the given args\n"],["call_mssql_sproc","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-call_mssql_sproc","(name, opts=OPTS)","<p>Execute the given stored procedure with the given name.\n<p>Options:\n<p>:args  &mdash; Arguments to stored procedure. …\n"],["call_procedure","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-call_procedure","(name, *args)","<p>Call a procedure with the given name and arguments.  Returns a hash if the procedure returns a value, …\n"],["call_sproc","Sequel::Dataset::StoredProcedures","Sequel/Dataset/StoredProcedures.html#method-i-call_sproc","(type, name, *args)","<p>For the given type (:select, :first, :insert, :update, or :delete), run the database stored procedure …\n"],["call_sproc","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-call_sproc","(name, opts = OPTS)","<p>Execute the given stored procedure with the give name. If a block is given, the stored procedure should …\n"],["call_sproc","Sequel::MySQL::MysqlMysql2::DatabaseMethods","Sequel/MySQL/MysqlMysql2/DatabaseMethods.html#method-i-call_sproc","(name, opts=OPTS, &block)","<p>Support stored procedures on MySQL\n"],["case_expression_sql_append","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-case_expression_sql_append","(sql, ce)","<p>Access doesn&#39;t support CASE, so emulate it with nested IIF function calls.\n"],["case_expression_sql_append","Sequel::JDBC::Derby::Dataset","Sequel/JDBC/Derby/Dataset.html#method-i-case_expression_sql_append","(sql, ce)","<p>Derby doesn&#39;t support an expression between CASE and WHEN, so remove conditions.\n"],["cast_sql_append","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-cast_sql_append","(sql, expr, type)","<p>Access doesn&#39;t support CAST, it uses separate functions for type conversion\n"],["cast_sql_append","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-cast_sql_append","(sql, expr, type)","<p>DB2 casts strings using RTRIM and CHAR instead of VARCHAR.\n"],["cast_sql_append","Sequel::JDBC::Derby::Dataset","Sequel/JDBC/Derby/Dataset.html#method-i-cast_sql_append","(sql, expr, type)","<p>If the type is String, trim the extra spaces since CHAR is used instead of varchar.  This can cause problems …\n"],["cast_sql_append","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-cast_sql_append","(sql, expr, type)",""],["cast_type_literal","Sequel::JDBC::Derby::DatabaseMethods","Sequel/JDBC/Derby/DatabaseMethods.html#method-i-cast_type_literal","(type)","<p>Derby doesn&#39;t support casting integer to varchar, only integer to char, and char(254) appears to …\n"],["cast_type_literal","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-cast_type_literal","(type)","<p>MySQL&#39;s cast rules are restrictive in that you can&#39;t just cast to any possible database type. …\n"],["check_constraints","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-check_constraints","(table)","<p>A hash of metadata for CHECK constraints on the table. Keys are CHECK constraint name symbols.  Values …\n"],["check_disconnect_errors","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-check_disconnect_errors","()","<p>Raise a Sequel::DatabaseDisconnectError if a one of the disconnect error classes is raised, or a PGError …\n"],["close","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-close","()","<p>Close the connection, disconnecting from DB2.\n"],["columns","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-columns","(*cs)","<p>If arguments are provided, use them to set the columns for this dataset and return self.  Otherwise, …\n"],["columns!","Sequel::Dataset::ColumnsLimit1","Sequel/Dataset/ColumnsLimit1.html#method-i-columns-21","()","<p>Use a limit of 1 instead of a limit of 0 when getting the columns.\n"],["commit","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-commit","()","<p>Commit the currently outstanding transaction on this connection.\n"],["commit_prepared_transaction","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-commit_prepared_transaction","(transaction_id, opts=OPTS)",""],["commit_prepared_transaction","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-commit_prepared_transaction","(transaction_id, opts=OPTS)",""],["commit_prepared_transaction","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-commit_prepared_transaction","(transaction_id, opts=OPTS)",""],["complex_expression_sql_append","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["complex_expression_sql_append","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["complex_expression_sql_append","Sequel::JDBC::Derby::Dataset","Sequel/JDBC/Derby/Dataset.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["complex_expression_sql_append","Sequel::JDBC::H2::Dataset","Sequel/JDBC/H2/Dataset.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>Emulate the case insensitive LIKE operator and the bitwise operators.\n"],["complex_expression_sql_append","Sequel::JDBC::HSQLDB::Dataset","Sequel/JDBC/HSQLDB/Dataset.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>Handle HSQLDB specific case insensitive LIKE and bitwise operator support.\n"],["complex_expression_sql_append","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["complex_expression_sql_append","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["complex_expression_sql_append","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["complex_expression_sql_append","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>Handle converting the ruby xor operator (^) into the PostgreSQL xor operator (#), and use the ILIKE and …\n"],["complex_expression_sql_append","Sequel::SQLite::Dataset","Sequel/SQLite/Dataset.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>Support regexp functions if using :setup_regexp_function Database option.\n"],["complex_expression_sql_append","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)","<p>SQLite doesn&#39;t support a NOT LIKE b, you need to use NOT (a LIKE b). It doesn&#39;t support xor, …\n"],["complex_expression_sql_append","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-complex_expression_sql_append","(sql, op, args)",""],["compound_from_self","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-compound_from_self","()","<p>If the dataset using a order without a limit or offset or custom SQL,  remove the order.  Compounds on …\n"],["connect","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-connect","(server)","<p>In addition to the usual database options, the following options have an effect:\n<p>:command_timeout  &mdash; Sets …\n"],["connect","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-connect","(server)","<p>Connect to the database.  Since SQLite is a file based database, the only options available are :database …\n"],["connect","Sequel::IBMDB::Database","Sequel/IBMDB/Database.html#method-i-connect","(server)","<p>Create a new connection object for the given server.\n"],["connect","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-connect","(server)","<p>Connect to the database using JavaSQL::DriverManager.getConnection, and falling back to driver.new.connect …\n"],["connect","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-connect","(server)","<p>Return a related Connection option connecting to the given shard.\n"],["connect","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-connect","(server)","<p>Connect to the database.  In addition to the usual database options, the following options have effect: …\n"],["connect","Sequel::Mysql2::Database","Sequel/Mysql2/Database.html#method-i-connect","(server)","<p>Connect to the database.  In addition to the usual database options, the following options have effect: …\n"],["connect","Sequel::ODBC::Database","Sequel/ODBC/Database.html#method-i-connect","(server)",""],["connect","Sequel::Oracle::Database","Sequel/Oracle/Database.html#method-i-connect","(server)",""],["connect","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-connect","(server)","<p>Connects to the database.  In addition to the standard database options, using the :encoding or :charset …\n"],["connect","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-connect","(server)","<p>Connect to the database. Since SQLite is a file based database, available options are limited:\n<p>:database … &mdash; "],["connect","Sequel::SqlAnywhere::Database","Sequel/SqlAnywhere/Database.html#method-i-connect","(server)",""],["connect","Sequel::TinyTDS::Database","Sequel/TinyTDS/Database.html#method-i-connect","(server)","<p>Transfer the :user option to the :username option.\n"],["constant_sql_append","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-constant_sql_append","(sql, constant)","<p>Use Date(), Now(), and Time() for CURRENT_DATE, CURRENT_TIMESTAMP, and CURRENT_TIME\n"],["constant_sql_append","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-constant_sql_append","(sql, constant)","<p>MSSQL doesn&#39;t support the SQL standard CURRENT_DATE or CURRENT_TIME\n"],["constant_sql_append","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-constant_sql_append","(sql, constant)","<p>MySQL&#39;s CURRENT_TIMESTAMP does not use fractional seconds, even if the database itself supports fractional …\n"],["constant_sql_append","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-constant_sql_append","(sql, c)","<p>Oracle doesn&#39;t support CURRENT_TIME, as it doesn&#39;t have a type for storing just time values without …\n"],["constant_sql_append","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-constant_sql_append","(sql, constant)","<p>SQLite has CURRENT_TIMESTAMP and related constants in UTC instead of in localtime, so convert those constants …\n"],["constant_sql_append","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-constant_sql_append","(sql, constant)","<p>Use today() for CURRENT_DATE and now() for CURRENT_TIMESTAMP and CURRENT_TIME\n"],["convert_infinite_timestamps","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-convert_infinite_timestamps","()","<p>Always false, support was moved to pg_extended_date_support extension. Needs to stay defined here so …\n"],["convert_infinite_timestamps=","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-convert_infinite_timestamps-3D","(v)","<p>Enable pg_extended_date_support extension if symbol or string is given.\n"],["convert_invalid_date_time=","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-convert_invalid_date_time-3D","(v)","<p>Modify the type translators for the date, time, and timestamp types depending on the value given.\n"],["convert_serial_to_identity","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-convert_serial_to_identity","(table, opts=OPTS)","<p>Convert the first primary key column in the <code>table</code> from being a serial column to being an identity column. …\n"],["convert_smallint_to_bool","Sequel::IBMDB::Dataset","Sequel/IBMDB/Dataset.html#method-i-convert_smallint_to_bool","()","<p>Whether to convert smallint to boolean arguments for this dataset. Defaults to the Database setting. …\n"],["convert_smallint_to_bool","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-convert_smallint_to_bool","()","<p>Whether to convert smallint to boolean arguments for this dataset. Defaults to the IBMDB module setting. …\n"],["convert_tinyint_to_bool=","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-convert_tinyint_to_bool-3D","(v)","<p>Modify the type translator used for the tinyint type based on the value given.\n"],["copy_into","Sequel::JDBC::Postgres::DatabaseMethods","Sequel/JDBC/Postgres/DatabaseMethods.html#method-i-copy_into","(table, opts=OPTS)","<p>See Sequel::Postgres::Adapter#copy_into\n"],["copy_into","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-copy_into","(table, opts=OPTS)","<p><code>copy_into</code> uses PostgreSQL&#39;s +COPY FROM STDIN+ SQL statement to do very fast inserts  into a table …\n"],["copy_table","Sequel::JDBC::Postgres::DatabaseMethods","Sequel/JDBC/Postgres/DatabaseMethods.html#method-i-copy_table","(table, opts=OPTS)","<p>See Sequel::Postgres::Adapter#copy_table\n"],["copy_table","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-copy_table","(table, opts=OPTS)","<p><code>copy_table</code> uses PostgreSQL&#39;s +COPY TO STDOUT+ SQL statement to return formatted results directly …\n"],["create_function","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-create_function","(name, definition, opts=OPTS)","<p>Creates the function in the database.  Arguments:\n<p>name  &mdash; name of the function to create\n<p>definition  &mdash; string …\n"],["create_language","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-create_language","(name, opts=OPTS)","<p>Create the procedural language in the database. Arguments:\n<p>name  &mdash; Name of the procedural language (e.g. …\n"],["create_schema","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-create_schema","(name, opts=OPTS)","<p>Create a schema in the database. Arguments:\n<p>name  &mdash; Name of the schema (e.g. admin)\n<p>opts  &mdash; options hash:\n"],["create_sequence","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-create_sequence","(name, opts=OPTS)",""],["create_table","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-create_table","(name, options=OPTS, &block)","<p>Support partitions of tables using the :partition_of option.\n"],["create_table?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-create_table-3F","(name, options=OPTS, &block)","<p>Support partitions of tables using the :partition_of option.\n"],["create_trigger","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-create_trigger","(*args)",""],["create_trigger","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-create_trigger","(table, name, function, opts=OPTS)","<p>Create a trigger in the database.  Arguments:\n<p>table  &mdash; the table on which this trigger operates\n<p>name  &mdash; the …\n"],["cross_apply","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-cross_apply","(table)","<p>Uses CROSS APPLY to join the given table into the current dataset.\n"],["cross_apply","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-cross_apply","(table)","<p>Uses CROSS APPLY to join the given table into the current dataset.\n"],["cross_join","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-cross_join","(table)","<p>Emulate cross join by using multiple tables in the FROM clause.\n"],["current_user","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-current_user","()",""],["database_type","Sequel::Access::DatabaseMethods","Sequel/Access/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-database_type","()",""],["database_type","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::JDBC::Derby::DatabaseMethods","Sequel/JDBC/Derby/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::JDBC::HSQLDB::DatabaseMethods","Sequel/JDBC/HSQLDB/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-database_type","()",""],["database_type","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-database_type","()","<p>SQLite uses the :sqlite database type.\n"],["database_type","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-database_type","()",""],["datetime","Sequel::Amalgalite::SequelTypeMap","Sequel/Amalgalite/SequelTypeMap.html#method-i-datetime","(s)","<p>Return datetime types as instances of Sequel.datetime_class\n"],["db2_version","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-db2_version","()","<p>Return the database version as a string.  Don&#39;t rely on this, it may return an integer in the future. …\n"],["db_type","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-db_type","()",""],["db_version","Sequel::JDBC::HSQLDB::DatabaseMethods","Sequel/JDBC/HSQLDB/DatabaseMethods.html#method-i-db_version","()","<p>The version of the database, as an integer (e.g 2.2.5 -&gt; 20205)\n"],["decimal","Sequel::Amalgalite::SequelTypeMap","Sequel/Amalgalite/SequelTypeMap.html#method-i-decimal","(s)","<p>Return numeric/decimal types as instances of BigDecimal instead of Float\n"],["default","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-default","()",""],["default","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-default","()","<p>Sets that this is a default partition, where values not in other partitions are stored.\n"],["delete","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-delete","(&block)","<p>SQLite performs a TRUNCATE style DELETE if no filter is specified. Since we want to always return the …\n"],["delete_from","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-delete_from","(*tables)","<p>Sets up the select methods to delete from if deleting from a joined dataset:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>[<span class=\"ruby-value\">:a</span>].<span class=\"ruby-identifier\">join</span>(<span class=\"ruby-value\">:b</span>, <span class=\"ruby-value\">a_id:</span> <span class=\"ruby-value\">:id</span>).<span class=\"ruby-identifier\">delete</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["disable_insert_output","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-disable_insert_output","()","<p>Disable the use of INSERT OUTPUT\n"],["disable_insert_returning","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-disable_insert_returning","()","<p>Disables automatic use of INSERT … RETURNING.  You can still use returning manually to force the use …\n"],["disconnect_connection","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-disconnect_connection","(conn)","<p>Access doesn&#39;t let you disconnect if inside a transaction, so try rolling back an existing transaction …\n"],["disconnect_connection","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-disconnect_connection","(conn)",""],["disconnect_connection","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-disconnect_connection","(c)","<p>Close given adapter connections, and delete any related prepared statements.\n"],["disconnect_connection","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-disconnect_connection","(c)",""],["disconnect_connection","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-disconnect_connection","(c)",""],["disconnect_connection","Sequel::ODBC::Database","Sequel/ODBC/Database.html#method-i-disconnect_connection","(c)",""],["disconnect_connection","Sequel::Oracle::Database","Sequel/Oracle/Database.html#method-i-disconnect_connection","(c)",""],["disconnect_connection","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-disconnect_connection","(conn)",""],["disconnect_connection","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-disconnect_connection","(c)","<p>Disconnect given connections from the database.\n"],["disconnect_connection","Sequel::SqlAnywhere::Database","Sequel/SqlAnywhere/Database.html#method-i-disconnect_connection","(c)",""],["distinct","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-distinct","(*args)","<p>Use GROUP BY instead of DISTINCT ON if arguments are provided.\n"],["do","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-do","(code, opts=OPTS)","<p>Use PostgreSQL&#39;s DO syntax to execute an anonymous code block.  The code should be the literal code …\n"],["drop_function","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-drop_function","(name, opts=OPTS)","<p>Drops the function from the database. Arguments:\n<p>name  &mdash; name of the function to drop\n<p>opts  &mdash; options hash: …\n"],["drop_language","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-drop_language","(name, opts=OPTS)","<p>Drops a procedural language from the database.  Arguments:\n<p>name  &mdash; name of the procedural language to drop …\n"],["drop_schema","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-drop_schema","(name, opts=OPTS)","<p>Drops a schema from the database.  Arguments:\n<p>name  &mdash; name of the schema to drop\n<p>opts  &mdash; options hash:\n"],["drop_sequence","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-drop_sequence","(name)",""],["drop_trigger","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-drop_trigger","(table, name, opts=OPTS)","<p>Drops a trigger from the database.  Arguments:\n<p>table  &mdash; table from which to drop the trigger\n<p>name  &mdash; name of …\n"],["empty?","Sequel::EmulateOffsetWithReverseAndCount","Sequel/EmulateOffsetWithReverseAndCount.html#method-i-empty-3F","()","<p>Make empty? work with an offset with an order. By default it would break since the order would be based …\n"],["empty?","Sequel::EmulateOffsetWithRowNumber","Sequel/EmulateOffsetWithRowNumber.html#method-i-empty-3F","()","<p>If the offset must be emulated with ROW_NUMBER, don&#39;t remove any ordering, because it can cause invalid …\n"],["empty?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-empty-3F","()","<p>Use a custom expression with EXISTS to determine whether a dataset is empty.\n"],["error_info","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-error_info","(e)","<p>Return a hash of information about the related PGError (or Sequel::DatabaseError that wraps a PGError …\n"],["error_msg","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-error_msg","()","<p>Return the related error message for the connection.\n"],["error_sqlstate","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-error_sqlstate","()","<p>Return the related error message for the connection.\n"],["escape_bytea","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-escape_bytea","(str)","<p>Escape bytea values.  Uses historical format instead of hex format for maximum compatibility.\n"],["escape_like","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-escape_like","(string)","<p>Access uses [] to escape metacharacters, instead of backslashes.\n"],["escape_like","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-escape_like","(string)","<p>MSSQL treats [] as a metacharacter in LIKE expresions.\n"],["escape_like","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-escape_like","(string)","<p>SqlAnywhere uses \\ to escape metacharacters, but a &#39;]&#39; should not be escaped\n"],["escape_string","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-escape_string","(str)","<p>Escape strings by doubling apostrophes.  This only works if standard conforming strings are used.\n"],["except","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-except","(dataset, opts=OPTS)","<p>Oracle uses MINUS instead of EXCEPT, and doesn&#39;t support EXCEPT ALL\n"],["exclude","Sequel::Postgres::CreateTableGenerator","Sequel/Postgres/CreateTableGenerator.html#method-i-exclude","(elements, opts=OPTS)","<p>Add an exclusion constraint when creating the table. Elements should be an array of 2 element arrays, …\n"],["execute","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-execute","(sql, opts=OPTS)",""],["execute","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-execute","(sql, opts=OPTS)",""],["execute","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-execute","(sql)","<p>Execute the given SQL on the database, and return a Statement instance holding the results.\n"],["execute","Sequel::IBMDB::Database","Sequel/IBMDB/Database.html#method-i-execute","(sql, opts=OPTS, &block)",""],["execute","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-execute","(*values)","<p>If this statement is a prepared statement, execute it on the database with the given values.\n"],["execute","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-execute","(sql, opts=OPTS, &block)",""],["execute","Sequel::Mock::Connection","Sequel/Mock/Connection.html#method-i-execute","(sql)","<p>Delegate to the db&#39;s #_execute method.\n"],["execute","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-execute","(sql, opts=OPTS, &block)","<p>Store the sql used for later retrieval with #sqls, and return the appropriate value using either the …\n"],["execute","Sequel::MySQL::MysqlMysql2::DatabaseMethods","Sequel/MySQL/MysqlMysql2/DatabaseMethods.html#method-i-execute","(sql, opts=OPTS, &block)","<p>Executes the given SQL using an available connection, yielding the connection if the block is given. …\n"],["execute","Sequel::ODBC::Database","Sequel/ODBC/Database.html#method-i-execute","(sql, opts=OPTS)",""],["execute","Sequel::Oracle::Database","Sequel/Oracle/Database.html#method-i-execute","(sql, opts=OPTS, &block)",""],["execute","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-execute","(sql, args=nil)","<p>Execute the given SQL with this connection.  If a block is given, yield the results, otherwise, return …\n"],["execute","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-execute","(sql, opts=OPTS, &block)",""],["execute","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-execute","(sql, opts=OPTS, &block)","<p>Run the given SQL with the given arguments and yield each row.\n"],["execute","Sequel::SqlAnywhere::Database","Sequel/SqlAnywhere/Database.html#method-i-execute","(sql, opts=OPTS, &block)",""],["execute","Sequel::TinyTDS::Database","Sequel/TinyTDS/Database.html#method-i-execute","(sql, opts=OPTS)","<p>Execute the given <code>sql</code> on the server.  If the :return option is present, its value should be a method …\n"],["execute_ddl","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-execute_ddl","(sql, opts=OPTS)","<p>Just execute so it doesn&#39;t attempt to return the number of rows modified.\n"],["execute_ddl","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-execute_ddl","(sql, opts=OPTS)",""],["execute_ddl","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-execute_ddl","(sql, opts=OPTS)",""],["execute_ddl","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-execute_ddl","(sql, opts=OPTS, &block)",""],["execute_ddl","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-execute_ddl","(sql, opts=OPTS)","<p>Drop any prepared statements on the connection when executing DDL.  This is because prepared statements …\n"],["execute_ddl","Sequel::TinyTDS::Database","Sequel/TinyTDS/Database.html#method-i-execute_ddl","(sql, opts=OPTS)",""],["execute_dui","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-execute_dui","(sql, opts=OPTS)","<p>Use pass by reference in WIN32OLE to get the number of affected rows, unless is a provider is in use …\n"],["execute_dui","Sequel::ADO::MSSQL::DatabaseMethods","Sequel/ADO/MSSQL/DatabaseMethods.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_dui","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_dui","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-execute_dui","(sql, opts=OPTS, &block)",""],["execute_dui","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-execute_dui","(sql, opts=OPTS)","<p>Store the sql used, and return the value of the #numrows method.\n"],["execute_dui","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_dui","Sequel::Mysql2::Database","Sequel/Mysql2/Database.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_dui","Sequel::ODBC::Database","Sequel/ODBC/Database.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_dui","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-execute_dui","(sql, opts=OPTS)","<p>Run the given SQL with the given arguments and return the number of changed rows.\n"],["execute_dui","Sequel::SqlAnywhere::Database","Sequel/SqlAnywhere/Database.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_dui","Sequel::TinyTDS::Database","Sequel/TinyTDS/Database.html#method-i-execute_dui","(sql, opts=OPTS)",""],["execute_insert","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-execute_insert","(sql, opts=OPTS)","<p>Just execute so it doesn&#39;t attempt to return the number of rows modified.\n"],["execute_insert","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::IBMDB::Database","Sequel/IBMDB/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-execute_insert","(sql, opts=OPTS)","<p>Store the sql used, and return the value of the #autoid method.\n"],["execute_insert","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::Mysql2::Database","Sequel/Mysql2/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::ODBC::MSSQL::DatabaseMethods","Sequel/ODBC/MSSQL/DatabaseMethods.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::Oracle::Database","Sequel/Oracle/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::SqlAnywhere::Database","Sequel/SqlAnywhere/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_insert","Sequel::TinyTDS::Database","Sequel/TinyTDS/Database.html#method-i-execute_insert","(sql, opts=OPTS)",""],["execute_prepared","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-execute_prepared","(ps_name, *values)","<p>Execute the related prepared statement on the database with the given arguments.\n"],["execute_prepared_statement","Sequel::IBMDB::Database","Sequel/IBMDB/Database.html#method-i-execute_prepared_statement","(ps_name, opts)","<p>Execute a prepared statement named by name on the database.\n"],["explain","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-explain","(opts=OPTS)","<p>Return the results of an EXPLAIN query as a string. Options:\n<p>:extended  &mdash; Use EXPLAIN EXTENDED instead of …\n\n"],["explain","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-explain","(opts=OPTS)","<p>Return the results of an EXPLAIN query as a string\n"],["explain","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-explain","(opts=nil)","<p>Return an array of strings specifying a query explanation for a SELECT of the current dataset. Currently …\n"],["extended","Sequel::JDBC::Oracle::DatabaseMethods","Sequel/JDBC/Oracle/DatabaseMethods.html#method-c-extended","(db)",""],["extended","Sequel::JDBC::Postgres::DatabaseMethods","Sequel/JDBC/Postgres/DatabaseMethods.html#method-c-extended","(db)","<p>Add the primary_keys and primary_key_sequences instance variables, so we can get the correct return values …\n"],["fetch_array","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-fetch_array","()","<p>Return the results of a query as an array of values.\n"],["fetch_rows","Sequel::ADO::Dataset","Sequel/ADO/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::Amalgalite::Dataset","Sequel/Amalgalite/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::IBMDB::Dataset","Sequel/IBMDB/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::JDBC::Dataset","Sequel/JDBC/Dataset.html#method-i-fetch_rows","(sql, &block)",""],["fetch_rows","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-fetch_rows","(sql, &block)",""],["fetch_rows","Sequel::MySQL::Dataset","Sequel/MySQL/Dataset.html#method-i-fetch_rows","(sql)","<p>Yield all rows matching this dataset.  If the dataset is set to split multiple statements, yield arrays …\n"],["fetch_rows","Sequel::Mysql2::Dataset","Sequel/Mysql2/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::ODBC::Dataset","Sequel/ODBC/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::Oracle::Dataset","Sequel/Oracle/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::SQLite::Dataset","Sequel/SQLite/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::SqlAnywhere::Dataset","Sequel/SqlAnywhere/Dataset.html#method-i-fetch_rows","(sql)",""],["fetch_rows","Sequel::TinyTDS::Dataset","Sequel/TinyTDS/Dataset.html#method-i-fetch_rows","(sql)",""],["field_name","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-field_name","(ind)","<p>Return the field name at the given column in the result set.\n"],["field_precision","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-field_precision","(key)","<p>Return the field precision for the given field name in the result set.\n"],["field_type","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-field_type","(key)","<p>Return the field type for the given field name in the result set.\n"],["for_share","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-for_share","()","<p>Return a cloned dataset which will use LOCK IN SHARE MODE to lock returned rows.\n"],["for_share","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-for_share","()","<p>Return a cloned dataset which will use FOR SHARE to lock returned rows.\n"],["foreign_key_list","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>OpenSchema returns compound foreign key relationships as multiple rows\n"],["foreign_key_list","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>Use the JDBC metadata to get a list of foreign keys for the table.\n"],["foreign_key_list","Sequel::JDBC::SQLite::DatabaseMethods","Sequel/JDBC/SQLite/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>Swallow pointless exceptions when the foreign key list pragma doesn&#39;t return any rows.\n"],["foreign_key_list","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>Return foreign key information using the system views, including :name, :on_delete, and :on_update entries …\n"],["foreign_key_list","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>Use the Information Schema&#39;s KEY_COLUMN_USAGE table to get basic information on foreign key columns, …\n"],["foreign_key_list","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)",""],["foreign_key_list","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>Return full foreign key information using the pg system tables, including :name, :on_delete, :on_update, …\n"],["foreign_key_list","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)","<p>Return the array of foreign key info hashes using the foreign_key_list PRAGMA, including information …\n"],["foreign_key_list","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-foreign_key_list","(table, opts=OPTS)",""],["free","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-free","()","<p>Free the memory related to this statement.\n"],["free_result","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-free_result","()","<p>Free the memory related to this result set, only useful for prepared statements which have a different …\n"],["freeze","Sequel::ADO::Database","Sequel/ADO/Database.html#method-i-freeze","()",""],["freeze","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::IBMDB::Database","Sequel/IBMDB/Database.html#method-i-freeze","()",""],["freeze","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-freeze","()",""],["freeze","Sequel::JDBC::Derby::DatabaseMethods","Sequel/JDBC/Derby/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::JDBC::HSQLDB::DatabaseMethods","Sequel/JDBC/HSQLDB/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::JDBC::Transactions","Sequel/JDBC/Transactions.html#method-i-freeze","()",""],["freeze","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::MySQL::Database","Sequel/MySQL/Database.html#method-i-freeze","()",""],["freeze","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::Mysql2::Database","Sequel/Mysql2/Database.html#method-i-freeze","()",""],["freeze","Sequel::Oracle::Database","Sequel/Oracle/Database.html#method-i-freeze","()",""],["freeze","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-freeze","()",""],["freeze","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-freeze","()",""],["freeze","Sequel::SqlAnywhere::Database","Sequel/SqlAnywhere/Database.html#method-i-freeze","()",""],["freeze","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-freeze","()",""],["from","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-from","(*v)","<p>Assumes range partitioning, sets the inclusive minimum value of the range for this partition.\n"],["full_text_search","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-full_text_search","(cols, terms, opts = OPTS)","<p>MSSQL uses the CONTAINS keyword for full text search\n"],["full_text_search","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-full_text_search","(cols, terms, opts = OPTS)","<p>Adds full text filter\n"],["full_text_search","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-full_text_search","(cols, terms, opts = OPTS)","<p>Run a full text search on PostgreSQL.  By default, searching for the inclusion of any of the terms in …\n"],["full_text_sql","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-full_text_sql","(cols, terms, opts = OPTS)","<p>MySQL specific full text search syntax.\n"],["global_index_namespace?","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-global_index_namespace-3F","()","<p>Microsoft SQL Server namespaces indexes per table.\n"],["global_index_namespace?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-global_index_namespace-3F","()","<p>MySQL namespaces indexes per table.\n"],["global_index_namespace?","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-global_index_namespace-3F","()","<p>Oracle namespaces indexes per table.\n"],["graph","Sequel::MySQL::Dataset","Sequel/MySQL/Dataset.html#method-i-graph","(*)","<p>Don&#39;t allow graphing a dataset that splits multiple statements\n"],["h2_version","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-h2_version","()",""],["hash_values","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-hash_values","()","<p>The modulus and remainder to use for this partition for a hash partition.\n"],["having","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-having","(*cond)","<p>HAVING requires GROUP BY on SQLite\n"],["indexes","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-indexes","(table_name,opts=OPTS)","<p>OpenSchema returns compound indexes as multiple rows\n"],["indexes","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-indexes","(table, opts = OPTS)","<p>Use SYSCAT.INDEXES to get the indexes for the table\n"],["indexes","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-indexes","(table, opts=OPTS)","<p>Use the JDBC metadata to get the index information for the table.\n"],["indexes","Sequel::JDBC::SQLite::DatabaseMethods","Sequel/JDBC/SQLite/DatabaseMethods.html#method-i-indexes","(table, opts=OPTS)","<p>Swallow pointless exceptions when the index list pragma doesn&#39;t return any rows.\n"],["indexes","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-indexes","(table, opts=OPTS)","<p>Use the system tables to get index information\n"],["indexes","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-indexes","(table, opts=OPTS)","<p>Use SHOW INDEX FROM to get the index information for the table.\n<p>By default partial indexes are not included, …\n"],["indexes","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-indexes","(table, opts=OPTS)","<p>Use the pg_* system tables to determine indexes on a table\n"],["indexes","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-indexes","(table, opts=OPTS)","<p>Use the index_list and index_info PRAGMAs to determine the indexes on the table.\n"],["indexes","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-indexes","(table, opts = OPTS)",""],["insert","Sequel::ADO::MSSQL::Dataset","Sequel/ADO/MSSQL/Dataset.html#method-i-insert","(*values)","<p>Use a nasty hack of multiple SQL statements in the same call and having the last one return the most …\n"],["insert","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-insert","(*values)","<p>Insert given values into the database.\n"],["insert_conflict","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-insert_conflict","(opts=OPTS)","<p>Handle uniqueness violations when inserting, by updating the conflicting row, using ON CONFLICT. With …\n"],["insert_conflict","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-insert_conflict","(opts = :ignore)","<p>Handle uniqueness violations when inserting, by using a specified resolution algorithm. With no options, …\n"],["insert_ignore","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-insert_ignore","()","<p>Sets up the insert methods to use INSERT IGNORE. Useful if you have a unique key and want to just skip …\n"],["insert_ignore","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-insert_ignore","()","<p>Ignore uniqueness/exclusion violations when inserting, using ON CONFLICT DO NOTHING. Exists mostly for …\n"],["insert_ignore","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-insert_ignore","()","<p>Ignore uniqueness/exclusion violations when inserting, using INSERT OR IGNORE. Exists mostly for compatibility …\n"],["insert_select","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-insert_select","(*values)","<p>Insert a record, returning the record inserted, using OUTPUT.  Always returns nil without running an …\n"],["insert_select","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-insert_select","(*values)","<p>Insert a record, returning the record inserted, using RETURNING.  Always returns nil without running …\n"],["insert_select","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-insert_select","(*values)","<p>Support insert select for associations, so that the model code can use returning instead of a separate …\n"],["insert_select_sql","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-insert_select_sql","(*values)","<p>Add OUTPUT clause unless there is already an existing output clause, then return the SQL to insert.\n"],["insert_select_sql","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-insert_select_sql","(*values)","<p>The SQL to use for an insert_select, adds a RETURNING clause to the insert unless the RETURNING clause …\n"],["insert_select_sql","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-insert_select_sql","(*values)","<p>The SQL to use for an insert_select, adds a RETURNING clause to the insert unless the RETURNING clause …\n"],["inspect","Sequel::Dataset::StoredProcedureMethods","Sequel/Dataset/StoredProcedureMethods.html#method-i-inspect","()","<p>Programmer friendly string showing this is a stored procedure, showing the name of the procedure.\n"],["int","Sequel::IBMDB","Sequel/IBMDB.html#method-i-int","(s)",""],["into","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-into","(table)","<p>Specify a table for a SELECT … INTO query.\n"],["into","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-into","(table)","<p>Specify a table for a SELECT … INTO query.\n"],["into","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-into","(table)","<p>Specify a table for a SELECT … INTO query.\n"],["jndi?","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-jndi-3F","()","<p>Whether or not JNDI is being used for this connection.\n"],["join_table","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-join_table","(type, table, expr=nil, options=OPTS, &block)","<p>Support SQL::AliasedExpression as expr to setup a USING join with a table alias for the USING columns. …\n"],["list","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-list","()","<p>The values to include in this partition for a list partition.\n"],["listen","Sequel::Postgres::Database","Sequel/Postgres/Database.html#method-i-listen","(channels, opts=OPTS, &block)","<p>Listens on the given channel (or multiple channels if channel is an array), waiting for notifications. …\n"],["load_driver","Sequel::JDBC","Sequel/JDBC.html#method-c-load_driver","(drv, gem=nil)","<p>Attempt to load the JDBC driver class, which should be specified as a string containing the driver class …\n"],["load_gem","Sequel::JDBC","Sequel/JDBC.html#method-c-load_gem","(name)","<p>Allow loading the necessary JDBC support via a gem.\n"],["lock","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-lock","(mode, opts=OPTS)","<p>Locks all tables in the dataset&#39;s FROM clause (but not in JOINs) with the specified mode (e.g. &#39;EXCLUSIVE&#39;). …\n"],["locks","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-locks","()","<p>Dataset containing all current database locks\n"],["map_to_prepared_args","Sequel::Oracle::Dataset::ArgumentMapper","Sequel/Oracle/Dataset/ArgumentMapper.html#method-i-map_to_prepared_args","(bind_vars)","<p>Return a hash with the same values as the given hash, but with the keys converted to strings.\n"],["map_to_prepared_args","Sequel::Postgres::Dataset::ArgumentMapper","Sequel/Postgres/Dataset/ArgumentMapper.html#method-i-map_to_prepared_args","(hash)","<p>An array of bound variable values for this query, in the correct order.\n"],["map_to_prepared_args","Sequel::SQLite::Dataset::ArgumentMapper","Sequel/SQLite/Dataset/ArgumentMapper.html#method-i-map_to_prepared_args","(hash)","<p>Return a hash with the same values as the given hash, but with the keys converted to strings.\n"],["map_to_prepared_args","Sequel::TinyTDS::Dataset::ArgumentMapper","Sequel/TinyTDS/Dataset/ArgumentMapper.html#method-i-map_to_prepared_args","(hash)",""],["mariadb?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-mariadb-3F","()","<p>Whether the database is MariaDB and not MySQL\n"],["maximum_length","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-maximum_length","()",""],["maxvalue","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-maxvalue","()","<p>The minimum value of the data type used in range partitions, useful as an argument to #to.\n"],["minvalue","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-minvalue","()","<p>The minimum value of the data type used in range partitions, useful as an argument to #from.\n"],["mock_adapter_setup","Sequel::MSSQL","Sequel/MSSQL.html#method-c-mock_adapter_setup","(db)",""],["mock_adapter_setup","Sequel::MySQL","Sequel/MySQL.html#method-c-mock_adapter_setup","(db)",""],["mock_adapter_setup","Sequel::Oracle","Sequel/Oracle.html#method-c-mock_adapter_setup","(db)",""],["mock_adapter_setup","Sequel::Postgres","Sequel/Postgres.html#method-c-mock_adapter_setup","(db)",""],["mock_adapter_setup","Sequel::SQLite","Sequel/SQLite.html#method-c-mock_adapter_setup","(db)",""],["modulus","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-modulus","(v)","<p>Assumes hash partitioning, sets the modulus for this parition.\n"],["mssql_unicode_strings","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-mssql_unicode_strings","()","<p>Use the database&#39;s mssql_unicode_strings setting if the dataset hasn&#39;t overridden it.\n"],["multi_replace","Sequel::Dataset::Replace","Sequel/Dataset/Replace.html#method-i-multi_replace","(*values)","<p>Replace multiple rows in a single query.\n"],["new","Sequel::ADO::Access::AdoSchema","Sequel/ADO/Access/AdoSchema.html#method-c-new","(type, crit)",""],["new","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-c-new","(row)",""],["new","Sequel::Amalgalite::SequelTypeMap","Sequel/Amalgalite/SequelTypeMap.html#method-c-new","(db)","<p>Store the related database object, in order to be able to correctly handle the database timezone.\n"],["new","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-c-new","(connection_param)","<p>Create the underlying IBM_DB connection.\n"],["new","Sequel::IBMDB::Connection::Error","Sequel/IBMDB/Connection/Error.html#method-c-new","(message, sqlstate)",""],["new","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-c-new","(stmt)","<p>Hold the given statement.\n"],["new","Sequel::Mock::Connection","Sequel/Mock/Connection.html#method-c-new","(db, server, opts)","<p>Store the db, server, and opts.\n"],["new","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-c-new","(&block)",""],["new","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-c-new","(opts = OPTS)",""],["new","Sequel::SqlAnywhere::SQLAnywhereException","Sequel/SqlAnywhere/SQLAnywhereException.html#method-c-new","(message, errno, sql)",""],["nolock","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-nolock","()","<p>Allows you to do a dirty read of uncommitted data using WITH (NOLOCK).\n"],["notify","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-notify","(channel, opts=OPTS)","<p>Notifies the given channel.  See the PostgreSQL NOTIFY documentation. Options:\n<p>:payload  &mdash; The payload string …\n"],["num_fields","Sequel::IBMDB::Statement","Sequel/IBMDB/Statement.html#method-i-num_fields","()","<p>Return the number of fields in the result set.\n"],["numrows","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-numrows","()","<p>The numrows setting for this dataset, if it has been overridden\n"],["offset_strategy","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-offset_strategy","()",""],["oid_convertor_proc","Sequel::JDBC::Postgres::DatabaseMethods","Sequel/JDBC/Postgres/DatabaseMethods.html#method-i-oid_convertor_proc","(oid)",""],["on_duplicate_key_update","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-on_duplicate_key_update","(*args)","<p>Sets up the insert methods to use ON DUPLICATE KEY UPDATE If you pass no arguments, ALL fields will be …\n"],["outer_apply","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-outer_apply","(table)","<p>Uses OUTER APPLY to join the given table into the current dataset.\n"],["output","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-output","(into, values)","<p>Include an OUTPUT clause in the eventual INSERT, UPDATE, or DELETE query.\n<p>The first argument is the table …\n"],["overriding_system_value","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-overriding_system_value","()","<p>Use OVERRIDING USER VALUE for INSERT statements, so that identity columns always use the user supplied …\n"],["overriding_user_value","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-overriding_user_value","()","<p>Use OVERRIDING USER VALUE for INSERT statements, so that identity columns always use the sequence value …\n"],["paged_each","Sequel::Mysql2::Dataset","Sequel/Mysql2/Dataset.html#method-i-paged_each","(opts=OPTS, &block)","<p>Use streaming to implement paging if Mysql2 supports it and it hasn&#39;t been disabled.\n"],["paged_each","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-paged_each","(opts=OPTS, &block)","<p>Use a cursor for paging.\n"],["partition_type","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-partition_type","()","<p>Determine the appropriate partition type for this partition by which methods were called on it.\n"],["precision","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-precision","()",""],["prepare","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-prepare","(sql, ps_name)","<p>Prepare a statement with the given <code>sql</code> on the database, and cache the prepared statement value by name. …\n"],["prepare_sproc","Sequel::Dataset::StoredProcedures","Sequel/Dataset/StoredProcedures.html#method-i-prepare_sproc","(type, name)","<p>Transform this dataset into a stored procedure that you can call multiple times with new arguments.\n"],["prepared_arg_placeholder","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-prepared_arg_placeholder","()","<p>PostgreSQL uses $N for placeholders instead of ?, so use a $ as the placeholder.\n"],["prepared_statement_modules","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-prepared_statement_modules","()",""],["primary_key","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-primary_key","(table, opts=OPTS)","<p>Return primary key for the given table.\n"],["primary_key","Sequel::Postgres::MockAdapterDatabaseMethods","Sequel/Postgres/MockAdapterDatabaseMethods.html#method-i-primary_key","(table)",""],["primary_key_sequence","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-primary_key_sequence","(table, opts=OPTS)","<p>Return the sequence providing the default for the primary key for the given table.\n"],["provides_accurate_rows_matched?","Sequel::ADO::Dataset","Sequel/ADO/Dataset.html#method-i-provides_accurate_rows_matched-3F","()","<p>ADO can return for for delete and update statements, depending on the provider.\n"],["provides_accurate_rows_matched?","Sequel::ADO::MSSQL::Dataset","Sequel/ADO/MSSQL/Dataset.html#method-i-provides_accurate_rows_matched-3F","()","<p>If you use a better :provider option for the database, you can get an accurate number of rows matched. …\n"],["quote_identifiers?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-quote_identifiers-3F","()",""],["quote_identifiers?","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-quote_identifiers-3F","()",""],["quoted_identifier_append","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-quoted_identifier_append","(sql, v)","<p>Access uses [] for quoting identifiers, and can&#39;t handle ] inside identifiers.\n"],["quoted_identifier_append","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-quoted_identifier_append","(sql, name)","<p>MSSQL uses [] to quote identifiers.\n"],["quoted_identifier_append","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-quoted_identifier_append","(sql, c)","<p>MySQL uses the nonstandard ` (backtick) for quoting identifiers.\n"],["quoted_identifier_append","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-quoted_identifier_append","(sql, c)","<p>SQLite uses the nonstandard ` (backtick) for quoting identifiers.\n"],["range","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-range","()","<p>The from and to values of this partition for a range partition.\n"],["recursive_cte_requires_column_aliases?","Sequel::JDBC::HSQLDB::Dataset","Sequel/JDBC/HSQLDB/Dataset.html#method-i-recursive_cte_requires_column_aliases-3F","()","<p>HSQLDB requires recursive CTEs to have column aliases.\n"],["recursive_cte_requires_column_aliases?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-recursive_cte_requires_column_aliases-3F","()","<p>Oracle requires recursive CTEs to have column aliases.\n"],["recursive_cte_requires_column_aliases?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-recursive_cte_requires_column_aliases-3F","()","<p>SqlAnywhere requires recursive CTEs to have column aliases.\n"],["refresh_view","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-refresh_view","(name, opts=OPTS)","<p>Refresh the materialized view with the given name.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">refresh_view</span>(<span class=\"ruby-value\">:items_view</span>)\n<span class=\"ruby-comment\"># REFRESH MATERIALIZED ...</span>\n</pre>\n"],["remainder","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-remainder","(v)","<p>Assumes hash partitioning, sets the remainder for this parition.\n"],["rename_table","Sequel::Access::DatabaseMethods","Sequel/Access/DatabaseMethods.html#method-i-rename_table","(from_table, to_table)","<p>Access doesn&#39;t support renaming tables from an SQL query, so create a copy of the table and then …\n"],["rename_tables","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-rename_tables","(*renames)","<p>Renames multiple tables in a single call.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">rename_tables</span> [<span class=\"ruby-value\">:items</span>, <span class=\"ruby-value\">:old_items</span>], [<span class=\"ruby-value\">:other_items</span>, <span class=\"ruby-value\">:old_other_items</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","Sequel::Dataset::Replace","Sequel/Dataset/Replace.html#method-i-replace","(*values)","<p>Execute a REPLACE statement on the database (deletes any duplicate rows before inserting).\n"],["replace_sql","Sequel::Dataset::Replace","Sequel/Dataset/Replace.html#method-i-replace_sql","(*values)","<p>SQL statement for REPLACE\n"],["requires_placeholder_type_specifiers?","Sequel::Oracle::Dataset","Sequel/Oracle/Dataset.html#method-i-requires_placeholder_type_specifiers-3F","()","<p>Oracle requires type specifiers for placeholders, at least if you ever want to use a nil/NULL value as …\n"],["requires_sql_standard_datetimes?","Sequel::JDBC::H2::Dataset","Sequel/JDBC/H2/Dataset.html#method-i-requires_sql_standard_datetimes-3F","()","<p>H2 requires SQL standard datetimes\n"],["requires_sql_standard_datetimes?","Sequel::JDBC::HSQLDB::Dataset","Sequel/JDBC/HSQLDB/Dataset.html#method-i-requires_sql_standard_datetimes-3F","()","<p>HSQLDB requires SQL standard datetimes in some places.\n"],["requires_sql_standard_datetimes?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-requires_sql_standard_datetimes-3F","()","<p>Oracle requires SQL standard datetimes\n"],["reset_primary_key_sequence","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-reset_primary_key_sequence","(table)","<p>Reset the primary key sequence for the given table, basing it on the maximum current value of the table&#39;s …\n"],["result_value_of","Sequel::Amalgalite::SequelTypeMap","Sequel/Amalgalite/SequelTypeMap.html#method-i-result_value_of","(declared_type, value)","<p>Don&#39;t raise an error if the value is a string and the declared type doesn&#39;t match a known type, …\n"],["returning","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-returning","(*values)","<p>Emulate RETURNING using the output clause.  This only handles values that are simple column references. …\n"],["returning","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-returning","(*values)","<p>Automatically add aliases to RETURNING values to work around SQLite bug.\n"],["rollback","Sequel::IBMDB::Connection","Sequel/IBMDB/Connection.html#method-i-rollback","()","<p>Rollback the currently outstanding transaction on this connection.\n"],["rollback_prepared_transaction","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-rollback_prepared_transaction","(transaction_id, opts=OPTS)",""],["rollback_prepared_transaction","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-rollback_prepared_transaction","(transaction_id, opts=OPTS)",""],["rollback_prepared_transaction","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-rollback_prepared_transaction","(transaction_id, opts=OPTS)",""],["run","Sequel::Dataset::StoredProcedureMethods","Sequel/Dataset/StoredProcedureMethods.html#method-i-run","(&block)","<p>Run the stored procedure with the current args on the database\n"],["scale","Sequel::ADO::Access::AdoSchema::Column","Sequel/ADO/Access/AdoSchema/Column.html#method-i-scale","()",""],["schema_parse_table","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-schema_parse_table","(table, opts = OPTS)","<p>Use SYSIBM.SYSCOLUMNS to get the information on the tables.\n"],["schema_parse_table","Sequel::SQLite","Sequel/SQLite.html#method-i-schema_parse_table","(*)",""],["schema_parse_table","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-schema_parse_table","(table, opts)",""],["select","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-select","(*cols)","<p>When a qualified column is selected on SQLite and the qualifier is a subselect, the column name used …\n"],["select_sql","Sequel::EmulateOffsetWithReverseAndCount","Sequel/EmulateOffsetWithReverseAndCount.html#method-i-select_sql","()","<p>Emulate OFFSET support using reverse order in a subselect, requiring a count of the number of rows.\n<p>If …\n"],["select_sql","Sequel::EmulateOffsetWithRowNumber","Sequel/EmulateOffsetWithRowNumber.html#method-i-select_sql","()","<p>Emulate OFFSET support with the ROW_NUMBER window function\n<p>The implementation is ugly, cloning the current …\n"],["select_sql","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-select_sql","()","<p>On MSSQL 2012+ add a default order to the current dataset if an offset is used. The default offset emulation …\n"],["select_sql","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-select_sql","()","<p>Handle LIMIT by using a unlimited subselect filtered with ROWNUM, unless Oracle 12 is used.\n"],["sequel_pg_version_supported?","Sequel::Postgres","Sequel/Postgres.html#method-c-sequel_pg_version_supported-3F","(version)","<p>Whether the given sequel_pg version integer is supported.\n"],["sequence","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-sequence","(s)","<p>Create a copy of this dataset associated to the given sequence name, which will be used when calling …\n"],["serial_primary_key_options","Sequel::Access::DatabaseMethods","Sequel/Access/DatabaseMethods.html#method-i-serial_primary_key_options","()","<p>Access uses type Counter for an autoincrementing keys\n"],["serial_primary_key_options","Sequel::JDBC::Derby::DatabaseMethods","Sequel/JDBC/Derby/DatabaseMethods.html#method-i-serial_primary_key_options","()","<p>Derby uses an IDENTITY sequence for autoincrementing columns.\n"],["serial_primary_key_options","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-serial_primary_key_options","()","<p>H2 uses an IDENTITY type for primary keys\n"],["serial_primary_key_options","Sequel::JDBC::HSQLDB::DatabaseMethods","Sequel/JDBC/HSQLDB/DatabaseMethods.html#method-i-serial_primary_key_options","()","<p>HSQLDB uses an IDENTITY sequence as the default value for primary key columns.\n"],["serial_primary_key_options","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-serial_primary_key_options","()","<p>PostgreSQL uses SERIAL psuedo-type instead of AUTOINCREMENT for managing incrementing primary keys.\n"],["server_version","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-server_version","()",""],["server_version","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-server_version","(server=nil)","<p>The version of the MSSQL server, as an integer (e.g. 10001600 for SQL Server 2008 Express).\n"],["server_version","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-server_version","()","<p>The version of the database server.\n"],["server_version","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-server_version","()","<p>Get version of MySQL server, used for determined capabilities.\n"],["server_version","Sequel::Mysql2::Database","Sequel/Mysql2/Database.html#method-i-server_version","(_server=nil)","<p>Return the version of the MySQL server to which we are connecting.\n"],["server_version","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-server_version","(server=nil)","<p>The version of the Oracle server, used for determining capability.\n"],["server_version","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-server_version","()","<p>The version of the database server\n"],["server_version","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-server_version","(server=nil)","<p>The version of the PostgreSQL server, used for determining capability.\n"],["set_integer_booleans","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-set_integer_booleans","()","<p>Set the integer_booleans option using the passed in :integer_boolean option.\n"],["setup_type_convertor_map","Sequel::JDBC::SQLServer::DatabaseMethods","Sequel/JDBC/SQLServer/DatabaseMethods.html#method-i-setup_type_convertor_map","()",""],["single_value","Sequel::Amalgalite::Database","Sequel/Amalgalite/Database.html#method-i-single_value","(sql, opts=OPTS)","<p>Run the given SQL with the given arguments and return the first value of the first row.\n"],["split_multiple_result_sets","Sequel::MySQL::Dataset","Sequel/MySQL/Dataset.html#method-i-split_multiple_result_sets","()","<p>Makes each yield arrays of rows, with each array containing the rows for a given result set.  Does not …\n"],["sproc_name","Sequel::Dataset::StoredProcedureMethods","Sequel/Dataset/StoredProcedureMethods.html#method-i-sproc_name","()","<p>The name of the stored procedure to call\n"],["sqlite_version","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-sqlite_version","()","<p>The version of the server as an integer, where 3.6.19 = 30619. If the server version can&#39;t be determined, …\n"],["sqls","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-sqls","()","<p>Return all stored SQL queries, and clear the cache of SQL queries.\n"],["status","Sequel::Postgres::Adapter","Sequel/Postgres/Adapter.html#method-i-status","()",""],["stream","Sequel::Mysql2::Dataset","Sequel/Mysql2/Dataset.html#method-i-stream","()","<p>Return a clone of the dataset that will stream rows when iterating over the result set, so it can handle …\n"],["subselect_sql_append","Sequel::IBMDB::Dataset::CallableStatementMethods","Sequel/IBMDB/Dataset/CallableStatementMethods.html#method-i-subselect_sql_append","(sql, ds)","<p>Extend given dataset with this module so subselects inside subselects in prepared statements work.\n"],["subselect_sql_append","Sequel::MySQL::PreparedStatements::DatasetMethods::CallableStatementMethods","Sequel/MySQL/PreparedStatements/DatasetMethods/CallableStatementMethods.html#method-i-subselect_sql_append","(sql, ds)","<p>Extend given dataset with this module so subselects inside subselects in prepared statements work.\n"],["supports_create_table_if_not_exists?","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-supports_create_table_if_not_exists-3F","()","<p>H2 supports CREATE TABLE IF NOT EXISTS syntax\n"],["supports_create_table_if_not_exists?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_create_table_if_not_exists-3F","()","<p>MySQL supports CREATE TABLE IF NOT EXISTS syntax.\n"],["supports_create_table_if_not_exists?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_create_table_if_not_exists-3F","()","<p>PostgreSQL supports CREATE TABLE IF NOT EXISTS on 9.1+\n"],["supports_create_table_if_not_exists?","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-supports_create_table_if_not_exists-3F","()","<p>SQLite supports CREATE TABLE IF NOT EXISTS syntax since 3.3.0.\n"],["supports_cte?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)",""],["supports_cte?","Sequel::JDBC::HSQLDB::Dataset","Sequel/JDBC/HSQLDB/Dataset.html#method-i-supports_cte-3F","(type=:select)","<p>HSQLDB does support common table expressions, but the support is broken. CTEs operate more like temprorary …\n"],["supports_cte?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)",""],["supports_cte?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)","<p>MariaDB 10.2+ and MySQL 8+ support CTEs\n"],["supports_cte?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)",""],["supports_cte?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)",""],["supports_cte?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)","<p>SQLite 3.8.3+ supports common table expressions.\n"],["supports_cte?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_cte-3F","(type=:select)",""],["supports_cte_in_subqueries?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_cte_in_subqueries-3F","()","<p>PostgreSQL supports using the WITH clause in subqueries if it supports using WITH at all (i.e. on PostgreSQL …\n"],["supports_cte_in_subqueries?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_cte_in_subqueries-3F","()","<p>SQLite supports CTEs in subqueries if it supports CTEs.\n"],["supports_deferrable_constraints?","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-supports_deferrable_constraints-3F","()","<p>Oracle supports deferrable constraints.\n"],["supports_deferrable_constraints?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_deferrable_constraints-3F","()","<p>PostgreSQL 9.0+ supports some types of deferrable constraints beyond foreign key constraints.\n"],["supports_deferrable_foreign_key_constraints?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_deferrable_foreign_key_constraints-3F","()","<p>PostgreSQL supports deferrable foreign key constraints.\n"],["supports_deferrable_foreign_key_constraints?","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-supports_deferrable_foreign_key_constraints-3F","()","<p>SQLite 3.6.19+ supports deferrable foreign key constraints.\n"],["supports_deleting_joins?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_deleting_joins-3F","()","<p>SQLite does not support deleting from a joined dataset\n"],["supports_derived_column_lists?","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-supports_derived_column_lists-3F","()","<p>Access does not support derived column lists.\n"],["supports_derived_column_lists?","Sequel::JDBC::H2::Dataset","Sequel/JDBC/H2/Dataset.html#method-i-supports_derived_column_lists-3F","()","<p>H2 does not support derived column lists\n"],["supports_derived_column_lists?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_derived_column_lists-3F","()","<p>MySQL does not support derived column lists\n"],["supports_derived_column_lists?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_derived_column_lists-3F","()","<p>Oracle does not support derived column lists\n"],["supports_derived_column_lists?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_derived_column_lists-3F","()","<p>SQLite does not support table aliases with column aliases\n"],["supports_distinct_on?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_distinct_on-3F","()","<p>MySQL can emulate DISTINCT ON with its non-standard GROUP BY implementation, though the rows returned …\n"],["supports_distinct_on?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_distinct_on-3F","()","<p>DISTINCT ON is a PostgreSQL extension\n"],["supports_drop_table_if_exists?","Sequel::JDBC::HSQLDB::DatabaseMethods","Sequel/JDBC/HSQLDB/DatabaseMethods.html#method-i-supports_drop_table_if_exists-3F","()","<p>HSQLDB supports DROP TABLE IF EXISTS\n"],["supports_drop_table_if_exists?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_drop_table_if_exists-3F","()","<p>PostgreSQL supports DROP TABLE IF EXISTS\n"],["supports_fetch_next_rows?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_fetch_next_rows-3F","()","<p>Oracle supports FETCH NEXT ROWS since 12c, but it doesn&#39;t work when locking or when skipping locked …\n"],["supports_generated_columns?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_generated_columns-3F","()","<p>Generated columns are supported in MariaDB 5.2.0+ and MySQL 5.7.6+.\n"],["supports_group_cube?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_group_cube-3F","()","<p>DB2 supports GROUP BY CUBE\n"],["supports_group_cube?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_group_cube-3F","()","<p>MSSQL 2005+ supports GROUP BY CUBE.\n"],["supports_group_cube?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_group_cube-3F","()","<p>Oracle supports GROUP BY CUBE\n"],["supports_group_cube?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_group_cube-3F","()","<p>PostgreSQL 9.5+ supports GROUP CUBE\n"],["supports_group_rollup?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_group_rollup-3F","()","<p>DB2 supports GROUP BY ROLLUP\n"],["supports_group_rollup?","Sequel::JDBC::Derby::Dataset","Sequel/JDBC/Derby/Dataset.html#method-i-supports_group_rollup-3F","()","<p>Derby supports GROUP BY ROLLUP (but not CUBE)\n"],["supports_group_rollup?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_group_rollup-3F","()","<p>MSSQL 2005+ supports GROUP BY ROLLUP\n"],["supports_group_rollup?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_group_rollup-3F","()","<p>MySQL supports GROUP BY WITH ROLLUP (but not CUBE)\n"],["supports_group_rollup?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_group_rollup-3F","()","<p>Oracle supports GROUP BY ROLLUP\n"],["supports_group_rollup?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_group_rollup-3F","()","<p>PostgreSQL 9.5+ supports GROUP ROLLUP\n"],["supports_grouping_sets?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_grouping_sets-3F","()","<p>DB2 supports GROUPING SETS\n"],["supports_grouping_sets?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_grouping_sets-3F","()","<p>MSSQL 2008+ supports GROUPING SETS\n"],["supports_grouping_sets?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_grouping_sets-3F","()","<p>Oracle supports GROUPING SETS\n"],["supports_grouping_sets?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_grouping_sets-3F","()","<p>PostgreSQL 9.5+ supports GROUPING SETS\n"],["supports_grouping_sets?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_grouping_sets-3F","()","<p>SQLAnywhere supports GROUPING SETS\n"],["supports_insert_conflict?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_insert_conflict-3F","()","<p>PostgreSQL 9.5+ supports the ON CONFLICT clause to INSERT.\n"],["supports_insert_select?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_insert_select-3F","()","<p>MSSQL supports insert_select via the OUTPUT clause.\n"],["supports_insert_select?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_insert_select-3F","()","<p>True unless insert returning has been disabled for this dataset.\n"],["supports_intersect_except?","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-supports_intersect_except-3F","()","<p>Access doesn&#39;t support INTERSECT or EXCEPT\n"],["supports_intersect_except?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_intersect_except-3F","()","<p>MSSQL 2005+ supports INTERSECT and EXCEPT\n"],["supports_intersect_except?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_intersect_except-3F","()","<p>MariaDB 10.3+ supports INTERSECT or EXCEPT\n"],["supports_intersect_except_all?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_intersect_except_all-3F","()","<p>Oracle does not support INTERSECT ALL or EXCEPT ALL\n"],["supports_intersect_except_all?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_intersect_except_all-3F","()","<p>SQLite does not support INTERSECT ALL or EXCEPT ALL\n"],["supports_is_true?","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-supports_is_true-3F","()","<p>Access does not support IS TRUE\n"],["supports_is_true?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_is_true-3F","()","<p>DB2 does not support IS TRUE.\n"],["supports_is_true?","Sequel::JDBC::Derby::Dataset","Sequel/JDBC/Derby/Dataset.html#method-i-supports_is_true-3F","()","<p>Derby does not support IS TRUE.\n"],["supports_is_true?","Sequel::JDBC::H2::Dataset","Sequel/JDBC/H2/Dataset.html#method-i-supports_is_true-3F","()","<p>H2 doesn&#39;t support IS TRUE\n"],["supports_is_true?","Sequel::JDBC::HSQLDB::Dataset","Sequel/JDBC/HSQLDB/Dataset.html#method-i-supports_is_true-3F","()","<p>HSQLDB does not support IS TRUE.\n"],["supports_is_true?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_is_true-3F","()","<p>MSSQL does not support IS TRUE\n"],["supports_is_true?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_is_true-3F","()","<p>Oracle does not support IS TRUE.\n"],["supports_is_true?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_is_true-3F","()","<p>SQLite does not support IS TRUE\n"],["supports_is_true?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_is_true-3F","()",""],["supports_join_using?","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-supports_join_using-3F","()","<p>Access doesn&#39;t support JOIN USING\n"],["supports_join_using?","Sequel::JDBC::H2::Dataset","Sequel/JDBC/H2/Dataset.html#method-i-supports_join_using-3F","()","<p>H2 doesn&#39;t support JOIN USING\n"],["supports_join_using?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_join_using-3F","()","<p>MSSQL doesn&#39;t support JOIN USING\n"],["supports_join_using?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_join_using-3F","()",""],["supports_lateral_subqueries?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_lateral_subqueries-3F","()","<p>DB2 supports lateral subqueries\n"],["supports_lateral_subqueries?","Sequel::JDBC::HSQLDB::Dataset","Sequel/JDBC/HSQLDB/Dataset.html#method-i-supports_lateral_subqueries-3F","()","<p>HSQLDB supports lateral subqueries.\n"],["supports_lateral_subqueries?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_lateral_subqueries-3F","()","<p>PostgreSQL 9.3+ supports lateral subqueries\n"],["supports_limits_in_correlated_subqueries?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_limits_in_correlated_subqueries-3F","()","<p>MySQL does not support limits in correlated subqueries (or any subqueries that use IN).\n"],["supports_limits_in_correlated_subqueries?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_limits_in_correlated_subqueries-3F","()","<p>Oracle does not support limits in correlated subqueries.\n"],["supports_modifying_joins?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_modifying_joins-3F","()","<p>MSSQL 2005+ supports modifying joined datasets\n"],["supports_modifying_joins?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_modifying_joins-3F","()","<p>MySQL supports modifying joined datasets\n"],["supports_modifying_joins?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_modifying_joins-3F","()","<p>PostgreSQL supports modifying joined datasets\n"],["supports_modifying_joins?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_modifying_joins-3F","()","<p>SQLite 3.33.0 supports modifying joined datasets\n"],["supports_multiple_column_in?","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-supports_multiple_column_in-3F","()","<p>Access does not support multiple columns for the IN/NOT IN operators\n"],["supports_multiple_column_in?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_multiple_column_in-3F","()","<p>DB2 does not support multiple columns in IN.\n"],["supports_multiple_column_in?","Sequel::JDBC::Derby::Dataset","Sequel/JDBC/Derby/Dataset.html#method-i-supports_multiple_column_in-3F","()","<p>Derby does not support IN/NOT IN with multiple columns\n"],["supports_multiple_column_in?","Sequel::JDBC::H2::Dataset","Sequel/JDBC/H2/Dataset.html#method-i-supports_multiple_column_in-3F","()","<p>H2 doesn&#39;t support multiple columns in IN/NOT IN\n"],["supports_multiple_column_in?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_multiple_column_in-3F","()","<p>MSSQL does not support multiple columns for the IN/NOT IN operators\n"],["supports_multiple_column_in?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_multiple_column_in-3F","()","<p>SQLite does not support multiple columns for the IN/NOT IN operators\n"],["supports_multiple_column_in?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_multiple_column_in-3F","()",""],["supports_nowait?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_nowait-3F","()","<p>MSSQL supports NOWAIT.\n"],["supports_nowait?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_nowait-3F","()","<p>MySQL 8+ and MariaDB 10.3+ support NOWAIT.\n"],["supports_nowait?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_nowait-3F","()","<p>Oracle supports NOWAIT.\n"],["supports_nowait?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_nowait-3F","()","<p>PostgreSQL supports NOWAIT.\n"],["supports_offsets_in_correlated_subqueries?","Sequel::EmulateOffsetWithReverseAndCount","Sequel/EmulateOffsetWithReverseAndCount.html#method-i-supports_offsets_in_correlated_subqueries-3F","()","<p>This does not support offsets in correlated subqueries, as it requires a query to get a count that will …\n"],["supports_offsets_in_correlated_subqueries?","Sequel::EmulateOffsetWithRowNumber","Sequel/EmulateOffsetWithRowNumber.html#method-i-supports_offsets_in_correlated_subqueries-3F","()","<p>This does not support offsets in correlated subqueries, as it requires a query to get the columns that …\n"],["supports_offsets_in_correlated_subqueries?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_offsets_in_correlated_subqueries-3F","()","<p>MSSQL 2012+ supports offsets in correlated subqueries.\n"],["supports_offsets_in_correlated_subqueries?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_offsets_in_correlated_subqueries-3F","()","<p>Oracle does not support offsets in correlated subqueries.\n"],["supports_ordered_distinct_on?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_ordered_distinct_on-3F","()","<p>MySQL&#39;s DISTINCT ON emulation using GROUP BY does not respect the query&#39;s ORDER BY clause.\n"],["supports_output_clause?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_output_clause-3F","()","<p>MSSQL 2005+ supports the OUTPUT clause.\n"],["supports_partial_indexes?","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-supports_partial_indexes-3F","()","<p>MSSQL 2008+ supports partial indexes.\n"],["supports_partial_indexes?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_partial_indexes-3F","()","<p>PostgreSQL supports partial indexes.\n"],["supports_partial_indexes?","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-supports_partial_indexes-3F","()","<p>SQLite 3.8.0+ supports partial indexes.\n"],["supports_prepared_transactions?","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-supports_prepared_transactions-3F","()","<p>H2 supports prepared transactions\n"],["supports_prepared_transactions?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_prepared_transactions-3F","()","<p>MySQL 5+ supports prepared transactions (two-phase commit) using XA\n"],["supports_prepared_transactions?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_prepared_transactions-3F","()","<p>PostgreSQL supports prepared transactions (two-phase commit) if max_prepared_transactions is greater …\n"],["supports_regexp?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_regexp-3F","()","<p>MySQL supports pattern matching via regular expressions\n"],["supports_regexp?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_regexp-3F","()","<p>Oracle 10+ supports pattern matching via regular expressions\n"],["supports_regexp?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_regexp-3F","()","<p>PostgreSQL supports pattern matching via regular expressions\n"],["supports_regexp?","Sequel::SQLite::Dataset","Sequel/SQLite/Dataset.html#method-i-supports_regexp-3F","()","<p>Support regexp if using :setup_regexp_function Database option.\n"],["supports_replace?","Sequel::Dataset::Replace","Sequel/Dataset/Replace.html#method-i-supports_replace-3F","()","<p>Databases using this module support REPLACE.\n"],["supports_returning?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_returning-3F","(type)","<p>MSSQL 2005+ can emulate RETURNING via the OUTPUT clause.\n"],["supports_returning?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_returning-3F","(type)","<p>Returning is always supported.\n"],["supports_returning?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_returning-3F","(_)","<p>SQLite 3.35.0 supports RETURNING on INSERT/UPDATE/DELETE.\n"],["supports_savepoints?","Sequel::JDBC::H2::DatabaseMethods","Sequel/JDBC/H2/DatabaseMethods.html#method-i-supports_savepoints-3F","()","<p>H2 supports savepoints\n"],["supports_savepoints?","Sequel::JDBC::Transactions","Sequel/JDBC/Transactions.html#method-i-supports_savepoints-3F","()","<p>Check the JDBC DatabaseMetaData for savepoint support\n"],["supports_savepoints?","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-supports_savepoints-3F","()","<p>MSSQL supports savepoints, though it doesn&#39;t support releasing them\n"],["supports_savepoints?","Sequel::Mock::Database","Sequel/Mock/Database.html#method-i-supports_savepoints-3F","()","<p>Enable use of savepoints.\n"],["supports_savepoints?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_savepoints-3F","()","<p>MySQL 5+ supports savepoints\n"],["supports_savepoints?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_savepoints-3F","()","<p>PostgreSQL supports savepoints\n"],["supports_savepoints?","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-supports_savepoints-3F","()","<p>SQLite 3.6.8+ supports savepoints.\n"],["supports_savepoints_in_prepared_transactions?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_savepoints_in_prepared_transactions-3F","()","<p>MySQL doesn&#39;t support savepoints inside prepared transactions in from 5.5.12 to 5.5.23, see bugs.mysql.com/bug.php?id=64374 …\n"],["supports_select_all_and_column?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_select_all_and_column-3F","()","<p>DB2 only allows * in SELECT if it is the only thing being selected.\n"],["supports_select_all_and_column?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_select_all_and_column-3F","()","<p>Oracle does not support SELECT *, column\n"],["supports_skip_locked?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_skip_locked-3F","()","<p>MSSQL uses READPAST to skip locked rows.\n"],["supports_skip_locked?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_skip_locked-3F","()","<p>MySQL 8+ supports SKIP LOCKED.\n"],["supports_skip_locked?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_skip_locked-3F","()","<p>Oracle supports SKIP LOCKED.\n"],["supports_skip_locked?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_skip_locked-3F","()","<p>PostgreSQL 9.5+ supports SKIP LOCKED.\n"],["supports_timestamp_timezones?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_timestamp_timezones-3F","()","<p>Oracle supports timezones in literal timestamps.\n"],["supports_timestamp_timezones?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_timestamp_timezones-3F","()","<p>PostgreSQL supports timezones in literal timestamps\n"],["supports_timestamp_timezones?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_timestamp_timezones-3F","()","<p>SQLite supports timezones in literal timestamps, since it stores them as text.  But using timezones in …\n"],["supports_timestamp_usecs?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_timestamp_usecs-3F","()","<p>Support fractional timestamps on MySQL 5.6.5+ if the :fractional_seconds Database option is used.  Technically …\n"],["supports_timestamp_usecs?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_timestamp_usecs-3F","()","<p>Check the database setting for whether fractional timestamps are suppported.\n"],["supports_timestamp_usecs?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_timestamp_usecs-3F","()",""],["supports_transaction_isolation_levels?","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-supports_transaction_isolation_levels-3F","()","<p>DB2 supports transaction isolation levels.\n"],["supports_transaction_isolation_levels?","Sequel::JDBC::Transactions","Sequel/JDBC/Transactions.html#method-i-supports_transaction_isolation_levels-3F","()","<p>Check the JDBC DatabaseMetaData for support for serializable isolation, since that&#39;s the value most …\n"],["supports_transaction_isolation_levels?","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-supports_transaction_isolation_levels-3F","()","<p>MSSQL supports transaction isolation levels\n"],["supports_transaction_isolation_levels?","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-supports_transaction_isolation_levels-3F","()","<p>MySQL supports transaction isolation levels\n"],["supports_transaction_isolation_levels?","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-supports_transaction_isolation_levels-3F","()","<p>Oracle supports transaction isolation levels.\n"],["supports_transaction_isolation_levels?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_transaction_isolation_levels-3F","()","<p>PostgreSQL supports transaction isolation levels\n"],["supports_transactional_ddl?","Sequel::JDBC::Derby::DatabaseMethods","Sequel/JDBC/Derby/DatabaseMethods.html#method-i-supports_transactional_ddl-3F","()","<p>Derby supports transactional DDL statements.\n"],["supports_transactional_ddl?","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-supports_transactional_ddl-3F","()","<p>MSSQL supports transaction DDL statements.\n"],["supports_transactional_ddl?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_transactional_ddl-3F","()","<p>PostgreSQL supports transaction DDL statements.\n"],["supports_trigger_conditions?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-supports_trigger_conditions-3F","()","<p>PostgreSQL 9.0+ supports trigger conditions.\n"],["supports_where_true?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_where_true-3F","()","<p>DB2 does not support WHERE 1.\n"],["supports_where_true?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_where_true-3F","()","<p>MSSQL cannot use WHERE 1.\n"],["supports_where_true?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_where_true-3F","()","<p>Oracle does not support WHERE &#39;Y&#39; for WHERE TRUE.\n"],["supports_where_true?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_where_true-3F","()","<p>SQLite cannot use WHERE &#39;t&#39;.\n"],["supports_where_true?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_where_true-3F","()",""],["supports_window_clause?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_window_clause-3F","()","<p>MySQL 8+ supports WINDOW clause.\n"],["supports_window_clause?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_window_clause-3F","()","<p>PostgreSQL 8.4+ supports WINDOW clause.\n"],["supports_window_clause?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_window_clause-3F","()","<p>SQLite 3.28+ supports the WINDOW clause.\n"],["supports_window_clause?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_window_clause-3F","()",""],["supports_window_function_frame_option?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_window_function_frame_option-3F","(option)","<p>Base support added in 8.4, offset supported added in 9.0, GROUPS and EXCLUDE support added in 11.0.\n"],["supports_window_function_frame_option?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_window_function_frame_option-3F","(option)","<p>SQLite 3.28.0+ supports all window frame options that Sequel supports\n"],["supports_window_functions?","Sequel::DB2::DatasetMethods","Sequel/DB2/DatasetMethods.html#method-i-supports_window_functions-3F","()","<p>DB2 supports window functions\n"],["supports_window_functions?","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-supports_window_functions-3F","()","<p>MSSQL 2005+ supports window functions\n"],["supports_window_functions?","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-supports_window_functions-3F","()","<p>MariaDB 10.2+ and MySQL 8+ support window functions\n"],["supports_window_functions?","Sequel::Oracle::DatasetMethods","Sequel/Oracle/DatasetMethods.html#method-i-supports_window_functions-3F","()","<p>Oracle supports window functions\n"],["supports_window_functions?","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-supports_window_functions-3F","()","<p>PostgreSQL 8.4+ supports window functions\n"],["supports_window_functions?","Sequel::SQLite::DatasetMethods","Sequel/SQLite/DatasetMethods.html#method-i-supports_window_functions-3F","()","<p>SQLite 3.25+ supports window functions.  However, support is only enabled on SQLite 3.26.0+ because internal …\n"],["supports_window_functions?","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-supports_window_functions-3F","()",""],["svn_version","Sequel::JDBC::Derby::DatabaseMethods","Sequel/JDBC/Derby/DatabaseMethods.html#method-i-svn_version","()","<p>The SVN version of the database.\n"],["table_exists?","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-table_exists-3F","(name)","<p>On DB2, a table might need to be REORGed if you are testing existence of it.  This REORGs automatically …\n"],["tables","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-tables","(opts=OPTS)",""],["tables","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-tables","()","<p>Use SYSCAT.TABLES to get the tables for the database\n"],["tables","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-tables","(opts=OPTS)","<p>All tables in this database\n"],["tables","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-tables","(opts=OPTS)","<p>Microsoft SQL Server supports using the INFORMATION_SCHEMA to get information on tables.\n"],["tables","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-tables","(opts=OPTS)","<p>Return an array of symbols specifying table names in the current database.\n<p>Options:\n<p>:server  &mdash; Set the server …\n"],["tables","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-tables","(opts=OPTS)",""],["tables","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-tables","(opts=OPTS, &block)","<p>Array of symbols specifying table names in the current database. The dataset used is yielded to the block …\n"],["tables","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-tables","(opts=OPTS)","<p>Array of symbols specifying the table names in the current database.\n<p>Options:\n<p>:server  &mdash; Set the server to …\n"],["tables","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-tables","(opts=OPTS)",""],["time","Sequel::Amalgalite::SequelTypeMap","Sequel/Amalgalite/SequelTypeMap.html#method-i-time","(s)",""],["to","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-to","(*v)","<p>Assumes range partitioning, sets the exclusive maximum value of the range for this partition.\n"],["to_application_timestamp","Sequel::SQLite::Database","Sequel/SQLite/Database.html#method-i-to_application_timestamp","(s)","<p>Handle Integer and Float arguments, since SQLite can store timestamps as integers and floats.\n"],["to_application_timestamp_sa","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-to_application_timestamp_sa","(v)",""],["to_prepared_statement","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-to_prepared_statement","(type, *a)",""],["transaction_mode=","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-transaction_mode-3D","(value)","<p>Set the default transaction mode.\n"],["truncate","Sequel::Access::DatasetMethods","Sequel/Access/DatasetMethods.html#method-i-truncate","()","<p>Access doesn&#39;t support truncate, so do a delete instead.\n"],["truncate","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-truncate","(opts = OPTS)","<p>Truncates the dataset.  Returns nil.\n<p>Options:\n<p>:cascade  &mdash; whether to use the CASCADE option, useful when …\n"],["type_convertor","Sequel::JDBC::Oracle::Dataset","Sequel/JDBC/Oracle/Dataset.html#method-i-type_convertor","(map, meta, type, i)",""],["type_convertor","Sequel::JDBC::SQLServer::DatabaseMethods::MetadataDatasetMethods","Sequel/JDBC/SQLServer/DatabaseMethods/MetadataDatasetMethods.html#method-i-type_convertor","(map, meta, type, i)",""],["type_convertor","Sequel::JDBC::SQLite::ForeignKeyListPragmaConvertorFix","Sequel/JDBC/SQLite/ForeignKeyListPragmaConvertorFix.html#method-i-type_convertor","(_, _, _, i)","<p>For the use of the convertor for String, working around a bug in jdbc-sqlite3 that reports fields are …\n"],["type_convertor","Sequel::JDBC::SQLite::TableInfoPragmaConvertorFix","Sequel/JDBC/SQLite/TableInfoPragmaConvertorFix.html#method-i-type_convertor","(_, _, _, i)","<p>For the use of the convertor for String, working around a bug in jdbc-sqlite3 that reports dflt_value …\n"],["type_supported?","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-type_supported-3F","(type)","<p>Check whether the given type name string/symbol (e.g. :hstore) is supported by the database.\n"],["update_ignore","Sequel::MySQL::DatasetMethods","Sequel/MySQL/DatasetMethods.html#method-i-update_ignore","()","<p>Sets up the update methods to use UPDATE IGNORE. Useful if you have a unique key and want to just skip …\n"],["uri","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-uri","(opts=OPTS)","<p>The uri for this connection.  You can specify the uri using the :uri, :url, or :database options.  You …\n"],["use_cursor","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-use_cursor","(opts=OPTS)","<p>Uses a cursor for fetching records, instead of fetching the entire result set at once.  Note this uses …\n"],["use_timestamp_timezones?","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-use_timestamp_timezones-3F","()","<p>SQLite supports timezones in timestamps, since it just stores them as strings, but it breaks the usage …\n"],["validate_constraint","Sequel::Postgres::AlterTableGenerator","Sequel/Postgres/AlterTableGenerator.html#method-i-validate_constraint","(name)","<p>Validate the constraint with the given name, which should have been added previously with NOT VALID. …\n"],["values","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-values","(v)","<p>Creates a dataset that uses the VALUES clause:\n\n<pre>DB.values([[1, 2], [3, 4]])\n# VALUES ((1, 2), (3, 4))\n ...</pre>\n"],["values","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-values","(v)","<p>Creates a dataset that uses the VALUES clause:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DB</span>.<span class=\"ruby-identifier\">values</span>([[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>], [<span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>]])\n<span class=\"ruby-comment\"># VALUES ((1, 2), (3, 4))</span>\n</pre>\n"],["values_in","Sequel::Postgres::CreatePartitionOfTableGenerator","Sequel/Postgres/CreatePartitionOfTableGenerator.html#method-i-values_in","(*v)","<p>Assumes list partitioning, sets the values to be included in this partition.\n"],["view_exists?","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-view_exists-3F","(name, opts=OPTS)","<p>Whether a view with a given name exists.  By default, looks in all schemas other than system schemas. …\n"],["views","Sequel::ADO::Access::DatabaseMethods","Sequel/ADO/Access/DatabaseMethods.html#method-i-views","(opts=OPTS)",""],["views","Sequel::DB2::DatabaseMethods","Sequel/DB2/DatabaseMethods.html#method-i-views","()","<p>Use SYSCAT.TABLES to get the views for the database\n"],["views","Sequel::JDBC::Database","Sequel/JDBC/Database.html#method-i-views","(opts=OPTS)","<p>All views in this database\n"],["views","Sequel::MSSQL::DatabaseMethods","Sequel/MSSQL/DatabaseMethods.html#method-i-views","(opts=OPTS)","<p>Microsoft SQL Server supports using the INFORMATION_SCHEMA to get information on views.\n"],["views","Sequel::MySQL::DatabaseMethods","Sequel/MySQL/DatabaseMethods.html#method-i-views","(opts=OPTS)","<p>Return an array of symbols specifying view names in the current database.\n<p>Options:\n<p>:server  &mdash; Set the server …\n"],["views","Sequel::Oracle::DatabaseMethods","Sequel/Oracle/DatabaseMethods.html#method-i-views","(opts=OPTS)",""],["views","Sequel::Postgres::DatabaseMethods","Sequel/Postgres/DatabaseMethods.html#method-i-views","(opts=OPTS)","<p>Array of symbols specifying view names in the current database.\n<p>Options:\n<p>:materialized  &mdash; Return materialized …\n"],["views","Sequel::SQLite::DatabaseMethods","Sequel/SQLite/DatabaseMethods.html#method-i-views","(opts=OPTS)","<p>Array of symbols specifying the view names in the current database.\n<p>Options:\n<p>:server  &mdash; Set the server to …\n"],["views","Sequel::SqlAnywhere::DatabaseMethods","Sequel/SqlAnywhere/DatabaseMethods.html#method-i-views","(opts=OPTS)",""],["where_current_of","Sequel::Postgres::Dataset","Sequel/Postgres/Dataset.html#method-i-where_current_of","(cursor_name='sequel_cursor')","<p>Replace the WHERE clause with one that uses CURRENT OF with the given cursor name (or the default cursor …\n"],["with_autoid","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-with_autoid","(autoid)","<p>Return cloned dataset with the autoid setting modified\n"],["with_convert_smallint_to_bool","Sequel::IBMDB::Dataset","Sequel/IBMDB/Dataset.html#method-i-with_convert_smallint_to_bool","(v)","<p>Return a cloned dataset with the convert_smallint_to_bool option set.\n"],["with_convert_smallint_to_bool","Sequel::SqlAnywhere::DatasetMethods","Sequel/SqlAnywhere/DatasetMethods.html#method-i-with_convert_smallint_to_bool","(v)","<p>Return a cloned dataset with the convert_smallint_to_bool option set.\n"],["with_convert_types","Sequel::JDBC::Dataset","Sequel/JDBC/Dataset.html#method-i-with_convert_types","(v)","<p>Set whether to convert Java types to ruby types in the returned dataset.\n"],["with_fetch","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-with_fetch","(fetch)","<p>Return cloned dataset with the fetch setting modified\n"],["with_fetch_size","Sequel::JDBC::Dataset","Sequel/JDBC/Dataset.html#method-i-with_fetch_size","(size)","<p>Set the fetch size on JDBC ResultSets created from the returned dataset.\n"],["with_fetch_size","Sequel::JDBC::Postgres::Dataset","Sequel/JDBC/Postgres/Dataset.html#method-i-with_fetch_size","(size)","<p>Warn when calling as the fetch size is ignored by the JDBC adapter currently.\n"],["with_mssql_unicode_strings","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-with_mssql_unicode_strings","(v)","<p>Return a cloned dataset with the mssql_unicode_strings option set.\n"],["with_numrows","Sequel::Mock::Dataset","Sequel/Mock/Dataset.html#method-i-with_numrows","(numrows)","<p>Return cloned dataset with the numrows setting modified\n"],["with_ties","Sequel::MSSQL::DatasetMethods","Sequel/MSSQL/DatasetMethods.html#method-i-with_ties","()","<p>Use WITH TIES when limiting the result set to also include additional rows matching the last row.\n"],["with_ties","Sequel::Postgres::DatasetMethods","Sequel/Postgres/DatasetMethods.html#method-i-with_ties","()","<p>Use WITH TIES when limiting the result set to also include additional rules that have the same results …\n"]]}}